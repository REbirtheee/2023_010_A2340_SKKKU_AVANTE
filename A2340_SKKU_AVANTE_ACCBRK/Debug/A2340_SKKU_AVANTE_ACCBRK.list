
A2340_SKKU_AVANTE_ACCBRK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800987c  0800987c  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800987c  0800987c  0001987c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009884  08009884  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009888  08009888  00019888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800988c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d5c  200002d8  08009b64  000202d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003034  08009b64  00023034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 13 .debug_info   000240ea  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040ea  00000000  00000000  00044435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  00048520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001444  00000000  00000000  00049f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a303  00000000  00000000  0004b39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee48  00000000  00000000  0007569f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b2fb  00000000  00000000  000944e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000710c  00000000  00000000  0019f7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001a68f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002d8 	.word	0x200002d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080097a0 	.word	0x080097a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002dc 	.word	0x200002dc
 800021c:	080097a0 	.word	0x080097a0

08000220 <__aeabi_dmul>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000226:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800022a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800022e:	bf1d      	ittte	ne
 8000230:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000234:	ea94 0f0c 	teqne	r4, ip
 8000238:	ea95 0f0c 	teqne	r5, ip
 800023c:	f000 f8de 	bleq	80003fc <__aeabi_dmul+0x1dc>
 8000240:	442c      	add	r4, r5
 8000242:	ea81 0603 	eor.w	r6, r1, r3
 8000246:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800024a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800024e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000252:	bf18      	it	ne
 8000254:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000258:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800025c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000260:	d038      	beq.n	80002d4 <__aeabi_dmul+0xb4>
 8000262:	fba0 ce02 	umull	ip, lr, r0, r2
 8000266:	f04f 0500 	mov.w	r5, #0
 800026a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800026e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000272:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000276:	f04f 0600 	mov.w	r6, #0
 800027a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800027e:	f09c 0f00 	teq	ip, #0
 8000282:	bf18      	it	ne
 8000284:	f04e 0e01 	orrne.w	lr, lr, #1
 8000288:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800028c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000290:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000294:	d204      	bcs.n	80002a0 <__aeabi_dmul+0x80>
 8000296:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800029a:	416d      	adcs	r5, r5
 800029c:	eb46 0606 	adc.w	r6, r6, r6
 80002a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b8:	bf88      	it	hi
 80002ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002be:	d81e      	bhi.n	80002fe <__aeabi_dmul+0xde>
 80002c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002c4:	bf08      	it	eq
 80002c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ca:	f150 0000 	adcs.w	r0, r0, #0
 80002ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d8:	ea46 0101 	orr.w	r1, r6, r1
 80002dc:	ea40 0002 	orr.w	r0, r0, r2
 80002e0:	ea81 0103 	eor.w	r1, r1, r3
 80002e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e8:	bfc2      	ittt	gt
 80002ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002f2:	bd70      	popgt	{r4, r5, r6, pc}
 80002f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f8:	f04f 0e00 	mov.w	lr, #0
 80002fc:	3c01      	subs	r4, #1
 80002fe:	f300 80ab 	bgt.w	8000458 <__aeabi_dmul+0x238>
 8000302:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000306:	bfde      	ittt	le
 8000308:	2000      	movle	r0, #0
 800030a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800030e:	bd70      	pople	{r4, r5, r6, pc}
 8000310:	f1c4 0400 	rsb	r4, r4, #0
 8000314:	3c20      	subs	r4, #32
 8000316:	da35      	bge.n	8000384 <__aeabi_dmul+0x164>
 8000318:	340c      	adds	r4, #12
 800031a:	dc1b      	bgt.n	8000354 <__aeabi_dmul+0x134>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f305 	lsl.w	r3, r0, r5
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f205 	lsl.w	r2, r1, r5
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000338:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	fa21 f604 	lsr.w	r6, r1, r4
 8000344:	eb42 0106 	adc.w	r1, r2, r6
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 040c 	rsb	r4, r4, #12
 8000358:	f1c4 0520 	rsb	r5, r4, #32
 800035c:	fa00 f304 	lsl.w	r3, r0, r4
 8000360:	fa20 f005 	lsr.w	r0, r0, r5
 8000364:	fa01 f204 	lsl.w	r2, r1, r4
 8000368:	ea40 0002 	orr.w	r0, r0, r2
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f1c4 0520 	rsb	r5, r4, #32
 8000388:	fa00 f205 	lsl.w	r2, r0, r5
 800038c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000390:	fa20 f304 	lsr.w	r3, r0, r4
 8000394:	fa01 f205 	lsl.w	r2, r1, r5
 8000398:	ea43 0302 	orr.w	r3, r3, r2
 800039c:	fa21 f004 	lsr.w	r0, r1, r4
 80003a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	fa21 f204 	lsr.w	r2, r1, r4
 80003a8:	ea20 0002 	bic.w	r0, r0, r2
 80003ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b4:	bf08      	it	eq
 80003b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f094 0f00 	teq	r4, #0
 80003c0:	d10f      	bne.n	80003e2 <__aeabi_dmul+0x1c2>
 80003c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003c6:	0040      	lsls	r0, r0, #1
 80003c8:	eb41 0101 	adc.w	r1, r1, r1
 80003cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3c01      	subeq	r4, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1a6>
 80003d6:	ea41 0106 	orr.w	r1, r1, r6
 80003da:	f095 0f00 	teq	r5, #0
 80003de:	bf18      	it	ne
 80003e0:	4770      	bxne	lr
 80003e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003e6:	0052      	lsls	r2, r2, #1
 80003e8:	eb43 0303 	adc.w	r3, r3, r3
 80003ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f0:	bf08      	it	eq
 80003f2:	3d01      	subeq	r5, #1
 80003f4:	d0f7      	beq.n	80003e6 <__aeabi_dmul+0x1c6>
 80003f6:	ea43 0306 	orr.w	r3, r3, r6
 80003fa:	4770      	bx	lr
 80003fc:	ea94 0f0c 	teq	r4, ip
 8000400:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000404:	bf18      	it	ne
 8000406:	ea95 0f0c 	teqne	r5, ip
 800040a:	d00c      	beq.n	8000426 <__aeabi_dmul+0x206>
 800040c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000410:	bf18      	it	ne
 8000412:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000416:	d1d1      	bne.n	80003bc <__aeabi_dmul+0x19c>
 8000418:	ea81 0103 	eor.w	r1, r1, r3
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd70      	pop	{r4, r5, r6, pc}
 8000426:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800042a:	bf06      	itte	eq
 800042c:	4610      	moveq	r0, r2
 800042e:	4619      	moveq	r1, r3
 8000430:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000434:	d019      	beq.n	800046a <__aeabi_dmul+0x24a>
 8000436:	ea94 0f0c 	teq	r4, ip
 800043a:	d102      	bne.n	8000442 <__aeabi_dmul+0x222>
 800043c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000440:	d113      	bne.n	800046a <__aeabi_dmul+0x24a>
 8000442:	ea95 0f0c 	teq	r5, ip
 8000446:	d105      	bne.n	8000454 <__aeabi_dmul+0x234>
 8000448:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800044c:	bf1c      	itt	ne
 800044e:	4610      	movne	r0, r2
 8000450:	4619      	movne	r1, r3
 8000452:	d10a      	bne.n	800046a <__aeabi_dmul+0x24a>
 8000454:	ea81 0103 	eor.w	r1, r1, r3
 8000458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800045c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd70      	pop	{r4, r5, r6, pc}
 800046a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800046e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000472:	bd70      	pop	{r4, r5, r6, pc}

08000474 <__aeabi_drsub>:
 8000474:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e002      	b.n	8000480 <__adddf3>
 800047a:	bf00      	nop

0800047c <__aeabi_dsub>:
 800047c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000480 <__adddf3>:
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000486:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800048a:	ea94 0f05 	teq	r4, r5
 800048e:	bf08      	it	eq
 8000490:	ea90 0f02 	teqeq	r0, r2
 8000494:	bf1f      	itttt	ne
 8000496:	ea54 0c00 	orrsne.w	ip, r4, r0
 800049a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800049e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a6:	f000 80e2 	beq.w	800066e <__adddf3+0x1ee>
 80004aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004b2:	bfb8      	it	lt
 80004b4:	426d      	neglt	r5, r5
 80004b6:	dd0c      	ble.n	80004d2 <__adddf3+0x52>
 80004b8:	442c      	add	r4, r5
 80004ba:	ea80 0202 	eor.w	r2, r0, r2
 80004be:	ea81 0303 	eor.w	r3, r1, r3
 80004c2:	ea82 0000 	eor.w	r0, r2, r0
 80004c6:	ea83 0101 	eor.w	r1, r3, r1
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	2d36      	cmp	r5, #54	; 0x36
 80004d4:	bf88      	it	hi
 80004d6:	bd30      	pophi	{r4, r5, pc}
 80004d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e8:	d002      	beq.n	80004f0 <__adddf3+0x70>
 80004ea:	4240      	negs	r0, r0
 80004ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004fc:	d002      	beq.n	8000504 <__adddf3+0x84>
 80004fe:	4252      	negs	r2, r2
 8000500:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000504:	ea94 0f05 	teq	r4, r5
 8000508:	f000 80a7 	beq.w	800065a <__adddf3+0x1da>
 800050c:	f1a4 0401 	sub.w	r4, r4, #1
 8000510:	f1d5 0e20 	rsbs	lr, r5, #32
 8000514:	db0d      	blt.n	8000532 <__adddf3+0xb2>
 8000516:	fa02 fc0e 	lsl.w	ip, r2, lr
 800051a:	fa22 f205 	lsr.w	r2, r2, r5
 800051e:	1880      	adds	r0, r0, r2
 8000520:	f141 0100 	adc.w	r1, r1, #0
 8000524:	fa03 f20e 	lsl.w	r2, r3, lr
 8000528:	1880      	adds	r0, r0, r2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	4159      	adcs	r1, r3
 8000530:	e00e      	b.n	8000550 <__adddf3+0xd0>
 8000532:	f1a5 0520 	sub.w	r5, r5, #32
 8000536:	f10e 0e20 	add.w	lr, lr, #32
 800053a:	2a01      	cmp	r2, #1
 800053c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000540:	bf28      	it	cs
 8000542:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000546:	fa43 f305 	asr.w	r3, r3, r5
 800054a:	18c0      	adds	r0, r0, r3
 800054c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	d507      	bpl.n	8000566 <__adddf3+0xe6>
 8000556:	f04f 0e00 	mov.w	lr, #0
 800055a:	f1dc 0c00 	rsbs	ip, ip, #0
 800055e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000562:	eb6e 0101 	sbc.w	r1, lr, r1
 8000566:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800056a:	d31b      	bcc.n	80005a4 <__adddf3+0x124>
 800056c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000570:	d30c      	bcc.n	800058c <__adddf3+0x10c>
 8000572:	0849      	lsrs	r1, r1, #1
 8000574:	ea5f 0030 	movs.w	r0, r0, rrx
 8000578:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800057c:	f104 0401 	add.w	r4, r4, #1
 8000580:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000584:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000588:	f080 809a 	bcs.w	80006c0 <__adddf3+0x240>
 800058c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	ea41 0105 	orr.w	r1, r1, r5
 80005a2:	bd30      	pop	{r4, r5, pc}
 80005a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a8:	4140      	adcs	r0, r0
 80005aa:	eb41 0101 	adc.w	r1, r1, r1
 80005ae:	3c01      	subs	r4, #1
 80005b0:	bf28      	it	cs
 80005b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005b6:	d2e9      	bcs.n	800058c <__adddf3+0x10c>
 80005b8:	f091 0f00 	teq	r1, #0
 80005bc:	bf04      	itt	eq
 80005be:	4601      	moveq	r1, r0
 80005c0:	2000      	moveq	r0, #0
 80005c2:	fab1 f381 	clz	r3, r1
 80005c6:	bf08      	it	eq
 80005c8:	3320      	addeq	r3, #32
 80005ca:	f1a3 030b 	sub.w	r3, r3, #11
 80005ce:	f1b3 0220 	subs.w	r2, r3, #32
 80005d2:	da0c      	bge.n	80005ee <__adddf3+0x16e>
 80005d4:	320c      	adds	r2, #12
 80005d6:	dd08      	ble.n	80005ea <__adddf3+0x16a>
 80005d8:	f102 0c14 	add.w	ip, r2, #20
 80005dc:	f1c2 020c 	rsb	r2, r2, #12
 80005e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e4:	fa21 f102 	lsr.w	r1, r1, r2
 80005e8:	e00c      	b.n	8000604 <__adddf3+0x184>
 80005ea:	f102 0214 	add.w	r2, r2, #20
 80005ee:	bfd8      	it	le
 80005f0:	f1c2 0c20 	rsble	ip, r2, #32
 80005f4:	fa01 f102 	lsl.w	r1, r1, r2
 80005f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005fc:	bfdc      	itt	le
 80005fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000602:	4090      	lslle	r0, r2
 8000604:	1ae4      	subs	r4, r4, r3
 8000606:	bfa2      	ittt	ge
 8000608:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800060c:	4329      	orrge	r1, r5
 800060e:	bd30      	popge	{r4, r5, pc}
 8000610:	ea6f 0404 	mvn.w	r4, r4
 8000614:	3c1f      	subs	r4, #31
 8000616:	da1c      	bge.n	8000652 <__adddf3+0x1d2>
 8000618:	340c      	adds	r4, #12
 800061a:	dc0e      	bgt.n	800063a <__adddf3+0x1ba>
 800061c:	f104 0414 	add.w	r4, r4, #20
 8000620:	f1c4 0220 	rsb	r2, r4, #32
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f302 	lsl.w	r3, r1, r2
 800062c:	ea40 0003 	orr.w	r0, r0, r3
 8000630:	fa21 f304 	lsr.w	r3, r1, r4
 8000634:	ea45 0103 	orr.w	r1, r5, r3
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f1c4 040c 	rsb	r4, r4, #12
 800063e:	f1c4 0220 	rsb	r2, r4, #32
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 f304 	lsl.w	r3, r1, r4
 800064a:	ea40 0003 	orr.w	r0, r0, r3
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	fa21 f004 	lsr.w	r0, r1, r4
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	f094 0f00 	teq	r4, #0
 800065e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000662:	bf06      	itte	eq
 8000664:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000668:	3401      	addeq	r4, #1
 800066a:	3d01      	subne	r5, #1
 800066c:	e74e      	b.n	800050c <__adddf3+0x8c>
 800066e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000672:	bf18      	it	ne
 8000674:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000678:	d029      	beq.n	80006ce <__adddf3+0x24e>
 800067a:	ea94 0f05 	teq	r4, r5
 800067e:	bf08      	it	eq
 8000680:	ea90 0f02 	teqeq	r0, r2
 8000684:	d005      	beq.n	8000692 <__adddf3+0x212>
 8000686:	ea54 0c00 	orrs.w	ip, r4, r0
 800068a:	bf04      	itt	eq
 800068c:	4619      	moveq	r1, r3
 800068e:	4610      	moveq	r0, r2
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	ea91 0f03 	teq	r1, r3
 8000696:	bf1e      	ittt	ne
 8000698:	2100      	movne	r1, #0
 800069a:	2000      	movne	r0, #0
 800069c:	bd30      	popne	{r4, r5, pc}
 800069e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006a2:	d105      	bne.n	80006b0 <__adddf3+0x230>
 80006a4:	0040      	lsls	r0, r0, #1
 80006a6:	4149      	adcs	r1, r1
 80006a8:	bf28      	it	cs
 80006aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006ae:	bd30      	pop	{r4, r5, pc}
 80006b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006b4:	bf3c      	itt	cc
 80006b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ba:	bd30      	popcc	{r4, r5, pc}
 80006bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf1a      	itte	ne
 80006d4:	4619      	movne	r1, r3
 80006d6:	4610      	movne	r0, r2
 80006d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006dc:	bf1c      	itt	ne
 80006de:	460b      	movne	r3, r1
 80006e0:	4602      	movne	r2, r0
 80006e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006e6:	bf06      	itte	eq
 80006e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ec:	ea91 0f03 	teqeq	r1, r3
 80006f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	bf00      	nop

080006f8 <__aeabi_ui2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f04f 0500 	mov.w	r5, #0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e750      	b.n	80005b8 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_i2d>:
 8000718:	f090 0f00 	teq	r0, #0
 800071c:	bf04      	itt	eq
 800071e:	2100      	moveq	r1, #0
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000728:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800072c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000730:	bf48      	it	mi
 8000732:	4240      	negmi	r0, r0
 8000734:	f04f 0100 	mov.w	r1, #0
 8000738:	e73e      	b.n	80005b8 <__adddf3+0x138>
 800073a:	bf00      	nop

0800073c <__aeabi_f2d>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000742:	ea4f 0131 	mov.w	r1, r1, rrx
 8000746:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800074a:	bf1f      	itttt	ne
 800074c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000750:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000754:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000758:	4770      	bxne	lr
 800075a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800075e:	bf08      	it	eq
 8000760:	4770      	bxeq	lr
 8000762:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000766:	bf04      	itt	eq
 8000768:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800077c:	e71c      	b.n	80005b8 <__adddf3+0x138>
 800077e:	bf00      	nop

08000780 <__aeabi_ul2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f04f 0500 	mov.w	r5, #0
 800078e:	e00a      	b.n	80007a6 <__aeabi_l2d+0x16>

08000790 <__aeabi_l2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800079e:	d502      	bpl.n	80007a6 <__aeabi_l2d+0x16>
 80007a0:	4240      	negs	r0, r0
 80007a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007b2:	f43f aed8 	beq.w	8000566 <__adddf3+0xe6>
 80007b6:	f04f 0203 	mov.w	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ce:	f1c2 0320 	rsb	r3, r2, #32
 80007d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007d6:	fa20 f002 	lsr.w	r0, r0, r2
 80007da:	fa01 fe03 	lsl.w	lr, r1, r3
 80007de:	ea40 000e 	orr.w	r0, r0, lr
 80007e2:	fa21 f102 	lsr.w	r1, r1, r2
 80007e6:	4414      	add	r4, r2
 80007e8:	e6bd      	b.n	8000566 <__adddf3+0xe6>
 80007ea:	bf00      	nop

080007ec <__aeabi_d2f>:
 80007ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007f4:	bf24      	itt	cs
 80007f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007fe:	d90d      	bls.n	800081c <__aeabi_d2f+0x30>
 8000800:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000804:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000808:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800080c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000810:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000814:	bf08      	it	eq
 8000816:	f020 0001 	biceq.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000820:	d121      	bne.n	8000866 <__aeabi_d2f+0x7a>
 8000822:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000826:	bfbc      	itt	lt
 8000828:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800082c:	4770      	bxlt	lr
 800082e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000832:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000836:	f1c2 0218 	rsb	r2, r2, #24
 800083a:	f1c2 0c20 	rsb	ip, r2, #32
 800083e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000842:	fa20 f002 	lsr.w	r0, r0, r2
 8000846:	bf18      	it	ne
 8000848:	f040 0001 	orrne.w	r0, r0, #1
 800084c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000850:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000854:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000858:	ea40 000c 	orr.w	r0, r0, ip
 800085c:	fa23 f302 	lsr.w	r3, r3, r2
 8000860:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000864:	e7cc      	b.n	8000800 <__aeabi_d2f+0x14>
 8000866:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800086a:	d107      	bne.n	800087c <__aeabi_d2f+0x90>
 800086c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000870:	bf1e      	ittt	ne
 8000872:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000876:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800087a:	4770      	bxne	lr
 800087c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000880:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000884:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <Accel_Control_Task>:

/***************************************/
/*             Accel Control           */
/***************************************/
void Accel_Control_Task()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	/* 01 : Accel Command Data / Status Data Parsing */
	Accel_Command_Info_Data_Parsing();
 8000b8c:	f000 f80c 	bl	8000ba8 <Accel_Command_Info_Data_Parsing>

	/* 02 : Accel Command Data Tx  */
	Accel_Control_Sequnce();
 8000b90:	f000 f8fa 	bl	8000d88 <Accel_Control_Sequnce>

	/* 03 : Task Sequnce Timer [ 10ms ]  */
	SequenceTimer(&acc.timer_10ms, TIM_SEQUENCE_1, TIM_SEQUENCE_INIT_10);
 8000b94:	220a      	movs	r2, #10
 8000b96:	2100      	movs	r1, #0
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <Accel_Control_Task+0x1c>)
 8000b9a:	f002 fdfd 	bl	8003798 <SequenceTimer>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200029ca 	.word	0x200029ca

08000ba8 <Accel_Command_Info_Data_Parsing>:

void Accel_Command_Info_Data_Parsing()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	/* Command Data Parsing */
	acc.AD_ACC_AliveCnt = acc.raw_data_0x310[0];
 8000bac:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	4b73      	ldr	r3, [pc, #460]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	acc.AD_ACC_ChkSum = acc.raw_data_0x310[1];
 8000bb6:	4b72      	ldr	r3, [pc, #456]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	4b71      	ldr	r3, [pc, #452]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bbc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	acc.AD_ACC_CtrlMode = acc.raw_data_0x310[2];
 8000bc0:	4b6f      	ldr	r3, [pc, #444]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bc2:	789a      	ldrb	r2, [r3, #2]
 8000bc4:	4b6e      	ldr	r3, [pc, #440]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	acc.AD_ACC_Cmd_Pos = acc.raw_data_0x310[3];
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bcc:	78da      	ldrb	r2, [r3, #3]
 8000bce:	4b6c      	ldr	r3, [pc, #432]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bd0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if(acc.raw_data_0x310[4] == TRUE) acc.AD_ACC_TakeOver = TRUE;
 8000bd4:	4b6a      	ldr	r3, [pc, #424]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d103      	bne.n	8000be4 <Accel_Command_Info_Data_Parsing+0x3c>
 8000bdc:	4b68      	ldr	r3, [pc, #416]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	if(acc.AD_ACC_CtrlMode == FALSE) acc.AD_ACC_TakeOver = FALSE;
 8000be4:	4b66      	ldr	r3, [pc, #408]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000be6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d103      	bne.n	8000bf6 <Accel_Command_Info_Data_Parsing+0x4e>
 8000bee:	4b64      	ldr	r3, [pc, #400]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/* Accel Command Percentage -> Voltage Convert */
	acc.acc_ctrl_vol_ratio = (float)(acc.AD_ACC_Cmd_Pos * 0.01);
 8000bf6:	4b62      	ldr	r3, [pc, #392]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000bf8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fd8b 	bl	8000718 <__aeabi_i2d>
 8000c02:	a359      	add	r3, pc, #356	; (adr r3, 8000d68 <Accel_Command_Info_Data_Parsing+0x1c0>)
 8000c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c08:	f7ff fb0a 	bl	8000220 <__aeabi_dmul>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	460b      	mov	r3, r1
 8000c10:	4610      	mov	r0, r2
 8000c12:	4619      	mov	r1, r3
 8000c14:	f7ff fdea 	bl	80007ec <__aeabi_d2f>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4a59      	ldr	r2, [pc, #356]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
	acc.acc_ctrl_vol_float = (float)(ACC_MASTER_VOLTAGE_MIN + ((ACC_MASTER_VOLTAGE_MAX - ACC_MASTER_VOLTAGE_MIN) * acc.acc_ctrl_vol_ratio));
 8000c1e:	4b58      	ldr	r3, [pc, #352]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fd8a 	bl	800073c <__aeabi_f2d>
 8000c28:	a351      	add	r3, pc, #324	; (adr r3, 8000d70 <Accel_Command_Info_Data_Parsing+0x1c8>)
 8000c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2e:	f7ff faf7 	bl	8000220 <__aeabi_dmul>
 8000c32:	4602      	mov	r2, r0
 8000c34:	460b      	mov	r3, r1
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	a34f      	add	r3, pc, #316	; (adr r3, 8000d78 <Accel_Command_Info_Data_Parsing+0x1d0>)
 8000c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c40:	f7ff fc1e 	bl	8000480 <__adddf3>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff fdce 	bl	80007ec <__aeabi_d2f>
 8000c50:	4603      	mov	r3, r0
 8000c52:	4a4b      	ldr	r2, [pc, #300]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c54:	6353      	str	r3, [r2, #52]	; 0x34

	acc.acc_ctrl_master_vol = (uint16_t)(acc.acc_ctrl_vol_float * 12500);
 8000c56:	4b4a      	ldr	r3, [pc, #296]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c58:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000c5c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000d84 <Accel_Command_Info_Data_Parsing+0x1dc>
 8000c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c68:	ee17 3a90 	vmov	r3, s15
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b44      	ldr	r3, [pc, #272]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c70:	855a      	strh	r2, [r3, #42]	; 0x2a
	acc.acc_ctrl_slave_vol = (acc.acc_ctrl_master_vol / 2);
 8000c72:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c7c:	859a      	strh	r2, [r3, #44]	; 0x2c

	/*  Apu Control Data Parsing */
	acc.raw_data_0x451[0] = acc.acc_ctrl_master_vol >> 8;
 8000c7e:	4b40      	ldr	r3, [pc, #256]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c82:	0a1b      	lsrs	r3, r3, #8
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c8a:	735a      	strb	r2, [r3, #13]
	acc.raw_data_0x451[1] = acc.acc_ctrl_master_vol;
 8000c8c:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c94:	739a      	strb	r2, [r3, #14]
	acc.raw_data_0x451[2] = acc.acc_ctrl_slave_vol  >> 8;
 8000c96:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000ca2:	73da      	strb	r2, [r3, #15]
	acc.raw_data_0x451[3] = acc.acc_ctrl_slave_vol;
 8000ca4:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000ca6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cac:	741a      	strb	r2, [r3, #16]

	if(!acc.AD_ACC_TakeOver)acc.raw_data_0x451[4] = acc.AD_ACC_CtrlMode;
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d105      	bne.n	8000cc4 <Accel_Command_Info_Data_Parsing+0x11c>
 8000cb8:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cba:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cc0:	745a      	strb	r2, [r3, #17]
 8000cc2:	e002      	b.n	8000cca <Accel_Command_Info_Data_Parsing+0x122>
	else acc.raw_data_0x451[4] = FALSE;
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	745a      	strb	r2, [r3, #17]

	acc.raw_data_0x451[5] = acc.acc_ctrl_alivecnt;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000ccc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cd2:	749a      	strb	r2, [r3, #18]

	/*  Module Status Data Parsing */
	acc.raw_data_0x610[0] = acc.TRZ_ACC_AliveCnt;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cd6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cdc:	76da      	strb	r2, [r3, #27]
	acc.raw_data_0x610[1] = acc.TRZ_ACC_ChkSum;
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000ce0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000ce6:	771a      	strb	r2, [r3, #28]
	acc.raw_data_0x610[2] = acc.AD_ACC_CtrlMode;
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cf0:	775a      	strb	r2, [r3, #29]
	acc.raw_data_0x610[3] = acc.AD_ACC_Cmd_Pos;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cf4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000cf8:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cfa:	779a      	strb	r2, [r3, #30]
	acc.raw_data_0x610[4] = acc.AD_ACC_TakeOver;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000cfe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d04:	77da      	strb	r2, [r3, #31]

	if((acc.raw_data_0x450[4] == 0x00) && (acc.raw_data_0x450[5] == 0x00)) {
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d08:	7a5b      	ldrb	r3, [r3, #9]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d108      	bne.n	8000d20 <Accel_Command_Info_Data_Parsing+0x178>
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d10:	7a9b      	ldrb	r3, [r3, #10]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d104      	bne.n	8000d20 <Accel_Command_Info_Data_Parsing+0x178>

		acc.apu_no_error_cnt = FALSE;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000d1e:	e007      	b.n	8000d30 <Accel_Command_Info_Data_Parsing+0x188>
	} else {

		acc.apu_no_error_cnt ++;
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d26:	3301      	adds	r3, #1
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	if(acc.apu_no_error_cnt > 100) {
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d36:	2b64      	cmp	r3, #100	; 0x64
 8000d38:	d90a      	bls.n	8000d50 <Accel_Command_Info_Data_Parsing+0x1a8>

		acc.raw_data_0x610[5] = acc.raw_data_0x450[4];
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d3c:	7a5a      	ldrb	r2, [r3, #9]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d40:	f883 2020 	strb.w	r2, [r3, #32]
		acc.raw_data_0x610[6] = acc.raw_data_0x450[5];
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d46:	7a9a      	ldrb	r2, [r3, #10]
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		acc.raw_data_0x610[6] = 0x00;
	}



}
 8000d4e:	e007      	b.n	8000d60 <Accel_Command_Info_Data_Parsing+0x1b8>
		acc.raw_data_0x610[5] = 0x00;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]
		acc.raw_data_0x610[6] = 0x00;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <Accel_Command_Info_Data_Parsing+0x1d8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	f3af 8000 	nop.w
 8000d68:	47ae147b 	.word	0x47ae147b
 8000d6c:	3f847ae1 	.word	0x3f847ae1
 8000d70:	8f5c28f6 	.word	0x8f5c28f6
 8000d74:	400af5c2 	.word	0x400af5c2
 8000d78:	851eb852 	.word	0x851eb852
 8000d7c:	3fe851eb 	.word	0x3fe851eb
 8000d80:	20002990 	.word	0x20002990
 8000d84:	46435000 	.word	0x46435000

08000d88 <Accel_Control_Sequnce>:

void Accel_Control_Sequnce()
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	if(acc.timer_10ms == TIM_SEQUENCE_1) {
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <Accel_Control_Sequnce+0x58>)
 8000d8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d107      	bne.n	8000da6 <Accel_Control_Sequnce+0x1e>
		/* 01 : APC CMD DATA Tx */
		TXCAN2(0x451, FDCAN_DLC_BYTES_6, acc.raw_data_0x451);
 8000d96:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <Accel_Control_Sequnce+0x5c>)
 8000d98:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8000d9c:	f240 4051 	movw	r0, #1105	; 0x451
 8000da0:	f000 fac8 	bl	8001334 <TXCAN2>

	} else if(acc.timer_10ms == TIM_SEQUENCE_10) {
		/* 10 : Alive Count */
		Accel_Alive_Count();
	}
}
 8000da4:	e01a      	b.n	8000ddc <Accel_Control_Sequnce+0x54>
	} else if(acc.timer_10ms == TIM_SEQUENCE_2) {
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <Accel_Control_Sequnce+0x58>)
 8000da8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d015      	beq.n	8000ddc <Accel_Control_Sequnce+0x54>
	} else if(acc.timer_10ms == TIM_SEQUENCE_3) {
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <Accel_Control_Sequnce+0x58>)
 8000db2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d010      	beq.n	8000ddc <Accel_Control_Sequnce+0x54>
	} else if(acc.timer_10ms == TIM_SEQUENCE_4) {
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <Accel_Control_Sequnce+0x58>)
 8000dbc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d00b      	beq.n	8000ddc <Accel_Control_Sequnce+0x54>
	} else if(acc.timer_10ms == TIM_SEQUENCE_9) {
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <Accel_Control_Sequnce+0x58>)
 8000dc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000dca:	2b08      	cmp	r3, #8
 8000dcc:	d006      	beq.n	8000ddc <Accel_Control_Sequnce+0x54>
	} else if(acc.timer_10ms == TIM_SEQUENCE_10) {
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <Accel_Control_Sequnce+0x58>)
 8000dd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000dd4:	2b09      	cmp	r3, #9
 8000dd6:	d101      	bne.n	8000ddc <Accel_Control_Sequnce+0x54>
		Accel_Alive_Count();
 8000dd8:	f000 f806 	bl	8000de8 <Accel_Alive_Count>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20002990 	.word	0x20002990
 8000de4:	2000299d 	.word	0x2000299d

08000de8 <Accel_Alive_Count>:

void Accel_Alive_Count()
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	if(acc.acc_ctrl_alivecnt < 10) {
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <Accel_Alive_Count+0x34>)
 8000dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000df2:	2b09      	cmp	r3, #9
 8000df4:	d808      	bhi.n	8000e08 <Accel_Alive_Count+0x20>
		acc.acc_ctrl_alivecnt ++;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <Accel_Alive_Count+0x34>)
 8000df8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <Accel_Alive_Count+0x34>)
 8000e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	} else {
		acc.acc_ctrl_alivecnt = 0;

	}
}
 8000e06:	e003      	b.n	8000e10 <Accel_Alive_Count+0x28>
		acc.acc_ctrl_alivecnt = 0;
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <Accel_Alive_Count+0x34>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20002990 	.word	0x20002990

08000e20 <Brake_Control_Task>:

/***************************************/
/*             Brake Control           */
/***************************************/
void Brake_Control_Task()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	/* 01 : Brake Command Data / Status Data Parsing */
	Brake_Command_Info_Data_Parsing();
 8000e24:	f000 f80e 	bl	8000e44 <Brake_Command_Info_Data_Parsing>

	/* 02 : Motor Encoder Init  */
	Motor_Encoder_Init();
 8000e28:	f000 f866 	bl	8000ef8 <Motor_Encoder_Init>

	/* 03 : Brake Command Data  */
	Brake_Control_Sequnce();
 8000e2c:	f000 f8a0 	bl	8000f70 <Brake_Control_Sequnce>

	/* 04 : Task Sequnce Timer [ 10ms ]  */
	SequenceTimer(&brk.timer_10ms, TIM_SEQUENCE_1, TIM_SEQUENCE_INIT_10);
 8000e30:	220a      	movs	r2, #10
 8000e32:	2100      	movs	r1, #0
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <Brake_Control_Task+0x20>)
 8000e36:	f002 fcaf 	bl	8003798 <SequenceTimer>

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20002f0c 	.word	0x20002f0c

08000e44 <Brake_Command_Info_Data_Parsing>:

void Brake_Command_Info_Data_Parsing()
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	/* Command Data Parsing */
	brk.AD_BRKMOT_AliveCnt = brk.raw_data_0x300[0];
 8000e48:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e4a:	781a      	ldrb	r2, [r3, #0]
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e4e:	73da      	strb	r2, [r3, #15]
	brk.AD_BRKMOT_ChkSum = brk.raw_data_0x300[1];
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e52:	785a      	ldrb	r2, [r3, #1]
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e56:	741a      	strb	r2, [r3, #16]
	brk.AD_BRKMOT_CtrlMode = brk.raw_data_0x300[2];
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e5a:	789a      	ldrb	r2, [r3, #2]
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e5e:	745a      	strb	r2, [r3, #17]
	brk.AD_BRKMOT_Cmd_Pos = brk.raw_data_0x300[3];
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e62:	78da      	ldrb	r2, [r3, #3]
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e66:	749a      	strb	r2, [r3, #18]
	brk.AD_BRKMOT_Cmd_Vel = ((brk.raw_data_0x300[5] << 8) | (brk.raw_data_0x300[4]));
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e72:	791b      	ldrb	r3, [r3, #4]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e7e:	829a      	strh	r2, [r3, #20]
	if(brk.raw_data_0x300[6] == TRUE)brk.AD_BRKMOT_TakeOver = TRUE;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e82:	799b      	ldrb	r3, [r3, #6]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d102      	bne.n	8000e8e <Brake_Command_Info_Data_Parsing+0x4a>
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	759a      	strb	r2, [r3, #22]
	if(brk.AD_BRKMOT_CtrlMode == FALSE)brk.AD_BRKMOT_TakeOver = FALSE;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e90:	7c5b      	ldrb	r3, [r3, #17]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <Brake_Command_Info_Data_Parsing+0x58>
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	759a      	strb	r2, [r3, #22]

	/*  Module Status Data Parsing */
	brk.raw_data_0x600[0] = brk.TRZ_BRKMOT_AliveCnt;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000e9e:	7dda      	ldrb	r2, [r3, #23]
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000ea2:	71da      	strb	r2, [r3, #7]
	brk.raw_data_0x600[1] = brk.TRZ_BRKMOT_ChkSum;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000ea6:	7e1a      	ldrb	r2, [r3, #24]
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000eaa:	721a      	strb	r2, [r3, #8]
	brk.raw_data_0x600[2] = brk.AD_BRKMOT_CtrlMode;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000eae:	7c5a      	ldrb	r2, [r3, #17]
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000eb2:	725a      	strb	r2, [r3, #9]
	brk.raw_data_0x600[3] = brk.AD_BRKMOT_Cmd_Pos;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000eb6:	7c9a      	ldrb	r2, [r3, #18]
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000eba:	729a      	strb	r2, [r3, #10]
	brk.raw_data_0x600[4] = brk.AD_BRKMOT_Cmd_Vel;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000ebe:	8a9b      	ldrh	r3, [r3, #20]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000ec4:	72da      	strb	r2, [r3, #11]
	brk.raw_data_0x600[5] = brk.AD_BRKMOT_Cmd_Vel >> 8;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000ec8:	8a9b      	ldrh	r3, [r3, #20]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000ed2:	731a      	strb	r2, [r3, #12]
	brk.raw_data_0x600[6] = brk.AD_BRKMOT_TakeOver;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000ed6:	7d9a      	ldrb	r2, [r3, #22]
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000eda:	735a      	strb	r2, [r3, #13]
	brk.raw_data_0x600[7] = motor_info.status[5];
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <Brake_Command_Info_Data_Parsing+0xb0>)
 8000ede:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8000ee2:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <Brake_Command_Info_Data_Parsing+0xac>)
 8000ee4:	739a      	strb	r2, [r3, #14]

}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	20002eec 	.word	0x20002eec
 8000ef4:	20002ea0 	.word	0x20002ea0

08000ef8 <Motor_Encoder_Init>:

void Motor_Encoder_Init()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	int16_t motor_angle;
	motor_angle = ((motor_info.pos_vel_curr_tor[1] << 8) | motor_info.pos_vel_curr_tor[0]);
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <Motor_Encoder_Init+0x6c>)
 8000f00:	7d5b      	ldrb	r3, [r3, #21]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <Motor_Encoder_Init+0x6c>)
 8000f08:	7d1b      	ldrb	r3, [r3, #20]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	80fb      	strh	r3, [r7, #6]

	if(!brk.encoder_init_flag) {
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <Motor_Encoder_Init+0x70>)
 8000f12:	7e5b      	ldrb	r3, [r3, #25]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d11d      	bne.n	8000f54 <Motor_Encoder_Init+0x5c>

		Motor_Auto_On();
 8000f18:	f000 f8fe 	bl	8001118 <Motor_Auto_On>
		Servo_On();
 8000f1c:	f000 f8e0 	bl	80010e0 <Servo_On>
		motor_cmd.status[3] = TRUE; //ENCODER INIT ON
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <Motor_Encoder_Init+0x74>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		brk.encoder_init_timer ++;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <Motor_Encoder_Init+0x70>)
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <Motor_Encoder_Init+0x70>)
 8000f30:	61d3      	str	r3, [r2, #28]


		if((brk.encoder_init_timer > 1000) && (motor_angle == 0x00)) {
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <Motor_Encoder_Init+0x70>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f3a:	d90f      	bls.n	8000f5c <Motor_Encoder_Init+0x64>
 8000f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10b      	bne.n	8000f5c <Motor_Encoder_Init+0x64>
			Motor_Auto_Off();
 8000f44:	f000 f8f6 	bl	8001134 <Motor_Auto_Off>
			Servo_Off();
 8000f48:	f000 f8d8 	bl	80010fc <Servo_Off>
			brk.encoder_init_flag = TRUE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <Motor_Encoder_Init+0x70>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	765a      	strb	r2, [r3, #25]

	else {

		motor_cmd.status[3] = FALSE; //ENCODER INIT OFF
	}
}
 8000f52:	e003      	b.n	8000f5c <Motor_Encoder_Init+0x64>
		motor_cmd.status[3] = FALSE; //ENCODER INIT OFF
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <Motor_Encoder_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20002ea0 	.word	0x20002ea0
 8000f68:	20002eec 	.word	0x20002eec
 8000f6c:	20002bdc 	.word	0x20002bdc

08000f70 <Brake_Control_Sequnce>:

void Brake_Control_Sequnce()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	if(brk.encoder_init_flag) {
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <Brake_Control_Sequnce+0x3c>)
 8000f76:	7e5b      	ldrb	r3, [r3, #25]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d014      	beq.n	8000fa6 <Brake_Control_Sequnce+0x36>

		/***        Auto Mode (Servo On)         ***/
		if(brk.AD_BRKMOT_CtrlMode && !brk.AD_BRKMOT_TakeOver) {
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <Brake_Control_Sequnce+0x3c>)
 8000f7e:	7c5b      	ldrb	r3, [r3, #17]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00a      	beq.n	8000f9a <Brake_Control_Sequnce+0x2a>
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <Brake_Control_Sequnce+0x3c>)
 8000f86:	7d9b      	ldrb	r3, [r3, #22]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d106      	bne.n	8000f9a <Brake_Control_Sequnce+0x2a>
			//Motor Posion Control Init
			Motor_Auto_On();
 8000f8c:	f000 f8c4 	bl	8001118 <Motor_Auto_On>
			Servo_On();
 8000f90:	f000 f8a6 	bl	80010e0 <Servo_On>

			//Motor Position Control
			Position_Control_Mode_On();
 8000f94:	f000 f80c 	bl	8000fb0 <Position_Control_Mode_On>
			//Motor Position Control Reset
			Position_Control_Mode_Off();

		}
	}
}
 8000f98:	e005      	b.n	8000fa6 <Brake_Control_Sequnce+0x36>
			Motor_Auto_Off();
 8000f9a:	f000 f8cb 	bl	8001134 <Motor_Auto_Off>
			Servo_Off();
 8000f9e:	f000 f8ad 	bl	80010fc <Servo_Off>
			Position_Control_Mode_Off();
 8000fa2:	f000 f85d 	bl	8001060 <Position_Control_Mode_Off>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20002eec 	.word	0x20002eec

08000fb0 <Position_Control_Mode_On>:

void Position_Control_Mode_On()
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
	int16_t steer_pos_command;
	uint16_t steer_vel_command;
	uint16_t steer_acc_command = 500;
 8000fb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fba:	80bb      	strh	r3, [r7, #4]
	uint16_t steer_dec_command = 500;
 8000fbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fc0:	807b      	strh	r3, [r7, #2]

	/* Motor Position Mode Command */
	motor_cmd.status[4] = 0x01;
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <Position_Control_Mode_On+0xa8>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	/* User Position Command Data Parisng */
	/* Brake Command Percentage -> Degree Convert */
	steer_pos_command = (int16_t)(brk.AD_BRKMOT_Cmd_Pos * 4); //100% -> 40.0Deg
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <Position_Control_Mode_On+0xac>)
 8000fcc:	7c9b      	ldrb	r3, [r3, #18]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	80fb      	strh	r3, [r7, #6]

	/* User Velocity Command Data Parisng */
	steer_vel_command = brk.AD_BRKMOT_Cmd_Vel;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <Position_Control_Mode_On+0xac>)
 8000fd8:	8a9b      	ldrh	r3, [r3, #20]
 8000fda:	803b      	strh	r3, [r7, #0]


	/* User Position Command Data SafeLock */
	if(steer_pos_command > 400) steer_pos_command = 400;
 8000fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fe4:	dd03      	ble.n	8000fee <Position_Control_Mode_On+0x3e>
 8000fe6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	e005      	b.n	8000ffa <Position_Control_Mode_On+0x4a>
	else if(steer_pos_command < 0) steer_pos_command = 0;
 8000fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da01      	bge.n	8000ffa <Position_Control_Mode_On+0x4a>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	80fb      	strh	r3, [r7, #6]


	/* Command Position Data Parsing */
	motor_cmd.user[0] = steer_pos_command;
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <Position_Control_Mode_On+0xa8>)
 8001000:	701a      	strb	r2, [r3, #0]
	motor_cmd.user[1] = steer_pos_command >> 8;
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	121b      	asrs	r3, r3, #8
 8001008:	b21b      	sxth	r3, r3
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <Position_Control_Mode_On+0xa8>)
 800100e:	705a      	strb	r2, [r3, #1]
	motor_cmd.user[2] = steer_vel_command;
 8001010:	883b      	ldrh	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <Position_Control_Mode_On+0xa8>)
 8001016:	709a      	strb	r2, [r3, #2]
	motor_cmd.user[3] = steer_vel_command >> 8;
 8001018:	883b      	ldrh	r3, [r7, #0]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29b      	uxth	r3, r3
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <Position_Control_Mode_On+0xa8>)
 8001022:	70da      	strb	r2, [r3, #3]
	motor_cmd.user[4] = steer_acc_command;
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <Position_Control_Mode_On+0xa8>)
 800102a:	711a      	strb	r2, [r3, #4]
	motor_cmd.user[5] = steer_acc_command >> 8;
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <Position_Control_Mode_On+0xa8>)
 8001036:	715a      	strb	r2, [r3, #5]
	motor_cmd.user[6] = steer_dec_command;
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <Position_Control_Mode_On+0xa8>)
 800103e:	719a      	strb	r2, [r3, #6]
	motor_cmd.user[7] = steer_dec_command >> 8;
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	b29b      	uxth	r3, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <Position_Control_Mode_On+0xa8>)
 800104a:	71da      	strb	r2, [r3, #7]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20002bdc 	.word	0x20002bdc
 800105c:	20002eec 	.word	0x20002eec

08001060 <Position_Control_Mode_Off>:

void Position_Control_Mode_Off()
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	int16_t steer_pos_command = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	80fb      	strh	r3, [r7, #6]
	uint16_t steer_vel_command = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	80bb      	strh	r3, [r7, #4]
	uint16_t steer_acc_command = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	807b      	strh	r3, [r7, #2]
	uint16_t steer_dec_command = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	803b      	strh	r3, [r7, #0]

	/* Motor Position Mode Command */
	motor_cmd.status[4] = 0x01;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	/* Command Position Data Parsing */
	motor_cmd.user[0] = steer_pos_command;
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 8001084:	701a      	strb	r2, [r3, #0]
	motor_cmd.user[1] = steer_pos_command >> 8;
 8001086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108a:	121b      	asrs	r3, r3, #8
 800108c:	b21b      	sxth	r3, r3
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 8001092:	705a      	strb	r2, [r3, #1]
	motor_cmd.user[2] = steer_vel_command;
 8001094:	88bb      	ldrh	r3, [r7, #4]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 800109a:	709a      	strb	r2, [r3, #2]
	motor_cmd.user[3] = steer_vel_command >> 8;
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 80010a6:	70da      	strb	r2, [r3, #3]
	motor_cmd.user[4] = steer_acc_command;
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 80010ae:	711a      	strb	r2, [r3, #4]
	motor_cmd.user[5] = steer_acc_command >> 8;
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 80010ba:	715a      	strb	r2, [r3, #5]
	motor_cmd.user[6] = steer_dec_command;
 80010bc:	883b      	ldrh	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 80010c2:	719a      	strb	r2, [r3, #6]
	motor_cmd.user[7] = steer_dec_command >> 8;
 80010c4:	883b      	ldrh	r3, [r7, #0]
 80010c6:	0a1b      	lsrs	r3, r3, #8
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <Position_Control_Mode_Off+0x7c>)
 80010ce:	71da      	strb	r2, [r3, #7]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	20002bdc 	.word	0x20002bdc

080010e0 <Servo_On>:



void Servo_On()
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	motor_cmd.status[1] = TRUE;
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <Servo_On+0x18>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20002bdc 	.word	0x20002bdc

080010fc <Servo_Off>:

void Servo_Off()
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	motor_cmd.status[1] = FALSE;
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <Servo_Off+0x18>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20002bdc 	.word	0x20002bdc

08001118 <Motor_Auto_On>:

void Motor_Auto_On()
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	motor_cmd.status[0] = TRUE;
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <Motor_Auto_On+0x18>)
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20002bdc 	.word	0x20002bdc

08001134 <Motor_Auto_Off>:

void Motor_Auto_Off()
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	motor_cmd.status[0] = FALSE;
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <Motor_Auto_Off+0x18>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20002bdc 	.word	0x20002bdc

08001150 <Module_Status_Task>:

/***************************************/
/*         Accel / Brake Status        */
/***************************************/
void Module_Status_Task()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	/* 01 : Module Status Data Tx  */
	Module_Status_Sequnce();
 8001154:	f000 f80c 	bl	8001170 <Module_Status_Sequnce>

	/* 02 : Debug Data Parsing  */
	Debug_Data_Parsing();
 8001158:	f000 f866 	bl	8001228 <Debug_Data_Parsing>

	/* 03 : Task Sequnce Timer [ 10ms ]  */
	SequenceTimer(&stat.timer_20ms, TIM_SEQUENCE_1, TIM_SEQUENCE_INIT_20);
 800115c:	2214      	movs	r2, #20
 800115e:	2100      	movs	r1, #0
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <Module_Status_Task+0x1c>)
 8001162:	f002 fb19 	bl	8003798 <SequenceTimer>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20002e9b 	.word	0x20002e9b

08001170 <Module_Status_Sequnce>:

void Module_Status_Sequnce()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	if(stat.timer_20ms == TIM_SEQUENCE_1) {
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <Module_Status_Sequnce+0x64>)
 8001176:	7adb      	ldrb	r3, [r3, #11]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d107      	bne.n	800118c <Module_Status_Sequnce+0x1c>
		/* 01 : BRK MOT STAT DATA Tx */
		TXCAN1(0x600, FDCAN_DLC_BYTES_8, brk.raw_data_0x600);
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <Module_Status_Sequnce+0x68>)
 800117e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001182:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001186:	f000 f8b3 	bl	80012f0 <TXCAN1>

	} else if(stat.timer_20ms == TIM_SEQUENCE_4) {
		/* 04 : Alive Count */
		Status_Alive_Count();
	}
}
 800118a:	e021      	b.n	80011d0 <Module_Status_Sequnce+0x60>
	} else if(stat.timer_20ms == TIM_SEQUENCE_2) {
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <Module_Status_Sequnce+0x64>)
 800118e:	7adb      	ldrb	r3, [r3, #11]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <Module_Status_Sequnce+0x34>
		TXCAN1(0x610, FDCAN_DLC_BYTES_7, acc.raw_data_0x610);
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <Module_Status_Sequnce+0x6c>)
 8001196:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800119a:	f44f 60c2 	mov.w	r0, #1552	; 0x610
 800119e:	f000 f8a7 	bl	80012f0 <TXCAN1>
}
 80011a2:	e015      	b.n	80011d0 <Module_Status_Sequnce+0x60>
	} else if(stat.timer_20ms == TIM_SEQUENCE_3) {
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <Module_Status_Sequnce+0x64>)
 80011a6:	7adb      	ldrb	r3, [r3, #11]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d10b      	bne.n	80011c4 <Module_Status_Sequnce+0x54>
		if(stat.debug_flag) TXCAN1(0x700, FDCAN_DLC_BYTES_8, stat.raw_data_0x700);
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <Module_Status_Sequnce+0x64>)
 80011ae:	7a5b      	ldrb	r3, [r3, #9]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00d      	beq.n	80011d0 <Module_Status_Sequnce+0x60>
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <Module_Status_Sequnce+0x64>)
 80011b6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80011ba:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80011be:	f000 f897 	bl	80012f0 <TXCAN1>
}
 80011c2:	e005      	b.n	80011d0 <Module_Status_Sequnce+0x60>
	} else if(stat.timer_20ms == TIM_SEQUENCE_4) {
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <Module_Status_Sequnce+0x64>)
 80011c6:	7adb      	ldrb	r3, [r3, #11]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d101      	bne.n	80011d0 <Module_Status_Sequnce+0x60>
		Status_Alive_Count();
 80011cc:	f000 f808 	bl	80011e0 <Status_Alive_Count>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20002e90 	.word	0x20002e90
 80011d8:	20002ef3 	.word	0x20002ef3
 80011dc:	200029ab 	.word	0x200029ab

080011e0 <Status_Alive_Count>:

void Status_Alive_Count()
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	if(stat.alive_cnt < 255) {
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <Status_Alive_Count+0x3c>)
 80011e6:	7a1b      	ldrb	r3, [r3, #8]
 80011e8:	2bff      	cmp	r3, #255	; 0xff
 80011ea:	d006      	beq.n	80011fa <Status_Alive_Count+0x1a>
		stat.alive_cnt ++;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <Status_Alive_Count+0x3c>)
 80011ee:	7a1b      	ldrb	r3, [r3, #8]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <Status_Alive_Count+0x3c>)
 80011f6:	721a      	strb	r2, [r3, #8]
 80011f8:	e002      	b.n	8001200 <Status_Alive_Count+0x20>

	} else {
		stat.alive_cnt = 0;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <Status_Alive_Count+0x3c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	721a      	strb	r2, [r3, #8]

	}

	acc.TRZ_ACC_AliveCnt = stat.alive_cnt;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <Status_Alive_Count+0x3c>)
 8001202:	7a1a      	ldrb	r2, [r3, #8]
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <Status_Alive_Count+0x40>)
 8001206:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	brk.TRZ_BRKMOT_AliveCnt = stat.alive_cnt;
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <Status_Alive_Count+0x3c>)
 800120c:	7a1a      	ldrb	r2, [r3, #8]
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <Status_Alive_Count+0x44>)
 8001210:	75da      	strb	r2, [r3, #23]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	20002e90 	.word	0x20002e90
 8001220:	20002990 	.word	0x20002990
 8001224:	20002eec 	.word	0x20002eec

08001228 <Debug_Data_Parsing>:

void Debug_Data_Parsing()
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	memcpy(stat.raw_data_0x700, motor_info.pos_vel_curr_tor, 8);
 800122c:	4a05      	ldr	r2, [pc, #20]	; (8001244 <Debug_Data_Parsing+0x1c>)
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <Debug_Data_Parsing+0x20>)
 8001230:	3314      	adds	r3, #20
 8001232:	cb03      	ldmia	r3!, {r0, r1}
 8001234:	6010      	str	r0, [r2, #0]
 8001236:	6051      	str	r1, [r2, #4]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20002e90 	.word	0x20002e90
 8001248:	20002ea0 	.word	0x20002ea0

0800124c <HAL_FDCAN_RxFifo0Callback>:
#include "can.h"
/******************************************************************************/
/*                               CAN_Callback                                 */
/******************************************************************************/
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	/*************************************/
	/* CAN1 Rx Interrupt     [ AD-CAN ]  */
	/*************************************/
	if(hfdcan->Instance == FDCAN1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a10      	ldr	r2, [pc, #64]	; (800129c <HAL_FDCAN_RxFifo0Callback+0x50>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d109      	bne.n	8001274 <HAL_FDCAN_RxFifo0Callback+0x28>
	{
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &Can_Rx_Header_CAN1, rxdata1);
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_FDCAN_RxFifo0Callback+0x54>)
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8001264:	2140      	movs	r1, #64	; 0x40
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f003 fa3a 	bl	80046e0 <HAL_FDCAN_GetRxMessage>
		RXCAN1(&Can_Rx_Header_CAN1, rxdata1);
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8001270:	f000 f882 	bl	8001378 <RXCAN1>
	}

	/*************************************/
	/* CAN2 Rx Interrupt  [ Module-CAN ] */
	/*************************************/
	if(hfdcan->Instance == FDCAN2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d109      	bne.n	8001292 <HAL_FDCAN_RxFifo0Callback+0x46>
	{
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &Can_Rx_Header_CAN2, rxdata2);
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_FDCAN_RxFifo0Callback+0x60>)
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f003 fa2b 	bl	80046e0 <HAL_FDCAN_GetRxMessage>
		RXCAN2(&Can_Rx_Header_CAN2, rxdata2);
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <HAL_FDCAN_RxFifo0Callback+0x60>)
 800128c:	4808      	ldr	r0, [pc, #32]	; (80012b0 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800128e:	f000 f8a9 	bl	80013e4 <RXCAN2>

	}
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40006400 	.word	0x40006400
 80012a0:	20002a90 	.word	0x20002a90
 80012a4:	20002e10 	.word	0x20002e10
 80012a8:	40006800 	.word	0x40006800
 80012ac:	20002e3c 	.word	0x20002e3c
 80012b0:	20002e44 	.word	0x20002e44

080012b4 <HAL_FDCAN_RxFifo1Callback>:

void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]

	/*************************************/
	/* CAN3 Rx Interrupt [ Chassis-CAN ] */
	/*************************************/
	if(hfdcan->Instance == FDCAN3)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_FDCAN_RxFifo1Callback+0x30>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d109      	bne.n	80012dc <HAL_FDCAN_RxFifo1Callback+0x28>
	{
		HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &Can_Rx_Header_CAN3, rxdata3);
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_FDCAN_RxFifo1Callback+0x34>)
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_FDCAN_RxFifo1Callback+0x38>)
 80012cc:	2141      	movs	r1, #65	; 0x41
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f003 fa06 	bl	80046e0 <HAL_FDCAN_GetRxMessage>
		RXCAN3(&Can_Rx_Header_CAN3, rxdata3);
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <HAL_FDCAN_RxFifo1Callback+0x34>)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_FDCAN_RxFifo1Callback+0x38>)
 80012d8:	f000 f8e8 	bl	80014ac <RXCAN3>

	}
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40006c00 	.word	0x40006c00
 80012e8:	20002ee4 	.word	0x20002ee4
 80012ec:	20002ac8 	.word	0x20002ac8

080012f0 <TXCAN1>:

/******************************************************************************/
/*                             CAN_Tx_Function                                */
/******************************************************************************/
void TXCAN1(uint32_t ID, uint32_t size, uint8_t *send)
{	/* Function Description : Tx CAN Data (CAN1) */
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
	Can_Tx_Header.Identifier = ID;
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <TXCAN1+0x3c>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6013      	str	r3, [r2, #0]
	Can_Tx_Header.IdType = FDCAN_STANDARD_ID;
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <TXCAN1+0x3c>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
	Can_Tx_Header.TxFrameType = FDCAN_DATA_FRAME;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <TXCAN1+0x3c>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
	Can_Tx_Header.FDFormat =FDCAN_CLASSIC_CAN;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <TXCAN1+0x3c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
	Can_Tx_Header.DataLength = size;
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <TXCAN1+0x3c>)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	60d3      	str	r3, [r2, #12]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Can_Tx_Header, send);
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <TXCAN1+0x3c>)
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <TXCAN1+0x40>)
 8001320:	f003 f999 	bl	8004656 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20002dec 	.word	0x20002dec
 8001330:	20002d54 	.word	0x20002d54

08001334 <TXCAN2>:
void TXCAN2(uint32_t ID, uint32_t size, uint8_t *send)
{	/* Function Description : Tx CAN Data (CAN2) */
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	Can_Tx_Header.Identifier = ID;
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <TXCAN2+0x3c>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6013      	str	r3, [r2, #0]
	Can_Tx_Header.IdType = FDCAN_STANDARD_ID;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <TXCAN2+0x3c>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
	Can_Tx_Header.TxFrameType = FDCAN_DATA_FRAME;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <TXCAN2+0x3c>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
	Can_Tx_Header.FDFormat =FDCAN_CLASSIC_CAN;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <TXCAN2+0x3c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
	Can_Tx_Header.DataLength = size;
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <TXCAN2+0x3c>)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	60d3      	str	r3, [r2, #12]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Can_Tx_Header, send);
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4903      	ldr	r1, [pc, #12]	; (8001370 <TXCAN2+0x3c>)
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <TXCAN2+0x40>)
 8001364:	f003 f977 	bl	8004656 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20002dec 	.word	0x20002dec
 8001374:	20002f24 	.word	0x20002f24

08001378 <RXCAN1>:

/******************************************************************************/
/*                             CAN_Rx_Function                                */
/******************************************************************************/
void RXCAN1(FDCAN_RxHeaderTypeDef *head, uint8_t *receive)
{	/* Function Description : Rx CAN Data (CAN1) */
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	switch (head->Identifier)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f240 7277 	movw	r2, #1911	; 0x777
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <RXCAN1+0x4a>
 800138e:	f5b3 6fef 	cmp.w	r3, #1912	; 0x778
 8001392:	d21a      	bcs.n	80013ca <RXCAN1+0x52>
 8001394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001398:	d003      	beq.n	80013a2 <RXCAN1+0x2a>
 800139a:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800139e:	d009      	beq.n	80013b4 <RXCAN1+0x3c>

#endif
	}


}
 80013a0:	e013      	b.n	80013ca <RXCAN1+0x52>
		memcpy(brk.raw_data_0x300, receive, 7);
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <RXCAN1+0x60>)
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	6810      	ldr	r0, [r2, #0]
 80013a8:	6018      	str	r0, [r3, #0]
 80013aa:	8891      	ldrh	r1, [r2, #4]
 80013ac:	7992      	ldrb	r2, [r2, #6]
 80013ae:	8099      	strh	r1, [r3, #4]
 80013b0:	719a      	strb	r2, [r3, #6]
		break;
 80013b2:	e00a      	b.n	80013ca <RXCAN1+0x52>
		memcpy(acc.raw_data_0x310, receive, 5);
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <RXCAN1+0x64>)
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	6810      	ldr	r0, [r2, #0]
 80013ba:	6018      	str	r0, [r3, #0]
 80013bc:	7912      	ldrb	r2, [r2, #4]
 80013be:	711a      	strb	r2, [r3, #4]
		break;
 80013c0:	e003      	b.n	80013ca <RXCAN1+0x52>
		stat.debug_flag = TRUE;
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <RXCAN1+0x68>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	725a      	strb	r2, [r3, #9]
		break;
 80013c8:	bf00      	nop
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20002eec 	.word	0x20002eec
 80013dc:	20002990 	.word	0x20002990
 80013e0:	20002e90 	.word	0x20002e90

080013e4 <RXCAN2>:
void RXCAN2(FDCAN_RxHeaderTypeDef *head, uint8_t *receive)
{	/* Function Description : Rx CAN Data (CAN2) */
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	switch (head->Identifier)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f240 7203 	movw	r2, #1795	; 0x703
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d047      	beq.n	800148a <RXCAN2+0xa6>
 80013fa:	f240 7203 	movw	r2, #1795	; 0x703
 80013fe:	4293      	cmp	r3, r2
 8001400:	d848      	bhi.n	8001494 <RXCAN2+0xb0>
 8001402:	f240 4252 	movw	r2, #1106	; 0x452
 8001406:	4293      	cmp	r3, r2
 8001408:	d037      	beq.n	800147a <RXCAN2+0x96>
 800140a:	f240 4252 	movw	r2, #1106	; 0x452
 800140e:	4293      	cmp	r3, r2
 8001410:	d840      	bhi.n	8001494 <RXCAN2+0xb0>
 8001412:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8001416:	d028      	beq.n	800146a <RXCAN2+0x86>
 8001418:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800141c:	d83a      	bhi.n	8001494 <RXCAN2+0xb0>
 800141e:	f240 3283 	movw	r2, #899	; 0x383
 8001422:	4293      	cmp	r3, r2
 8001424:	d01b      	beq.n	800145e <RXCAN2+0x7a>
 8001426:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800142a:	d233      	bcs.n	8001494 <RXCAN2+0xb0>
 800142c:	f240 1283 	movw	r2, #387	; 0x183
 8001430:	4293      	cmp	r3, r2
 8001432:	d004      	beq.n	800143e <RXCAN2+0x5a>
 8001434:	f240 2283 	movw	r2, #643	; 0x283
 8001438:	4293      	cmp	r3, r2
 800143a:	d00a      	beq.n	8001452 <RXCAN2+0x6e>
		/* 06 Motor */
	case 0x700 + MOTOR_NODE_ID:
	motor_info.ready = TRUE;
	break;
	}
}
 800143c:	e02a      	b.n	8001494 <RXCAN2+0xb0>
	memcpy(motor_info.pos_vel_raw, receive, 8);
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <RXCAN2+0xbc>)
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	331c      	adds	r3, #28
 8001444:	6810      	ldr	r0, [r2, #0]
 8001446:	6851      	ldr	r1, [r2, #4]
 8001448:	c303      	stmia	r3!, {r0, r1}
	motor_pw_check.no_can_cnt = 0;
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <RXCAN2+0xc0>)
 800144c:	2200      	movs	r2, #0
 800144e:	705a      	strb	r2, [r3, #1]
	break;
 8001450:	e020      	b.n	8001494 <RXCAN2+0xb0>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
	memcpy(motor_info.tor_curr_raw, receive, 4);
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <RXCAN2+0xbc>)
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
	break;
 800145c:	e01a      	b.n	8001494 <RXCAN2+0xb0>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
	memcpy(motor_info.status_raw, receive, 4);
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <RXCAN2+0xbc>)
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
	break;
 8001468:	e014      	b.n	8001494 <RXCAN2+0xb0>
		memcpy(acc.raw_data_0x450, receive, 8);
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <RXCAN2+0xc4>)
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	3305      	adds	r3, #5
 8001470:	6811      	ldr	r1, [r2, #0]
 8001472:	6852      	ldr	r2, [r2, #4]
 8001474:	6019      	str	r1, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
		break;
 8001478:	e00c      	b.n	8001494 <RXCAN2+0xb0>
		memcpy(acc.raw_data_0x452, receive, 8);
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <RXCAN2+0xc4>)
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	3313      	adds	r3, #19
 8001480:	6811      	ldr	r1, [r2, #0]
 8001482:	6852      	ldr	r2, [r2, #4]
 8001484:	6019      	str	r1, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
		break;
 8001488:	e004      	b.n	8001494 <RXCAN2+0xb0>
	motor_info.ready = TRUE;
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <RXCAN2+0xbc>)
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	break;
 8001492:	bf00      	nop
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	20002ea0 	.word	0x20002ea0
 80014a4:	20002e38 	.word	0x20002e38
 80014a8:	20002990 	.word	0x20002990

080014ac <RXCAN3>:
void RXCAN3(FDCAN_RxHeaderTypeDef *head, uint8_t *receive)
{	/* Function Description : Rx CAN Data (CAN3) */
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	switch (head->Identifier)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f240 3213 	movw	r2, #787	; 0x313
 80014be:	4293      	cmp	r3, r2
 80014c0:	d106      	bne.n	80014d0 <RXCAN3+0x24>
	{
	/* 01 */
	case TEST_ID:
		memcpy(rxdata3, receive, DATA_SIZE_8);
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <RXCAN3+0x30>)
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	6811      	ldr	r1, [r2, #0]
 80014c8:	6852      	ldr	r2, [r2, #4]
 80014ca:	6019      	str	r1, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
		break;
 80014ce:	bf00      	nop
	}
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20002ee4 	.word	0x20002ee4

080014e0 <StartTreezeTask_1>:
/******************************************************************************/
/*                                    RTOS                                    */
/******************************************************************************/

void StartTreezeTask_1(void const * argument)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	/* Brake Control Task */
	/**********************/
	/* Infinite loop */
	for(;;)
	{
		Brake_Control_Task();
 80014e8:	f7ff fc9a 	bl	8000e20 <Brake_Control_Task>
		Module_Status_Task();
 80014ec:	f7ff fe30 	bl	8001150 <Module_Status_Task>
		osDelay(1);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f006 fef9 	bl	80082e8 <osDelay>
		Brake_Control_Task();
 80014f6:	e7f7      	b.n	80014e8 <StartTreezeTask_1+0x8>

080014f8 <StartTreezeTask_2>:
	}
	/* USER CODE END 5 */
}

void StartTreezeTask_2(void const * argument)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	/* Accel Control Task */
	/**********************/
	/* Infinite loop */
	for(;;)
	{
		Accel_Control_Task();
 8001500:	f7ff fb42 	bl	8000b88 <Accel_Control_Task>
		osDelay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f006 feef 	bl	80082e8 <osDelay>
		Accel_Control_Task();
 800150a:	e7f9      	b.n	8001500 <StartTreezeTask_2+0x8>

0800150c <StartTreezeTask_3>:
	}
	/* USER CODE END 5 */
}

void StartTreezeTask_3(void const * argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	/*LeadShine Motor Task*/
	/**********************/
	/* Infinite loop */
	for(;;)
	{
		MotionControlControl(&motor_cmd, &motor_info);
 8001514:	4903      	ldr	r1, [pc, #12]	; (8001524 <StartTreezeTask_3+0x18>)
 8001516:	4804      	ldr	r0, [pc, #16]	; (8001528 <StartTreezeTask_3+0x1c>)
 8001518:	f000 fb0e 	bl	8001b38 <MotionControlControl>
		osDelay(1);
 800151c:	2001      	movs	r0, #1
 800151e:	f006 fee3 	bl	80082e8 <osDelay>
		MotionControlControl(&motor_cmd, &motor_info);
 8001522:	e7f7      	b.n	8001514 <StartTreezeTask_3+0x8>
 8001524:	20002ea0 	.word	0x20002ea0
 8001528:	20002bdc 	.word	0x20002bdc

0800152c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b090      	sub	sp, #64	; 0x40
 8001530:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001532:	f002 f9a8 	bl	8003886 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001536:	f000 f85f 	bl	80015f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800153a:	f000 faa9 	bl	8001a90 <MX_GPIO_Init>
	MX_DMA_Init();
 800153e:	f000 fa75 	bl	8001a2c <MX_DMA_Init>
	MX_FDCAN1_Init();
 8001542:	f000 f8a3 	bl	800168c <MX_FDCAN1_Init>
	MX_FDCAN2_Init();
 8001546:	f000 f917 	bl	8001778 <MX_FDCAN2_Init>
	MX_FDCAN3_Init();
 800154a:	f000 f98b 	bl	8001864 <MX_FDCAN3_Init>
	MX_USART1_UART_Init();
 800154e:	f000 fa0f 	bl	8001970 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	//Motor INIT
	motor_pw_check.no_can_cnt = 0;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <main+0xac>)
 8001554:	2200      	movs	r2, #0
 8001556:	705a      	strb	r2, [r3, #1]
	while(!motor_info.ready);
 8001558:	bf00      	nop
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <main+0xb0>)
 800155c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0fa      	beq.n	800155a <main+0x2e>
	HAL_Delay(1000);
 8001564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001568:	f002 f9c4 	bl	80038f4 <HAL_Delay>
	MotorInit();
 800156c:	f000 fdc2 	bl	80020f4 <MotorInit>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of TreezeTask_1 */
	osThreadDef(TreezeTask_1, StartTreezeTask_1, osPriorityHigh, 0, 512);
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <main+0xb4>)
 8001572:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001576:	461d      	mov	r5, r3
 8001578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157c:	682b      	ldr	r3, [r5, #0]
 800157e:	6023      	str	r3, [r4, #0]
	TreezeTask_1Handle = osThreadCreate(osThread(TreezeTask_1), NULL);
 8001580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f006 fe87 	bl	800829a <osThreadCreate>
 800158c:	4603      	mov	r3, r0
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <main+0xb8>)
 8001590:	6013      	str	r3, [r2, #0]

	/* definition and creation of TreezeTask_2 */
	osThreadDef(TreezeTask_2, StartTreezeTask_2, osPriorityNormal, 0, 512);
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <main+0xbc>)
 8001594:	f107 0418 	add.w	r4, r7, #24
 8001598:	461d      	mov	r5, r3
 800159a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159e:	682b      	ldr	r3, [r5, #0]
 80015a0:	6023      	str	r3, [r4, #0]
	TreezeTask_2Handle = osThreadCreate(osThread(TreezeTask_2), NULL);
 80015a2:	f107 0318 	add.w	r3, r7, #24
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 fe76 	bl	800829a <osThreadCreate>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <main+0xc0>)
 80015b2:	6013      	str	r3, [r2, #0]

	/* definition and creation of TreezeTask_3 */
	osThreadDef(TreezeTask_3, StartTreezeTask_3, osPriorityLow, 0, 512);
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <main+0xc4>)
 80015b6:	1d3c      	adds	r4, r7, #4
 80015b8:	461d      	mov	r5, r3
 80015ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	6023      	str	r3, [r4, #0]
	TreezeTask_3Handle = osThreadCreate(osThread(TreezeTask_3), NULL);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 fe67 	bl	800829a <osThreadCreate>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <main+0xc8>)
 80015d0:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80015d2:	f006 fe5b 	bl	800828c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80015d6:	e7fe      	b.n	80015d6 <main+0xaa>
 80015d8:	20002e38 	.word	0x20002e38
 80015dc:	20002ea0 	.word	0x20002ea0
 80015e0:	080097c8 	.word	0x080097c8
 80015e4:	20002fd8 	.word	0x20002fd8
 80015e8:	080097ec 	.word	0x080097ec
 80015ec:	20002fbc 	.word	0x20002fbc
 80015f0:	08009810 	.word	0x08009810
 80015f4:	20002f88 	.word	0x20002f88

080015f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0318 	add.w	r3, r7, #24
 8001602:	2238      	movs	r2, #56	; 0x38
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f007 ffe0 	bl	80095cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800161a:	2000      	movs	r0, #0
 800161c:	f003 fe22 	bl	8005264 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001628:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162e:	2303      	movs	r3, #3
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001632:	2302      	movs	r3, #2
 8001634:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 34;
 8001636:	2322      	movs	r3, #34	; 0x22
 8001638:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	4618      	mov	r0, r3
 800164c:	f003 feae 	bl	80053ac <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8001656:	f000 fa69 	bl	8001b2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2303      	movs	r3, #3
 8001660:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2104      	movs	r1, #4
 8001672:	4618      	mov	r0, r3
 8001674:	f004 f9b2 	bl	80059dc <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 800167e:	f000 fa55 	bl	8001b2c <Error_Handler>
	}
}
 8001682:	bf00      	nop
 8001684:	3750      	adds	r7, #80	; 0x50
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <MX_FDCAN1_Init>:
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <MX_FDCAN1_Init+0xe0>)
 8001692:	4a37      	ldr	r2, [pc, #220]	; (8001770 <MX_FDCAN1_Init+0xe4>)
 8001694:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <MX_FDCAN1_Init+0xe0>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <MX_FDCAN1_Init+0xe0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = ENABLE;
 80016a8:	4b30      	ldr	r3, [pc, #192]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 80016ae:	4b2f      	ldr	r3, [pc, #188]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 20;
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016bc:	2214      	movs	r2, #20
 80016be:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 14;
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016c8:	220e      	movs	r2, #14
 80016ca:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 2;
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016da:	2201      	movs	r2, #1
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 1;
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.StdFiltersNbr = 1;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.ExtFiltersNbr = 0;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80016fc:	481b      	ldr	r0, [pc, #108]	; (800176c <MX_FDCAN1_Init+0xe0>)
 80016fe:	f002 fd2d 	bl	800415c <HAL_FDCAN_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_FDCAN1_Init+0x80>
	{
		Error_Handler();
 8001708:	f000 fa10 	bl	8001b2c <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */
	//Can_filter
	can1_filter.IdType = FDCAN_STANDARD_ID;
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <MX_FDCAN1_Init+0xe8>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
	can1_filter.FilterIndex = 0;
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_FDCAN1_Init+0xe8>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
	can1_filter.FilterType = FDCAN_FILTER_RANGE;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <MX_FDCAN1_Init+0xe8>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
	can1_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_FDCAN1_Init+0xe8>)
 8001720:	2201      	movs	r2, #1
 8001722:	60da      	str	r2, [r3, #12]
	can1_filter.FilterID1 = 0x001;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_FDCAN1_Init+0xe8>)
 8001726:	2201      	movs	r2, #1
 8001728:	611a      	str	r2, [r3, #16]
	can1_filter.FilterID2 = 0x7FF;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_FDCAN1_Init+0xe8>)
 800172c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001730:	615a      	str	r2, [r3, #20]

	//Can_start
	if( HAL_FDCAN_ConfigFilter(&hfdcan1, &can1_filter) != HAL_OK ) {
 8001732:	4910      	ldr	r1, [pc, #64]	; (8001774 <MX_FDCAN1_Init+0xe8>)
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_FDCAN1_Init+0xe0>)
 8001736:	f002 fe6b 	bl	8004410 <HAL_FDCAN_ConfigFilter>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_FDCAN1_Init+0xb8>
		Error_Handler();
 8001740:	f000 f9f4 	bl	8001b2c <Error_Handler>
	}

	if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_INTERRUPT_LINE0, FDCAN_TX_BUFFER0|FDCAN_TX_BUFFER1|FDCAN_TX_BUFFER2) != HAL_OK )
 8001744:	2207      	movs	r2, #7
 8001746:	2101      	movs	r1, #1
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <MX_FDCAN1_Init+0xe0>)
 800174a:	f003 f8a3 	bl	8004894 <HAL_FDCAN_ActivateNotification>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_FDCAN1_Init+0xcc>
	{
		Error_Handler();
 8001754:	f000 f9ea 	bl	8001b2c <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_FDCAN1_Init+0xe0>)
 800175a:	f002 fee4 	bl	8004526 <HAL_FDCAN_Start>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_FDCAN1_Init+0xdc>
	{
		Error_Handler();
 8001764:	f000 f9e2 	bl	8001b2c <Error_Handler>
	}
	/* USER CODE END FDCAN1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20002d54 	.word	0x20002d54
 8001770:	40006400 	.word	0x40006400
 8001774:	20002fa4 	.word	0x20002fa4

08001778 <MX_FDCAN2_Init>:
 * @brief FDCAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN2_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN2_Init 0 */

	/* USER CODE BEGIN FDCAN2_Init 1 */

	/* USER CODE END FDCAN2_Init 1 */
	hfdcan2.Instance = FDCAN2;
 800177c:	4b36      	ldr	r3, [pc, #216]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 800177e:	4a37      	ldr	r2, [pc, #220]	; (800185c <MX_FDCAN2_Init+0xe4>)
 8001780:	601a      	str	r2, [r3, #0]
	hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001782:	4b35      	ldr	r3, [pc, #212]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
	hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001788:	4b33      	ldr	r3, [pc, #204]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
	hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800178e:	4b32      	ldr	r3, [pc, #200]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
	hfdcan2.Init.AutoRetransmission = ENABLE;
 8001794:	4b30      	ldr	r3, [pc, #192]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 8001796:	2201      	movs	r2, #1
 8001798:	741a      	strb	r2, [r3, #16]
	hfdcan2.Init.TransmitPause = DISABLE;
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 800179c:	2200      	movs	r2, #0
 800179e:	745a      	strb	r2, [r3, #17]
	hfdcan2.Init.ProtocolException = DISABLE;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	749a      	strb	r2, [r3, #18]
	hfdcan2.Init.NominalPrescaler = 20;
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017a8:	2214      	movs	r2, #20
 80017aa:	615a      	str	r2, [r3, #20]
	hfdcan2.Init.NominalSyncJumpWidth = 1;
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	619a      	str	r2, [r3, #24]
	hfdcan2.Init.NominalTimeSeg1 = 14;
 80017b2:	4b29      	ldr	r3, [pc, #164]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017b4:	220e      	movs	r2, #14
 80017b6:	61da      	str	r2, [r3, #28]
	hfdcan2.Init.NominalTimeSeg2 = 2;
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017ba:	2202      	movs	r2, #2
 80017bc:	621a      	str	r2, [r3, #32]
	hfdcan2.Init.DataPrescaler = 1;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan2.Init.DataSyncJumpWidth = 1;
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan2.Init.DataTimeSeg1 = 1;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan2.Init.DataTimeSeg2 = 1;
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan2.Init.StdFiltersNbr = 1;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017d8:	2201      	movs	r2, #1
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan2.Init.ExtFiltersNbr = 0;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80017e8:	481b      	ldr	r0, [pc, #108]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 80017ea:	f002 fcb7 	bl	800415c <HAL_FDCAN_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_FDCAN2_Init+0x80>
	{
		Error_Handler();
 80017f4:	f000 f99a 	bl	8001b2c <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN2_Init 2 */
	//Can_filter
	can2_filter.IdType = FDCAN_STANDARD_ID;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <MX_FDCAN2_Init+0xe8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
	can2_filter.FilterIndex = 0;
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_FDCAN2_Init+0xe8>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
	can2_filter.FilterType = FDCAN_FILTER_RANGE;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_FDCAN2_Init+0xe8>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
	can2_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_FDCAN2_Init+0xe8>)
 800180c:	2201      	movs	r2, #1
 800180e:	60da      	str	r2, [r3, #12]
	can2_filter.FilterID1 = 0x001;
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_FDCAN2_Init+0xe8>)
 8001812:	2201      	movs	r2, #1
 8001814:	611a      	str	r2, [r3, #16]
	can2_filter.FilterID2 = 0x7FF;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_FDCAN2_Init+0xe8>)
 8001818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800181c:	615a      	str	r2, [r3, #20]

	//Can_Start
	if( HAL_FDCAN_ConfigFilter(&hfdcan2, &can2_filter) != HAL_OK ) {
 800181e:	4910      	ldr	r1, [pc, #64]	; (8001860 <MX_FDCAN2_Init+0xe8>)
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 8001822:	f002 fdf5 	bl	8004410 <HAL_FDCAN_ConfigFilter>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_FDCAN2_Init+0xb8>
		Error_Handler();
 800182c:	f000 f97e 	bl	8001b2c <Error_Handler>
	}

	if(HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_INTERRUPT_LINE0, FDCAN_TX_BUFFER0|FDCAN_TX_BUFFER1|FDCAN_TX_BUFFER2) != HAL_OK )
 8001830:	2207      	movs	r2, #7
 8001832:	2101      	movs	r1, #1
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 8001836:	f003 f82d 	bl	8004894 <HAL_FDCAN_ActivateNotification>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_FDCAN2_Init+0xcc>
	{
		Error_Handler();
 8001840:	f000 f974 	bl	8001b2c <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_FDCAN2_Init+0xe0>)
 8001846:	f002 fe6e 	bl	8004526 <HAL_FDCAN_Start>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_FDCAN2_Init+0xdc>
	{
		Error_Handler();
 8001850:	f000 f96c 	bl	8001b2c <Error_Handler>
	}
	/* USER CODE END FDCAN2_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20002f24 	.word	0x20002f24
 800185c:	40006800 	.word	0x40006800
 8001860:	20002fc0 	.word	0x20002fc0

08001864 <MX_FDCAN3_Init>:
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af02      	add	r7, sp, #8
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <MX_FDCAN3_Init+0x100>)
 800186c:	4a3e      	ldr	r2, [pc, #248]	; (8001968 <MX_FDCAN3_Init+0x104>)
 800186e:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001870:	4b3c      	ldr	r3, [pc, #240]	; (8001964 <MX_FDCAN3_Init+0x100>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <MX_FDCAN3_Init+0x100>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <MX_FDCAN3_Init+0x100>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = ENABLE;
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <MX_FDCAN3_Init+0x100>)
 8001884:	2201      	movs	r2, #1
 8001886:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <MX_FDCAN3_Init+0x100>)
 800188a:	2200      	movs	r2, #0
 800188c:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 800188e:	4b35      	ldr	r3, [pc, #212]	; (8001964 <MX_FDCAN3_Init+0x100>)
 8001890:	2200      	movs	r2, #0
 8001892:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 20;
 8001894:	4b33      	ldr	r3, [pc, #204]	; (8001964 <MX_FDCAN3_Init+0x100>)
 8001896:	2214      	movs	r2, #20
 8001898:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <MX_FDCAN3_Init+0x100>)
 800189c:	2201      	movs	r2, #1
 800189e:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 14;
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018a2:	220e      	movs	r2, #14
 80018a4:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 80018a6:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018a8:	2202      	movs	r2, #2
 80018aa:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.StdFiltersNbr = 1;
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.ExtFiltersNbr = 0;
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80018d6:	4823      	ldr	r0, [pc, #140]	; (8001964 <MX_FDCAN3_Init+0x100>)
 80018d8:	f002 fc40 	bl	800415c <HAL_FDCAN_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_FDCAN3_Init+0x82>
	{
		Error_Handler();
 80018e2:	f000 f923 	bl	8001b2c <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */
	//Can_filter
	can3_filter.IdType = FDCAN_STANDARD_ID;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <MX_FDCAN3_Init+0x108>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
	can3_filter.FilterIndex = 0;
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <MX_FDCAN3_Init+0x108>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
	can3_filter.FilterType = FDCAN_FILTER_RANGE;
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <MX_FDCAN3_Init+0x108>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
	can3_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 80018f8:	4b1c      	ldr	r3, [pc, #112]	; (800196c <MX_FDCAN3_Init+0x108>)
 80018fa:	2202      	movs	r2, #2
 80018fc:	60da      	str	r2, [r3, #12]
	can3_filter.FilterID1 = 0x001;
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_FDCAN3_Init+0x108>)
 8001900:	2201      	movs	r2, #1
 8001902:	611a      	str	r2, [r3, #16]
	can3_filter.FilterID2 = 0x7FF;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_FDCAN3_Init+0x108>)
 8001906:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800190a:	615a      	str	r2, [r3, #20]

	//Can_Start
	if( HAL_FDCAN_ConfigFilter(&hfdcan3, &can3_filter) != HAL_OK ) {
 800190c:	4917      	ldr	r1, [pc, #92]	; (800196c <MX_FDCAN3_Init+0x108>)
 800190e:	4815      	ldr	r0, [pc, #84]	; (8001964 <MX_FDCAN3_Init+0x100>)
 8001910:	f002 fd7e 	bl	8004410 <HAL_FDCAN_ConfigFilter>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_FDCAN3_Init+0xba>
		Error_Handler();
 800191a:	f000 f907 	bl	8001b2c <Error_Handler>
	}

	if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	2202      	movs	r2, #2
 8001926:	2102      	movs	r1, #2
 8001928:	480e      	ldr	r0, [pc, #56]	; (8001964 <MX_FDCAN3_Init+0x100>)
 800192a:	f002 fdcb 	bl	80044c4 <HAL_FDCAN_ConfigGlobalFilter>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_FDCAN3_Init+0xd4>
	{
		Error_Handler();
 8001934:	f000 f8fa 	bl	8001b2c <Error_Handler>
	}

	if(HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO1_NEW_MESSAGE|FDCAN_IT_RX_FIFO1_FULL|FDCAN_IT_RX_FIFO1_MESSAGE_LOST, 0) != HAL_OK)
 8001938:	2200      	movs	r2, #0
 800193a:	2138      	movs	r1, #56	; 0x38
 800193c:	4809      	ldr	r0, [pc, #36]	; (8001964 <MX_FDCAN3_Init+0x100>)
 800193e:	f002 ffa9 	bl	8004894 <HAL_FDCAN_ActivateNotification>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_FDCAN3_Init+0xe8>
	{
		Error_Handler();
 8001948:	f000 f8f0 	bl	8001b2c <Error_Handler>
	}

	if(HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_FDCAN3_Init+0x100>)
 800194e:	f002 fdea 	bl	8004526 <HAL_FDCAN_Start>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_FDCAN3_Init+0xf8>
	{
		Error_Handler();
 8001958:	f000 f8e8 	bl	8001b2c <Error_Handler>
	}
	/* USER CODE END FDCAN3_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20002a2c 	.word	0x20002a2c
 8001968:	40006c00 	.word	0x40006c00
 800196c:	20002f8c 	.word	0x20002f8c

08001970 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 8001976:	4a2a      	ldr	r2, [pc, #168]	; (8001a20 <MX_USART1_UART_Init+0xb0>)
 8001978:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 800197c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001980:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 8001996:	220c      	movs	r2, #12
 8001998:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b8:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 80019ba:	f005 f81b 	bl	80069f4 <HAL_UART_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 80019c4:	f000 f8b2 	bl	8001b2c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c8:	2100      	movs	r1, #0
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 80019cc:	f006 fb20 	bl	8008010 <HAL_UARTEx_SetTxFifoThreshold>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 80019d6:	f000 f8a9 	bl	8001b2c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019da:	2100      	movs	r1, #0
 80019dc:	480f      	ldr	r0, [pc, #60]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 80019de:	f006 fb55 	bl	800808c <HAL_UARTEx_SetRxFifoThreshold>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 80019e8:	f000 f8a0 	bl	8001b2c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 80019ee:	f006 fad6 	bl	8007f9e <HAL_UARTEx_DisableFifoMode>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 80019f8:	f000 f898 	bl	8001b2c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart.rx_buffer, 8);
 80019fc:	2208      	movs	r2, #8
 80019fe:	4909      	ldr	r1, [pc, #36]	; (8001a24 <MX_USART1_UART_Init+0xb4>)
 8001a00:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_USART1_UART_Init+0xac>)
 8001a02:	f006 fb81 	bl	8008108 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_USART1_UART_Init+0xb8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_USART1_UART_Init+0xb8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0204 	bic.w	r2, r2, #4
 8001a14:	601a      	str	r2, [r3, #0]
	//Start DMA
	/* USER CODE END USART1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20002c70 	.word	0x20002c70
 8001a20:	40013800 	.word	0x40013800
 8001a24:	20002f10 	.word	0x20002f10
 8001a28:	20002b7c 	.word	0x20002b7c

08001a2c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_DMA_Init+0x60>)
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_DMA_Init+0x60>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a3e:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <MX_DMA_Init+0x60>)
 8001a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_DMA_Init+0x60>)
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <MX_DMA_Init+0x60>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6493      	str	r3, [r2, #72]	; 0x48
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <MX_DMA_Init+0x60>)
 8001a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	200b      	movs	r0, #11
 8001a68:	f002 f81e 	bl	8003aa8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a6c:	200b      	movs	r0, #11
 8001a6e:	f002 f835 	bl	8003adc <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2105      	movs	r1, #5
 8001a76:	200c      	movs	r0, #12
 8001a78:	f002 f816 	bl	8003aa8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a7c:	200c      	movs	r0, #12
 8001a7e:	f002 f82d 	bl	8003adc <HAL_NVIC_EnableIRQ>

}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001a9c:	f043 0320 	orr.w	r3, r3, #32
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_GPIO_Init+0x74>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000

08001b08 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001b1a:	f001 fecd 	bl	80038b8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40012c00 	.word	0x40012c00

08001b2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b30:	b672      	cpsid	i
}
 8001b32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b34:	e7fe      	b.n	8001b34 <Error_Handler+0x8>
	...

08001b38 <MotionControlControl>:
uint8_t tx_com_status[8]=			{CANOPEN_DATA_SIZE_4, 0x02, 0x18, 0x01, 0x80+MOTOR_NODE_ID, 0x03, 0x00, 0x00};
uint8_t tx_tim_status[5] =			{CANOPEN_DATA_SIZE_1, 0x02, 0x18, 0x02, 0xFF};
uint8_t tx_tim_pd_status[6] =		{CANOPEN_DATA_SIZE_2, 0x02, 0x18, 0x05, 0x0A, 0x00};

void MotionControlControl(struct ControlCommand *cmd, struct StatusInformation *info)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	if( cmd->timer == 2) {
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d108      	bne.n	8001b5e <MotionControlControl+0x26>

		CanErrorCheck(&hfdcan1, &CAN_ERROR_cnt);
 8001b4c:	49a7      	ldr	r1, [pc, #668]	; (8001dec <MotionControlControl+0x2b4>)
 8001b4e:	48a8      	ldr	r0, [pc, #672]	; (8001df0 <MotionControlControl+0x2b8>)
 8001b50:	f001 fafc 	bl	800314c <CanErrorCheck>
		CanErrorCheck(&hfdcan2, &CAN_ERROR_cnt);
 8001b54:	49a5      	ldr	r1, [pc, #660]	; (8001dec <MotionControlControl+0x2b4>)
 8001b56:	48a7      	ldr	r0, [pc, #668]	; (8001df4 <MotionControlControl+0x2bc>)
 8001b58:	f001 faf8 	bl	800314c <CanErrorCheck>
 8001b5c:	e13b      	b.n	8001dd6 <MotionControlControl+0x29e>


	} else if( cmd->timer == 3 ) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d15b      	bne.n	8001c20 <MotionControlControl+0xe8>

		//Motor Driver Type 1
#if 1
		if(cmd->encoder_init_flag) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d049      	beq.n	8001c06 <MotionControlControl+0xce>
			if (cmd->init_index == MOTOR_INIT_PREPARE) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <MotionControlControl+0x52>
				MotorEncoderInitPrepare();
 8001b7c:	f000 fe50 	bl	8002820 <MotorEncoderInitPrepare>
				cmd->init_index = MOTOR_INIT_COMMAND;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001b88:	e03d      	b.n	8001c06 <MotionControlControl+0xce>
			} else if (cmd->init_index == MOTOR_INIT_COMMAND) {
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d106      	bne.n	8001ba2 <MotionControlControl+0x6a>
				MotorEncoderInitCommand();
 8001b94:	f000 fe52 	bl	800283c <MotorEncoderInitCommand>
				cmd->init_index = MOTOR_INIT_START;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001ba0:	e031      	b.n	8001c06 <MotionControlControl+0xce>
			} else if (cmd->init_index == MOTOR_INIT_START) {
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d106      	bne.n	8001bba <MotionControlControl+0x82>
				MotorEncoderInitBegin();
 8001bac:	f000 fe54 	bl	8002858 <MotorEncoderInitBegin>
				cmd->init_index = MOTOR_INIT_MOTOR_OFF;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2209      	movs	r2, #9
 8001bb4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001bb8:	e025      	b.n	8001c06 <MotionControlControl+0xce>
			} else if (cmd->init_index == MOTOR_INIT_MOTOR_OFF) {
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	d106      	bne.n	8001bd2 <MotionControlControl+0x9a>
				MotorEncoderInitMOTOROFF();
 8001bc4:	f000 fe56 	bl	8002874 <MotorEncoderInitMOTOROFF>
				cmd->init_index = MOTOR_INIT_SAVE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	220a      	movs	r2, #10
 8001bcc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001bd0:	e019      	b.n	8001c06 <MotionControlControl+0xce>
			}else if (cmd->init_index == MOTOR_INIT_SAVE) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001bd8:	2b0a      	cmp	r3, #10
 8001bda:	d114      	bne.n	8001c06 <MotionControlControl+0xce>
				cmd->save_flag = 1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
				MotorSetCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, encoder_data_save, &cmd->save_flag);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	337a      	adds	r3, #122	; 0x7a
 8001be8:	4a83      	ldr	r2, [pc, #524]	; (8001df8 <MotionControlControl+0x2c0>)
 8001bea:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001bee:	f240 6003 	movw	r0, #1539	; 0x603
 8001bf2:	f001 fa4f 	bl	8003094 <MotorSetCommand>
				cmd->init_index = MOTOR_INIT_PREPARE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				cmd->encoder_init_flag = FALSE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			}

		}
#endif

if(cmd->alarm_reset_flag){
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80e2 	beq.w	8001dd6 <MotionControlControl+0x29e>

	MotorAlarmReset();
 8001c12:	f000 fe3d 	bl	8002890 <MotorAlarmReset>
	cmd->alarm_reset_flag = FALSE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001c1e:	e0da      	b.n	8001dd6 <MotionControlControl+0x29e>
}

	} else if( cmd->timer == 6) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d10a      	bne.n	8001c40 <MotionControlControl+0x108>
		MotorCommandFlagUpdate(cmd, info);
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f8ed 	bl	8001e0c <MotorCommandFlagUpdate>
		TorqueCommandConverter(cmd);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 ff22 	bl	8002a7c <TorqueCommandConverter>

		MotorServeOnOff(cmd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fe37 	bl	80028ac <MotorServeOnOff>
 8001c3e:	e0ca      	b.n	8001dd6 <MotionControlControl+0x29e>

	} else if((cmd->timer == 7) || (cmd->timer == 8) || (cmd->timer == 9) ) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001c46:	2b07      	cmp	r3, #7
 8001c48:	d00a      	beq.n	8001c60 <MotionControlControl+0x128>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d005      	beq.n	8001c60 <MotionControlControl+0x128>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001c5a:	2b09      	cmp	r3, #9
 8001c5c:	f040 80a0 	bne.w	8001da0 <MotionControlControl+0x268>
		/*
		 * position mode
		 */
		if( cmd->user_flag && cmd->auto_mode_flag && (cmd->cotrol_mode == 1)) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d047      	beq.n	8001cfa <MotionControlControl+0x1c2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d042      	beq.n	8001cfa <MotionControlControl+0x1c2>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d13d      	bne.n	8001cfa <MotionControlControl+0x1c2>
			if(cmd->cmd_index == MOTOR_PREPARE) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <MotionControlControl+0x15e>
				MotorPrepare();
 8001c88:	f000 ff5c 	bl	8002b44 <MotorPrepare>
				cmd->cmd_index = MOTOR_NEW_POS_SET;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001c94:	e031      	b.n	8001cfa <MotionControlControl+0x1c2>

			} else if ( cmd->cmd_index == MOTOR_NEW_POS_SET ) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d11d      	bne.n	8001cdc <MotionControlControl+0x1a4>
				MotorCommandConverter(cmd);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 ff89 	bl	8002bb8 <MotorCommandConverter>
				MotorControlCommand(POS_VEL_CONTROL_ID, FDCAN_DLC_BYTES_8, cmd->pos_vel, &cmd->pos_vel_flag);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3378      	adds	r3, #120	; 0x78
 8001cb0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001cb4:	f240 2003 	movw	r0, #515	; 0x203
 8001cb8:	f001 fa1a 	bl	80030f0 <MotorControlCommand>
				MotorSetCommand(ACC_DEC_CONTROL_ID, FDCAN_DLC_BYTES_8, cmd->acc_dec, &cmd->acc_dec_flag);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3379      	adds	r3, #121	; 0x79
 8001cc6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001cca:	f240 3003 	movw	r0, #771	; 0x303
 8001cce:	f001 f9e1 	bl	8003094 <MotorSetCommand>
				cmd->cmd_index = MOTOR_START;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001cda:	e00e      	b.n	8001cfa <MotionControlControl+0x1c2>

			} else if ( cmd->cmd_index == MOTOR_START ) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d109      	bne.n	8001cfa <MotionControlControl+0x1c2>
				MotorStart();
 8001ce6:	f000 ff49 	bl	8002b7c <MotorStart>
				cmd->cmd_index = MOTOR_PREPARE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				cmd->user_flag = FALSE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			}
		}
		/*
		 * Torque mode
		 */
		if( cmd->user_flag && cmd->auto_mode_flag && (cmd->cotrol_mode == 4)) {
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d067      	beq.n	8001dd4 <MotionControlControl+0x29c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d062      	beq.n	8001dd4 <MotionControlControl+0x29c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d15d      	bne.n	8001dd4 <MotionControlControl+0x29c>
			if(cmd->cmd_index == MOTOR_PREPARE) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <MotionControlControl+0x20a>
				T_MotorPrepare();
 8001d22:	f000 ff1d 	bl	8002b60 <T_MotorPrepare>
				MotorSetCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, Torquevalue, &cmd->torquevalue_flag);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	338b      	adds	r3, #139	; 0x8b
 8001d2a:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <MotionControlControl+0x2c4>)
 8001d2c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001d30:	f240 6003 	movw	r0, #1539	; 0x603
 8001d34:	f001 f9ae 	bl	8003094 <MotorSetCommand>
				cmd->cmd_index = MOTOR_NEW_POS_SET;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if( cmd->user_flag && cmd->auto_mode_flag && (cmd->cotrol_mode == 4)) {
 8001d40:	e048      	b.n	8001dd4 <MotionControlControl+0x29c>

			} else if ( cmd->cmd_index == MOTOR_NEW_POS_SET ) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d110      	bne.n	8001d6e <MotionControlControl+0x236>
				MotorCommandConverter(cmd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 ff33 	bl	8002bb8 <MotorCommandConverter>
				MotorSetCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, TorquespeedLimit, &cmd->torquespeedlimit_flag);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	338c      	adds	r3, #140	; 0x8c
 8001d56:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <MotionControlControl+0x2c8>)
 8001d58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001d5c:	f240 6003 	movw	r0, #1539	; 0x603
 8001d60:	f001 f998 	bl	8003094 <MotorSetCommand>
				cmd->cmd_index = MOTOR_START;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if( cmd->user_flag && cmd->auto_mode_flag && (cmd->cotrol_mode == 4)) {
 8001d6c:	e032      	b.n	8001dd4 <MotionControlControl+0x29c>

			} else if ( cmd->cmd_index == MOTOR_START ) {
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d12d      	bne.n	8001dd4 <MotionControlControl+0x29c>
				MotorSetCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, Torquerate, &cmd->torquerate_flag);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	338d      	adds	r3, #141	; 0x8d
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <MotionControlControl+0x2cc>)
 8001d7e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001d82:	f240 6003 	movw	r0, #1539	; 0x603
 8001d86:	f001 f985 	bl	8003094 <MotorSetCommand>
				T_MotorStart();
 8001d8a:	f000 ff05 	bl	8002b98 <T_MotorStart>
				cmd->cmd_index = MOTOR_PREPARE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				cmd->user_flag = FALSE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		if( cmd->user_flag && cmd->auto_mode_flag && (cmd->cotrol_mode == 4)) {
 8001d9e:	e019      	b.n	8001dd4 <MotionControlControl+0x29c>
			}
		}
	} else if( cmd->timer == 0) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <MotionControlControl+0x27a>
		MotorInfoConverter(info);
 8001daa:	6838      	ldr	r0, [r7, #0]
 8001dac:	f001 f872 	bl	8002e94 <MotorInfoConverter>
 8001db0:	e011      	b.n	8001dd6 <MotionControlControl+0x29e>
		if(feq_20ms){
			//TEST_DISABLE
			//MotorInofrmation(0x400, FDCAN_DLC_BYTES_8, info->pos_vel_curr_tor);
		}
	} else if( cmd->timer == 1) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10c      	bne.n	8001dd6 <MotionControlControl+0x29e>
		if(feq_20ms){
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MotionControlControl+0x2d0>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <MotionControlControl+0x294>
			//TEST_DISABLE
			//MotorInofrmation(0x410, FDCAN_DLC_BYTES_6, info->status);
			feq_20ms = 0;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MotionControlControl+0x2d0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e004      	b.n	8001dd6 <MotionControlControl+0x29e>
		}else{
			feq_20ms = 1;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MotionControlControl+0x2d0>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e000      	b.n	8001dd6 <MotionControlControl+0x29e>
		if( cmd->user_flag && cmd->auto_mode_flag && (cmd->cotrol_mode == 4)) {
 8001dd4:	bf00      	nop
		}
	}

	MotorSequnceTimer(&cmd->timer, MOTOR_TIMER_INIT, MOTOR_TIMER_MAX);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3375      	adds	r3, #117	; 0x75
 8001dda:	220a      	movs	r2, #10
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f001 f9e8 	bl	80031b4 <MotorSequnceTimer>

}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20002e9c 	.word	0x20002e9c
 8001df0:	20002d54 	.word	0x20002d54
 8001df4:	20002f24 	.word	0x20002f24
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000054 	.word	0x20000054
 8001e00:	2000005c 	.word	0x2000005c
 8001e04:	20000064 	.word	0x20000064
 8001e08:	20002a98 	.word	0x20002a98

08001e0c <MotorCommandFlagUpdate>:

void MotorCommandFlagUpdate(struct ControlCommand *cmd, struct StatusInformation *info )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	if (cmd->auto_mode_flag) {
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d07c      	beq.n	8001f1a <MotorCommandFlagUpdate+0x10e>

		if(!cmd->encoder_init_flag)cmd->user_flag = TRUE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <MotorCommandFlagUpdate+0x26>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

		if ((cmd->user[0] == cmd->user_prev[0])
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7a1b      	ldrb	r3, [r3, #8]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d129      	bne.n	8001e92 <MotorCommandFlagUpdate+0x86>
				&& (cmd->user[1] == cmd->user_prev[1])
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	785a      	ldrb	r2, [r3, #1]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7a5b      	ldrb	r3, [r3, #9]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d123      	bne.n	8001e92 <MotorCommandFlagUpdate+0x86>
				&& (cmd->user[2] == cmd->user_prev[2])
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	789a      	ldrb	r2, [r3, #2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7a9b      	ldrb	r3, [r3, #10]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11d      	bne.n	8001e92 <MotorCommandFlagUpdate+0x86>
				&& (cmd->user[3] == cmd->user_prev[3])
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	78da      	ldrb	r2, [r3, #3]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7adb      	ldrb	r3, [r3, #11]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d117      	bne.n	8001e92 <MotorCommandFlagUpdate+0x86>
				&& (cmd->user[4] == cmd->user_prev[4])
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	791a      	ldrb	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7b1b      	ldrb	r3, [r3, #12]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d111      	bne.n	8001e92 <MotorCommandFlagUpdate+0x86>
				&& (cmd->user[5] == cmd->user_prev[5])
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	795a      	ldrb	r2, [r3, #5]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7b5b      	ldrb	r3, [r3, #13]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d10b      	bne.n	8001e92 <MotorCommandFlagUpdate+0x86>
				&& (cmd->user[6] == cmd->user_prev[6])
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	799a      	ldrb	r2, [r3, #6]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7b9b      	ldrb	r3, [r3, #14]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d105      	bne.n	8001e92 <MotorCommandFlagUpdate+0x86>
				&& (cmd->user[7] == cmd->user_prev[7])) {
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	79da      	ldrb	r2, [r3, #7]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7bdb      	ldrb	r3, [r3, #15]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d03b      	beq.n	8001f0a <MotorCommandFlagUpdate+0xfe>
		} else {

			cmd->user_flag = TRUE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

			if ((cmd->user[0] == cmd->user_prev[0])
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7a1b      	ldrb	r3, [r3, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d111      	bne.n	8001eca <MotorCommandFlagUpdate+0xbe>
					&& (cmd->user[1] == cmd->user_prev[1])
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	785a      	ldrb	r2, [r3, #1]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7a5b      	ldrb	r3, [r3, #9]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d10b      	bne.n	8001eca <MotorCommandFlagUpdate+0xbe>
					&& (cmd->user[2] == cmd->user_prev[2])
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	789a      	ldrb	r2, [r3, #2]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7a9b      	ldrb	r3, [r3, #10]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d105      	bne.n	8001eca <MotorCommandFlagUpdate+0xbe>
					&& (cmd->user[3] == cmd->user_prev[3])) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	78da      	ldrb	r2, [r3, #3]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7adb      	ldrb	r3, [r3, #11]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d003      	beq.n	8001ed2 <MotorCommandFlagUpdate+0xc6>
			} else {
				cmd->pos_vel_flag = TRUE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			}
			if ((cmd->user[4] == cmd->user_prev[4])
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	791a      	ldrb	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7b1b      	ldrb	r3, [r3, #12]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d111      	bne.n	8001f02 <MotorCommandFlagUpdate+0xf6>
					&& (cmd->user[5] == cmd->user_prev[5])
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	795a      	ldrb	r2, [r3, #5]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7b5b      	ldrb	r3, [r3, #13]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d10b      	bne.n	8001f02 <MotorCommandFlagUpdate+0xf6>
					&& (cmd->user[6] == cmd->user_prev[6])
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	799a      	ldrb	r2, [r3, #6]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7b9b      	ldrb	r3, [r3, #14]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d105      	bne.n	8001f02 <MotorCommandFlagUpdate+0xf6>
					&& (cmd->user[7] == cmd->user_prev[7])) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	79da      	ldrb	r2, [r3, #7]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7bdb      	ldrb	r3, [r3, #15]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d003      	beq.n	8001f0a <MotorCommandFlagUpdate+0xfe>
			} else {
				cmd->acc_dec_flag = TRUE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
			}

		}
		memcpy(cmd->user_prev, cmd->user, 8);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3308      	adds	r3, #8
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	2208      	movs	r2, #8
 8001f12:	4618      	mov	r0, r3
 8001f14:	f007 fbde 	bl	80096d4 <memcpy>
 8001f18:	e00d      	b.n	8001f36 <MotorCommandFlagUpdate+0x12a>
	} else {
		memcpy(cmd->user, info->pos_vel_raw, 8);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	331c      	adds	r3, #28
 8001f20:	2208      	movs	r2, #8
 8001f22:	4619      	mov	r1, r3
 8001f24:	f007 fbd6 	bl	80096d4 <memcpy>
		memcpy(cmd->user_prev, cmd->user, 8);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	2208      	movs	r2, #8
 8001f30:	4618      	mov	r0, r3
 8001f32:	f007 fbcf 	bl	80096d4 <memcpy>

	}


	if( ((cmd->status[0] == cmd->status_prev[0]) &&
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d146      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
			(cmd->status[1] == cmd->status_prev[1]) &&
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
	if( ((cmd->status[0] == cmd->status_prev[0]) &&
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d13e      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
			(cmd->status[2] == cmd->status_prev[2]) &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
			(cmd->status[1] == cmd->status_prev[1]) &&
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d136      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
			(cmd->status[3] == cmd->status_prev[3]) &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
			(cmd->status[2] == cmd->status_prev[2]) &&
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d12e      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
			(cmd->status[4] == cmd->status_prev[4]) &&
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
			(cmd->status[3] == cmd->status_prev[3]) &&
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d126      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
			(cmd->status[5] == cmd->status_prev[5]) &&
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
			(cmd->status[4] == cmd->status_prev[4]) &&
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d11e      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
			(cmd->status[6] == cmd->status_prev[6]) &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
			(cmd->status[5] == cmd->status_prev[5]) &&
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d116      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
			(cmd->status[7] == cmd->status_prev[7])) && (!info->clutch_flag) ) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
			(cmd->status[6] == cmd->status_prev[6]) &&
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d10e      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
			(cmd->status[7] == cmd->status_prev[7])) && (!info->clutch_flag) ) {
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d109      	bne.n	8001fd4 <MotorCommandFlagUpdate+0x1c8>
		if(info->clutch) {
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d056      	beq.n	8002078 <MotorCommandFlagUpdate+0x26c>
			info->clutch_flag = TRUE;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if(info->clutch) {
 8001fd2:	e051      	b.n	8002078 <MotorCommandFlagUpdate+0x26c>
		}
	} else {
		if( cmd->status[0] != cmd->status_prev[0] ) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d00b      	beq.n	8001ffc <MotorCommandFlagUpdate+0x1f0>
			/* auto mode command */
			cmd->user_auto_mode = cmd->status[0];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
			info->auto_mode = cmd->user_auto_mode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		}

		if( (cmd->status[1] != cmd->status_prev[1]) ) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002008:	429a      	cmp	r2, r3
 800200a:	d013      	beq.n	8002034 <MotorCommandFlagUpdate+0x228>
			/* servo on off command */
			cmd->servo_on_off = cmd->status[1];
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			cmd->servo_on_off_flag = TRUE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
			info->servo_on_off = cmd->servo_on_off;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			info->clutch = FALSE;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			//cmd->encoder_init_flag = TRUE;
		}

		if( cmd->status[2] != cmd->status_prev[2]) {
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8002040:	429a      	cmp	r2, r3
 8002042:	d008      	beq.n	8002056 <MotorCommandFlagUpdate+0x24a>
			/* alarm reset command */
			if( cmd->status[2] == TRUE ) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800204a:	2b01      	cmp	r3, #1
 800204c:	d103      	bne.n	8002056 <MotorCommandFlagUpdate+0x24a>
				cmd->alarm_reset_flag = TRUE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
			}
		}
		if( cmd->status[3] != cmd->status_prev[3]) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8002062:	429a      	cmp	r2, r3
 8002064:	d008      	beq.n	8002078 <MotorCommandFlagUpdate+0x26c>
			/* encoder init command */
			if( cmd->status[3] == TRUE ) {
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800206c:	2b01      	cmp	r3, #1
 800206e:	d103      	bne.n	8002078 <MotorCommandFlagUpdate+0x26c>
				cmd->encoder_init_flag = TRUE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
			}
		}
	}
	memcpy(cmd->status_prev, cmd->status, 8);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3364      	adds	r3, #100	; 0x64
 8002082:	2208      	movs	r2, #8
 8002084:	4619      	mov	r1, r3
 8002086:	f007 fb25 	bl	80096d4 <memcpy>


	cmd->cotrol_mode = cmd->status[4];
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	if(cmd->cotrol_mode != cmd->cotrol_mode_prev){
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d017      	beq.n	80020d6 <MotorCommandFlagUpdate+0x2ca>
		switch(cmd->cotrol_mode){
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d002      	beq.n	80020b6 <MotorCommandFlagUpdate+0x2aa>
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d008      	beq.n	80020c6 <MotorCommandFlagUpdate+0x2ba>
 80020b4:	e00f      	b.n	80020d6 <MotorCommandFlagUpdate+0x2ca>
		case 1:
			MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_mode_change_position);
 80020b6:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <MotorCommandFlagUpdate+0x2e0>)
 80020b8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80020bc:	f240 4003 	movw	r0, #1027	; 0x403
 80020c0:	f000 ffc6 	bl	8003050 <MotorInitCommand>
			break;
 80020c4:	e007      	b.n	80020d6 <MotorCommandFlagUpdate+0x2ca>

		case 4:
			MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_mode_change_torque);
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <MotorCommandFlagUpdate+0x2e4>)
 80020c8:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80020cc:	f240 4003 	movw	r0, #1027	; 0x403
 80020d0:	f000 ffbe 	bl	8003050 <MotorInitCommand>
			break;
 80020d4:	bf00      	nop
		}
	}
	cmd->cotrol_mode_prev = cmd->cotrol_mode;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000080 	.word	0x20000080
 80020f0:	20000084 	.word	0x20000084

080020f4 <MotorInit>:

/* motor config setting */
void MotorInit()
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	DisableMotorWatchdog();
 80020f8:	f000 f81c 	bl	8002134 <DisableMotorWatchdog>
	MotorOperation();
 80020fc:	f000 f836 	bl	800216c <MotorOperation>
	MotorSetPositionMode();
 8002100:	f000 f844 	bl	800218c <MotorSetPositionMode>

	/*
	 * Receive PDO Setting
	 */
	MotorPDOMappingPosVel(); // 20xh
 8002104:	f000 f89a 	bl	800223c <MotorPDOMappingPosVel>
	MotorPDOMappingAccDec(); // 30xh
 8002108:	f000 f8fc 	bl	8002304 <MotorPDOMappingAccDec>
	MotorPDOMappingCtrlWord();// 40xh
 800210c:	f000 f95e 	bl	80023cc <MotorPDOMappingCtrlWord>
	MotorPDOMappingHomeOffest();// 50xh
 8002110:	f000 f9c0 	bl	8002494 <MotorPDOMappingHomeOffest>

	/*
	 * Tranmit PDO Setting
	 */
	MotorPDOMappingPosVelInfo(); //18xh
 8002114:	f000 fa22 	bl	800255c <MotorPDOMappingPosVelInfo>
	MotorPDOMappingTorCurrInfo(); //28xh
 8002118:	f000 fa84 	bl	8002624 <MotorPDOMappingTorCurrInfo>
	MotorPDOMappingStatusInfo(); //38xh
 800211c:	f000 fae6 	bl	80026ec <MotorPDOMappingStatusInfo>


	MotorAccDecInit(); // Init acc,dec if no command
 8002120:	f000 fb54 	bl	80027cc <MotorAccDecInit>
	motor_cmd.encoder_init_flag = MOTOR_INIT_PREPARE;
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <MotorInit+0x3c>)
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20002bdc 	.word	0x20002bdc

08002134 <DisableMotorWatchdog>:

void DisableMotorWatchdog()
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	MotorInitCommand(NMT_CMD_ID, FDCAN_DLC_BYTES_2, nmt_pre_operation);
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <DisableMotorWatchdog+0x30>)
 800213a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800213e:	2000      	movs	r0, #0
 8002140:	f000 ff86 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002144:	2001      	movs	r0, #1
 8002146:	f001 fbd5 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, disable_watchdog);
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <DisableMotorWatchdog+0x34>)
 800214c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002150:	f240 6003 	movw	r0, #1539	; 0x603
 8002154:	f000 ff7c 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002158:	2001      	movs	r0, #1
 800215a:	f001 fbcb 	bl	80038f4 <HAL_Delay>
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000
 8002168:	20000010 	.word	0x20000010

0800216c <MotorOperation>:

void MotorOperation()
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	MotorInitCommand(NMT_CMD_ID, FDCAN_DLC_BYTES_2, nmt_operation);
 8002170:	4a05      	ldr	r2, [pc, #20]	; (8002188 <MotorOperation+0x1c>)
 8002172:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002176:	2000      	movs	r0, #0
 8002178:	f000 ff6a 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f001 fbb9 	bl	80038f4 <HAL_Delay>
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000004 	.word	0x20000004

0800218c <MotorSetPositionMode>:
	MotorInitCommand(NMT_CMD_ID, FDCAN_DLC_BYTES_2, nmt_reset_operation);
	HAL_Delay(1);
}

void MotorSetPositionMode()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, set_mode_position);
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <MotorSetPositionMode+0x94>)
 8002192:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002196:	f240 6003 	movw	r0, #1539	; 0x603
 800219a:	f000 ff59 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f001 fba8 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, set_profile_speed);
 80021a4:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <MotorSetPositionMode+0x98>)
 80021a6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80021aa:	f240 6003 	movw	r0, #1539	; 0x603
 80021ae:	f000 ff4f 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f001 fb9e 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, set_acceleration);
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <MotorSetPositionMode+0x9c>)
 80021ba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80021be:	f240 6003 	movw	r0, #1539	; 0x603
 80021c2:	f000 ff45 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f001 fb94 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, set_deceleration);
 80021cc:	4a17      	ldr	r2, [pc, #92]	; (800222c <MotorSetPositionMode+0xa0>)
 80021ce:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80021d2:	f240 6003 	movw	r0, #1539	; 0x603
 80021d6:	f000 ff3b 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80021da:	2001      	movs	r0, #1
 80021dc:	f001 fb8a 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, prepare_command);
 80021e0:	4a13      	ldr	r2, [pc, #76]	; (8002230 <MotorSetPositionMode+0xa4>)
 80021e2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80021e6:	f240 6003 	movw	r0, #1539	; 0x603
 80021ea:	f000 ff31 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f001 fb80 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, set_target_position);
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <MotorSetPositionMode+0xa8>)
 80021f6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80021fa:	f240 6003 	movw	r0, #1539	; 0x603
 80021fe:	f000 ff27 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002202:	2001      	movs	r0, #1
 8002204:	f001 fb76 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, off_command);
 8002208:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <MotorSetPositionMode+0xac>)
 800220a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800220e:	f240 6003 	movw	r0, #1539	; 0x603
 8002212:	f000 ff1d 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002216:	2001      	movs	r0, #1
 8002218:	f001 fb6c 	bl	80038f4 <HAL_Delay>
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000088 	.word	0x20000088
 8002224:	20000090 	.word	0x20000090
 8002228:	20000098 	.word	0x20000098
 800222c:	200000a0 	.word	0x200000a0
 8002230:	20000018 	.word	0x20000018
 8002234:	200000a8 	.word	0x200000a8
 8002238:	20000020 	.word	0x20000020

0800223c <MotorPDOMappingPosVel>:

void MotorPDOMappingPosVel()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_cobid_pos_vel);
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <MotorPDOMappingPosVel+0xa8>)
 8002242:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002246:	f240 6003 	movw	r0, #1539	; 0x603
 800224a:	f000 ff01 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f001 fb50 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_mapping_pos_vel);
 8002254:	4a24      	ldr	r2, [pc, #144]	; (80022e8 <MotorPDOMappingPosVel+0xac>)
 8002256:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800225a:	f240 6003 	movw	r0, #1539	; 0x603
 800225e:	f000 fef7 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002262:	2001      	movs	r0, #1
 8002264:	f001 fb46 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_pos_cmd);
 8002268:	4a20      	ldr	r2, [pc, #128]	; (80022ec <MotorPDOMappingPosVel+0xb0>)
 800226a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800226e:	f240 6003 	movw	r0, #1539	; 0x603
 8002272:	f000 feed 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002276:	2001      	movs	r0, #1
 8002278:	f001 fb3c 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_vel_cmd);
 800227c:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <MotorPDOMappingPosVel+0xb4>)
 800227e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002282:	f240 6003 	movw	r0, #1539	; 0x603
 8002286:	f000 fee3 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800228a:	2001      	movs	r0, #1
 800228c:	f001 fb32 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_mapping_pos_vel_set);
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <MotorPDOMappingPosVel+0xb8>)
 8002292:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002296:	f240 6003 	movw	r0, #1539	; 0x603
 800229a:	f000 fed9 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800229e:	2001      	movs	r0, #1
 80022a0:	f001 fb28 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_com_pos_vel);
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <MotorPDOMappingPosVel+0xbc>)
 80022a6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80022aa:	f240 6003 	movw	r0, #1539	; 0x603
 80022ae:	f000 fecf 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f001 fb1e 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_tim_pos_vel);
 80022b8:	4a10      	ldr	r2, [pc, #64]	; (80022fc <MotorPDOMappingPosVel+0xc0>)
 80022ba:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80022be:	f240 6003 	movw	r0, #1539	; 0x603
 80022c2:	f000 fec5 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f001 fb14 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_6, rx_tim_pd_pos_vel);
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <MotorPDOMappingPosVel+0xc4>)
 80022ce:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80022d2:	f240 6003 	movw	r0, #1539	; 0x603
 80022d6:	f000 febb 	bl	8003050 <MotorInitCommand>
	HAL_Delay(10);
 80022da:	200a      	movs	r0, #10
 80022dc:	f001 fb0a 	bl	80038f4 <HAL_Delay>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200000b0 	.word	0x200000b0
 80022e8:	200000b8 	.word	0x200000b8
 80022ec:	200000c0 	.word	0x200000c0
 80022f0:	200000c8 	.word	0x200000c8
 80022f4:	200000d0 	.word	0x200000d0
 80022f8:	200000d8 	.word	0x200000d8
 80022fc:	200000e0 	.word	0x200000e0
 8002300:	200000e8 	.word	0x200000e8

08002304 <MotorPDOMappingAccDec>:

void MotorPDOMappingAccDec()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_cobid_acc_dec);
 8002308:	4a28      	ldr	r2, [pc, #160]	; (80023ac <MotorPDOMappingAccDec+0xa8>)
 800230a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800230e:	f240 6003 	movw	r0, #1539	; 0x603
 8002312:	f000 fe9d 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002316:	2001      	movs	r0, #1
 8002318:	f001 faec 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_mapping_acc_dec);
 800231c:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <MotorPDOMappingAccDec+0xac>)
 800231e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002322:	f240 6003 	movw	r0, #1539	; 0x603
 8002326:	f000 fe93 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800232a:	2001      	movs	r0, #1
 800232c:	f001 fae2 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_acc_cmd);
 8002330:	4a20      	ldr	r2, [pc, #128]	; (80023b4 <MotorPDOMappingAccDec+0xb0>)
 8002332:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002336:	f240 6003 	movw	r0, #1539	; 0x603
 800233a:	f000 fe89 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f001 fad8 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_dec_cmd);
 8002344:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <MotorPDOMappingAccDec+0xb4>)
 8002346:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800234a:	f240 6003 	movw	r0, #1539	; 0x603
 800234e:	f000 fe7f 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002352:	2001      	movs	r0, #1
 8002354:	f001 face 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_mapping_acc_dec_set);
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <MotorPDOMappingAccDec+0xb8>)
 800235a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800235e:	f240 6003 	movw	r0, #1539	; 0x603
 8002362:	f000 fe75 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002366:	2001      	movs	r0, #1
 8002368:	f001 fac4 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_com_acc_dec);
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <MotorPDOMappingAccDec+0xbc>)
 800236e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002372:	f240 6003 	movw	r0, #1539	; 0x603
 8002376:	f000 fe6b 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800237a:	2001      	movs	r0, #1
 800237c:	f001 faba 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_tim_acc_dec);
 8002380:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <MotorPDOMappingAccDec+0xc0>)
 8002382:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002386:	f240 6003 	movw	r0, #1539	; 0x603
 800238a:	f000 fe61 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800238e:	2001      	movs	r0, #1
 8002390:	f001 fab0 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_6, rx_tim_pd_acc_dec);
 8002394:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <MotorPDOMappingAccDec+0xc4>)
 8002396:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800239a:	f240 6003 	movw	r0, #1539	; 0x603
 800239e:	f000 fe57 	bl	8003050 <MotorInitCommand>
	HAL_Delay(10);
 80023a2:	200a      	movs	r0, #10
 80023a4:	f001 faa6 	bl	80038f4 <HAL_Delay>
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200000f0 	.word	0x200000f0
 80023b0:	200000f8 	.word	0x200000f8
 80023b4:	20000100 	.word	0x20000100
 80023b8:	20000108 	.word	0x20000108
 80023bc:	20000110 	.word	0x20000110
 80023c0:	20000118 	.word	0x20000118
 80023c4:	20000120 	.word	0x20000120
 80023c8:	20000128 	.word	0x20000128

080023cc <MotorPDOMappingCtrlWord>:

void MotorPDOMappingCtrlWord()
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_cobid_ctlword);
 80023d0:	4a28      	ldr	r2, [pc, #160]	; (8002474 <MotorPDOMappingCtrlWord+0xa8>)
 80023d2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80023d6:	f240 6003 	movw	r0, #1539	; 0x603
 80023da:	f000 fe39 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f001 fa88 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_mapping_ctlword);
 80023e4:	4a24      	ldr	r2, [pc, #144]	; (8002478 <MotorPDOMappingCtrlWord+0xac>)
 80023e6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80023ea:	f240 6003 	movw	r0, #1539	; 0x603
 80023ee:	f000 fe2f 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f001 fa7e 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_ctlword_cmd);
 80023f8:	4a20      	ldr	r2, [pc, #128]	; (800247c <MotorPDOMappingCtrlWord+0xb0>)
 80023fa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80023fe:	f240 6003 	movw	r0, #1539	; 0x603
 8002402:	f000 fe25 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002406:	2001      	movs	r0, #1
 8002408:	f001 fa74 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_opermode_cmd);
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <MotorPDOMappingCtrlWord+0xb4>)
 800240e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002412:	f240 6003 	movw	r0, #1539	; 0x603
 8002416:	f000 fe1b 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f001 fa6a 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_mapping_ctlword_set);
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <MotorPDOMappingCtrlWord+0xb8>)
 8002422:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002426:	f240 6003 	movw	r0, #1539	; 0x603
 800242a:	f000 fe11 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f001 fa60 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_com_ctlword);
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <MotorPDOMappingCtrlWord+0xbc>)
 8002436:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800243a:	f240 6003 	movw	r0, #1539	; 0x603
 800243e:	f000 fe07 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f001 fa56 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_tim_ctlword);
 8002448:	4a10      	ldr	r2, [pc, #64]	; (800248c <MotorPDOMappingCtrlWord+0xc0>)
 800244a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800244e:	f240 6003 	movw	r0, #1539	; 0x603
 8002452:	f000 fdfd 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002456:	2001      	movs	r0, #1
 8002458:	f001 fa4c 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_tim_pd_ctlword);
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <MotorPDOMappingCtrlWord+0xc4>)
 800245e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002462:	f240 6003 	movw	r0, #1539	; 0x603
 8002466:	f000 fdf3 	bl	8003050 <MotorInitCommand>
	HAL_Delay(10);
 800246a:	200a      	movs	r0, #10
 800246c:	f001 fa42 	bl	80038f4 <HAL_Delay>
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000130 	.word	0x20000130
 8002478:	20000138 	.word	0x20000138
 800247c:	20000140 	.word	0x20000140
 8002480:	20000148 	.word	0x20000148
 8002484:	20000150 	.word	0x20000150
 8002488:	20000158 	.word	0x20000158
 800248c:	20000160 	.word	0x20000160
 8002490:	20000168 	.word	0x20000168

08002494 <MotorPDOMappingHomeOffest>:

void MotorPDOMappingHomeOffest()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_cobid_homeoffset);
 8002498:	4a28      	ldr	r2, [pc, #160]	; (800253c <MotorPDOMappingHomeOffest+0xa8>)
 800249a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800249e:	f240 6003 	movw	r0, #1539	; 0x603
 80024a2:	f000 fdd5 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f001 fa24 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_mapping_homeoffset);
 80024ac:	4a24      	ldr	r2, [pc, #144]	; (8002540 <MotorPDOMappingHomeOffest+0xac>)
 80024ae:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80024b2:	f240 6003 	movw	r0, #1539	; 0x603
 80024b6:	f000 fdcb 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f001 fa1a 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_homemode_cmd);
 80024c0:	4a20      	ldr	r2, [pc, #128]	; (8002544 <MotorPDOMappingHomeOffest+0xb0>)
 80024c2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80024c6:	f240 6003 	movw	r0, #1539	; 0x603
 80024ca:	f000 fdc1 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f001 fa10 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_homeoffset_cmd);
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <MotorPDOMappingHomeOffest+0xb4>)
 80024d6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80024da:	f240 6003 	movw	r0, #1539	; 0x603
 80024de:	f000 fdb7 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f001 fa06 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_mapping_homeoffset_set);
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <MotorPDOMappingHomeOffest+0xb8>)
 80024ea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80024ee:	f240 6003 	movw	r0, #1539	; 0x603
 80024f2:	f000 fdad 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f001 f9fc 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, rx_com_homeoffset);
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <MotorPDOMappingHomeOffest+0xbc>)
 80024fe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002502:	f240 6003 	movw	r0, #1539	; 0x603
 8002506:	f000 fda3 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800250a:	2001      	movs	r0, #1
 800250c:	f001 f9f2 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_tim_homeoffset);
 8002510:	4a10      	ldr	r2, [pc, #64]	; (8002554 <MotorPDOMappingHomeOffest+0xc0>)
 8002512:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002516:	f240 6003 	movw	r0, #1539	; 0x603
 800251a:	f000 fd99 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800251e:	2001      	movs	r0, #1
 8002520:	f001 f9e8 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, rx_tim_pd_homeoffset);
 8002524:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <MotorPDOMappingHomeOffest+0xc4>)
 8002526:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800252a:	f240 6003 	movw	r0, #1539	; 0x603
 800252e:	f000 fd8f 	bl	8003050 <MotorInitCommand>
	HAL_Delay(10);
 8002532:	200a      	movs	r0, #10
 8002534:	f001 f9de 	bl	80038f4 <HAL_Delay>
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000170 	.word	0x20000170
 8002540:	20000178 	.word	0x20000178
 8002544:	20000180 	.word	0x20000180
 8002548:	20000188 	.word	0x20000188
 800254c:	20000190 	.word	0x20000190
 8002550:	20000198 	.word	0x20000198
 8002554:	200001a0 	.word	0x200001a0
 8002558:	200001a8 	.word	0x200001a8

0800255c <MotorPDOMappingPosVelInfo>:

void MotorPDOMappingPosVelInfo()
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_cobid_pos_vel);
 8002560:	4a28      	ldr	r2, [pc, #160]	; (8002604 <MotorPDOMappingPosVelInfo+0xa8>)
 8002562:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002566:	f240 6003 	movw	r0, #1539	; 0x603
 800256a:	f000 fd71 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800256e:	2001      	movs	r0, #1
 8002570:	f001 f9c0 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_mapping_pos_vel);
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <MotorPDOMappingPosVelInfo+0xac>)
 8002576:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800257a:	f240 6003 	movw	r0, #1539	; 0x603
 800257e:	f000 fd67 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002582:	2001      	movs	r0, #1
 8002584:	f001 f9b6 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_pos_info);
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <MotorPDOMappingPosVelInfo+0xb0>)
 800258a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800258e:	f240 6003 	movw	r0, #1539	; 0x603
 8002592:	f000 fd5d 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002596:	2001      	movs	r0, #1
 8002598:	f001 f9ac 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_vel_info);
 800259c:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <MotorPDOMappingPosVelInfo+0xb4>)
 800259e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80025a2:	f240 6003 	movw	r0, #1539	; 0x603
 80025a6:	f000 fd53 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f001 f9a2 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_mapping_pos_vel_set);
 80025b0:	4a18      	ldr	r2, [pc, #96]	; (8002614 <MotorPDOMappingPosVelInfo+0xb8>)
 80025b2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80025b6:	f240 6003 	movw	r0, #1539	; 0x603
 80025ba:	f000 fd49 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f001 f998 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_com_pos_vel);
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <MotorPDOMappingPosVelInfo+0xbc>)
 80025c6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80025ca:	f240 6003 	movw	r0, #1539	; 0x603
 80025ce:	f000 fd3f 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f001 f98e 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_tim_pos_vel);
 80025d8:	4a10      	ldr	r2, [pc, #64]	; (800261c <MotorPDOMappingPosVelInfo+0xc0>)
 80025da:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80025de:	f240 6003 	movw	r0, #1539	; 0x603
 80025e2:	f000 fd35 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f001 f984 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_6, tx_tim_pd_pos_vel);
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <MotorPDOMappingPosVelInfo+0xc4>)
 80025ee:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80025f2:	f240 6003 	movw	r0, #1539	; 0x603
 80025f6:	f000 fd2b 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f001 f97a 	bl	80038f4 <HAL_Delay>
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200001b0 	.word	0x200001b0
 8002608:	200001b8 	.word	0x200001b8
 800260c:	200001c0 	.word	0x200001c0
 8002610:	200001c8 	.word	0x200001c8
 8002614:	200001d0 	.word	0x200001d0
 8002618:	200001d8 	.word	0x200001d8
 800261c:	200001e0 	.word	0x200001e0
 8002620:	200001e8 	.word	0x200001e8

08002624 <MotorPDOMappingTorCurrInfo>:

void MotorPDOMappingTorCurrInfo()
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_cobid_tor_cur);
 8002628:	4a28      	ldr	r2, [pc, #160]	; (80026cc <MotorPDOMappingTorCurrInfo+0xa8>)
 800262a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800262e:	f240 6003 	movw	r0, #1539	; 0x603
 8002632:	f000 fd0d 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f001 f95c 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_mapping_tor_cur);
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <MotorPDOMappingTorCurrInfo+0xac>)
 800263e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002642:	f240 6003 	movw	r0, #1539	; 0x603
 8002646:	f000 fd03 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800264a:	2001      	movs	r0, #1
 800264c:	f001 f952 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_tor_info);
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <MotorPDOMappingTorCurrInfo+0xb0>)
 8002652:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002656:	f240 6003 	movw	r0, #1539	; 0x603
 800265a:	f000 fcf9 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800265e:	2001      	movs	r0, #1
 8002660:	f001 f948 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_cur_info);
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <MotorPDOMappingTorCurrInfo+0xb4>)
 8002666:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800266a:	f240 6003 	movw	r0, #1539	; 0x603
 800266e:	f000 fcef 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f001 f93e 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_mapping_tor_cur_set);
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <MotorPDOMappingTorCurrInfo+0xb8>)
 800267a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800267e:	f240 6003 	movw	r0, #1539	; 0x603
 8002682:	f000 fce5 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002686:	2001      	movs	r0, #1
 8002688:	f001 f934 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_com_tor_cur);
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <MotorPDOMappingTorCurrInfo+0xbc>)
 800268e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002692:	f240 6003 	movw	r0, #1539	; 0x603
 8002696:	f000 fcdb 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800269a:	2001      	movs	r0, #1
 800269c:	f001 f92a 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_tim_tor_cur);
 80026a0:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <MotorPDOMappingTorCurrInfo+0xc0>)
 80026a2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80026a6:	f240 6003 	movw	r0, #1539	; 0x603
 80026aa:	f000 fcd1 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f001 f920 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_6, tx_tim_pd_tor_cur);
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <MotorPDOMappingTorCurrInfo+0xc4>)
 80026b6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80026ba:	f240 6003 	movw	r0, #1539	; 0x603
 80026be:	f000 fcc7 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f001 f916 	bl	80038f4 <HAL_Delay>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200001f0 	.word	0x200001f0
 80026d0:	200001f8 	.word	0x200001f8
 80026d4:	20000200 	.word	0x20000200
 80026d8:	20000208 	.word	0x20000208
 80026dc:	20000210 	.word	0x20000210
 80026e0:	20000218 	.word	0x20000218
 80026e4:	20000220 	.word	0x20000220
 80026e8:	20000228 	.word	0x20000228

080026ec <MotorPDOMappingStatusInfo>:

void MotorPDOMappingStatusInfo()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_cobid_status);
 80026f0:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <MotorPDOMappingStatusInfo+0xbc>)
 80026f2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80026f6:	f240 6003 	movw	r0, #1539	; 0x603
 80026fa:	f000 fca9 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 80026fe:	2001      	movs	r0, #1
 8002700:	f001 f8f8 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_mapping_status);
 8002704:	4a29      	ldr	r2, [pc, #164]	; (80027ac <MotorPDOMappingStatusInfo+0xc0>)
 8002706:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800270a:	f240 6003 	movw	r0, #1539	; 0x603
 800270e:	f000 fc9f 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002712:	2001      	movs	r0, #1
 8002714:	f001 f8ee 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_status_info);
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <MotorPDOMappingStatusInfo+0xc4>)
 800271a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800271e:	f240 6003 	movw	r0, #1539	; 0x603
 8002722:	f000 fc95 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002726:	2001      	movs	r0, #1
 8002728:	f001 f8e4 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_modestatus_info);
 800272c:	4a21      	ldr	r2, [pc, #132]	; (80027b4 <MotorPDOMappingStatusInfo+0xc8>)
 800272e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002732:	f240 6003 	movw	r0, #1539	; 0x603
 8002736:	f000 fc8b 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800273a:	2001      	movs	r0, #1
 800273c:	f001 f8da 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_errorstatus_info);
 8002740:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <MotorPDOMappingStatusInfo+0xcc>)
 8002742:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8002746:	f240 6003 	movw	r0, #1539	; 0x603
 800274a:	f000 fc81 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800274e:	2001      	movs	r0, #1
 8002750:	f001 f8d0 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_mapping_status_set);
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <MotorPDOMappingStatusInfo+0xd0>)
 8002756:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800275a:	f240 6003 	movw	r0, #1539	; 0x603
 800275e:	f000 fc77 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002762:	2001      	movs	r0, #1
 8002764:	f001 f8c6 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_8, tx_com_status);
 8002768:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <MotorPDOMappingStatusInfo+0xd4>)
 800276a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800276e:	f240 6003 	movw	r0, #1539	; 0x603
 8002772:	f000 fc6d 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 8002776:	2001      	movs	r0, #1
 8002778:	f001 f8bc 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_5, tx_tim_status);
 800277c:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <MotorPDOMappingStatusInfo+0xd8>)
 800277e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002782:	f240 6003 	movw	r0, #1539	; 0x603
 8002786:	f000 fc63 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800278a:	2001      	movs	r0, #1
 800278c:	f001 f8b2 	bl	80038f4 <HAL_Delay>

	MotorInitCommand(SDO_CMD_ID, FDCAN_DLC_BYTES_6, tx_tim_pd_status);
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <MotorPDOMappingStatusInfo+0xdc>)
 8002792:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8002796:	f240 6003 	movw	r0, #1539	; 0x603
 800279a:	f000 fc59 	bl	8003050 <MotorInitCommand>
	HAL_Delay(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f001 f8a8 	bl	80038f4 <HAL_Delay>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000238 	.word	0x20000238
 80027b0:	20000240 	.word	0x20000240
 80027b4:	20000248 	.word	0x20000248
 80027b8:	20000250 	.word	0x20000250
 80027bc:	20000258 	.word	0x20000258
 80027c0:	20000260 	.word	0x20000260
 80027c4:	20000268 	.word	0x20000268
 80027c8:	20000270 	.word	0x20000270

080027cc <MotorAccDecInit>:

void MotorAccDecInit()
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
	motor_cmd.acc_dec[0] = 0xFF;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <MotorAccDecInit+0x50>)
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	motor_cmd.acc_dec[1] = 0xFF;
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <MotorAccDecInit+0x50>)
 80027da:	22ff      	movs	r2, #255	; 0xff
 80027dc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	motor_cmd.acc_dec[2] = 0x01;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MotorAccDecInit+0x50>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	motor_cmd.acc_dec[3] = 0;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MotorAccDecInit+0x50>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	motor_cmd.acc_dec[4] = 0xFF;
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <MotorAccDecInit+0x50>)
 80027f2:	22ff      	movs	r2, #255	; 0xff
 80027f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	motor_cmd.acc_dec[5] = 0xFF;
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <MotorAccDecInit+0x50>)
 80027fa:	22ff      	movs	r2, #255	; 0xff
 80027fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	motor_cmd.acc_dec[6] = 0x01;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <MotorAccDecInit+0x50>)
 8002802:	2201      	movs	r2, #1
 8002804:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	motor_cmd.acc_dec[7] = 0;
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <MotorAccDecInit+0x50>)
 800280a:	2200      	movs	r2, #0
 800280c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20002bdc 	.word	0x20002bdc

08002820 <MotorEncoderInitPrepare>:
	MotorInitCommand(0x400 + 3, FDCAN_DLC_BYTES_3, ctlword_encoder_init_MotorOFF_Type2);
}

//Motor Driver Type1
void MotorEncoderInitPrepare()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_encoder_init_prepare);
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <MotorEncoderInitPrepare+0x18>)
 8002826:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800282a:	f240 4003 	movw	r0, #1027	; 0x403
 800282e:	f000 fc0f 	bl	8003050 <MotorInitCommand>
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000006c 	.word	0x2000006c

0800283c <MotorEncoderInitCommand>:

void MotorEncoderInitCommand()
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	MotorInitCommand(HOMING_CONTROL_ID, FDCAN_DLC_BYTES_5, ctlword_encoder_init_command);
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <MotorEncoderInitCommand+0x18>)
 8002842:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8002846:	f240 5003 	movw	r0, #1283	; 0x503
 800284a:	f000 fc01 	bl	8003050 <MotorInitCommand>
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000070 	.word	0x20000070

08002858 <MotorEncoderInitBegin>:

void MotorEncoderInitBegin()
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_encoder_init_begin);
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <MotorEncoderInitBegin+0x18>)
 800285e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002862:	f240 4003 	movw	r0, #1027	; 0x403
 8002866:	f000 fbf3 	bl	8003050 <MotorInitCommand>
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000078 	.word	0x20000078

08002874 <MotorEncoderInitMOTOROFF>:


void MotorEncoderInitMOTOROFF()
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_encoder_init_MotorOFF);
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <MotorEncoderInitMOTOROFF+0x18>)
 800287a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800287e:	f240 4003 	movw	r0, #1027	; 0x403
 8002882:	f000 fbe5 	bl	8003050 <MotorInitCommand>
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000007c 	.word	0x2000007c

08002890 <MotorAlarmReset>:
{
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_servo_off);
}

void MotorAlarmReset()
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_alarm_reset);
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <MotorAlarmReset+0x18>)
 8002896:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800289a:	f240 4003 	movw	r0, #1027	; 0x403
 800289e:	f000 fbd7 	bl	8003050 <MotorInitCommand>
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000044 	.word	0x20000044

080028ac <MotorServeOnOff>:

void MotorServeOnOff(struct ControlCommand *cmd)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	if( cmd->servo_on_off_flag ) {
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d029      	beq.n	8002912 <MotorServeOnOff+0x66>
		if (cmd->servo_on_off && cmd->user_auto_mode) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d011      	beq.n	80028ec <MotorServeOnOff+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00c      	beq.n	80028ec <MotorServeOnOff+0x40>

			if(cmd->cotrol_mode == 4){
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d103      	bne.n	80028e4 <MotorServeOnOff+0x38>
				T_mode_MotorServoOn(cmd);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f881 	bl	80029e4 <T_mode_MotorServoOn>
			if(cmd->cotrol_mode == 4){
 80028e2:	e011      	b.n	8002908 <MotorServeOnOff+0x5c>
			}else{
				P_mode_MotorServoOn(cmd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f831 	bl	800294c <P_mode_MotorServoOn>
			if(cmd->cotrol_mode == 4){
 80028ea:	e00d      	b.n	8002908 <MotorServeOnOff+0x5c>
			}
		} else {
			if(cmd->cotrol_mode == 4){
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d102      	bne.n	80028fc <MotorServeOnOff+0x50>
				T_mode_MotorServoOff();
 80028f6:	f000 f8af 	bl	8002a58 <T_mode_MotorServoOff>
 80028fa:	e001      	b.n	8002900 <MotorServeOnOff+0x54>
			}else{
				P_mode_MotorServoOff();
 80028fc:	f000 f860 	bl	80029c0 <P_mode_MotorServoOff>
			}
			cmd->auto_mode_flag = FALSE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		}

		cmd->servo_on_off_flag = FALSE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		}else{
			P_mode_MotorServoOff();
		}
		cmd->auto_mode_flag = FALSE;
	}
}
 8002910:	e017      	b.n	8002942 <MotorServeOnOff+0x96>
	} else if( (!cmd->status[0]) && (cmd->status[1]) ) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002918:	2b00      	cmp	r3, #0
 800291a:	d112      	bne.n	8002942 <MotorServeOnOff+0x96>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00d      	beq.n	8002942 <MotorServeOnOff+0x96>
		if(cmd->cotrol_mode == 4){
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800292c:	2b04      	cmp	r3, #4
 800292e:	d102      	bne.n	8002936 <MotorServeOnOff+0x8a>
			T_mode_MotorServoOff();
 8002930:	f000 f892 	bl	8002a58 <T_mode_MotorServoOff>
 8002934:	e001      	b.n	800293a <MotorServeOnOff+0x8e>
			P_mode_MotorServoOff();
 8002936:	f000 f843 	bl	80029c0 <P_mode_MotorServoOff>
		cmd->auto_mode_flag = FALSE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <P_mode_MotorServoOn>:

void P_mode_MotorServoOn()
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	if(servo_on_status == MOTOR_OFF){
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <P_mode_MotorServoOn+0x60>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <P_mode_MotorServoOn+0x20>
		MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_servo_off);
 8002958:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <P_mode_MotorServoOn+0x64>)
 800295a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800295e:	f240 4003 	movw	r0, #1027	; 0x403
 8002962:	f000 fb75 	bl	8003050 <MotorInitCommand>
		servo_on_status = MOTOR_RDY;
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <P_mode_MotorServoOn+0x60>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
	}
	if(servo_on_status == MOTOR_RDY){
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <P_mode_MotorServoOn+0x60>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d109      	bne.n	8002988 <P_mode_MotorServoOn+0x3c>
		MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_servo_RDY);
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <P_mode_MotorServoOn+0x68>)
 8002976:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800297a:	f240 4003 	movw	r0, #1027	; 0x403
 800297e:	f000 fb67 	bl	8003050 <MotorInitCommand>
		servo_on_status = MOTOR_ON;
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <P_mode_MotorServoOn+0x60>)
 8002984:	2202      	movs	r2, #2
 8002986:	701a      	strb	r2, [r3, #0]
	}

	if(servo_on_status == MOTOR_ON){
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <P_mode_MotorServoOn+0x60>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d10a      	bne.n	80029a6 <P_mode_MotorServoOn+0x5a>
		MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_servo_on);
 8002990:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <P_mode_MotorServoOn+0x6c>)
 8002992:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002996:	f240 4003 	movw	r0, #1027	; 0x403
 800299a:	f000 fb59 	bl	8003050 <MotorInitCommand>
		motor_cmd.auto_mode_flag = TRUE;
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <P_mode_MotorServoOn+0x70>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	}


}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200002f4 	.word	0x200002f4
 80029b0:	20000040 	.word	0x20000040
 80029b4:	2000003c 	.word	0x2000003c
 80029b8:	20000038 	.word	0x20000038
 80029bc:	20002bdc 	.word	0x20002bdc

080029c0 <P_mode_MotorServoOff>:

void P_mode_MotorServoOff()
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_servo_off);
 80029c4:	4a05      	ldr	r2, [pc, #20]	; (80029dc <P_mode_MotorServoOff+0x1c>)
 80029c6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80029ca:	f240 4003 	movw	r0, #1027	; 0x403
 80029ce:	f000 fb3f 	bl	8003050 <MotorInitCommand>
	servo_on_status = MOTOR_OFF;
 80029d2:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <P_mode_MotorServoOff+0x20>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000040 	.word	0x20000040
 80029e0:	200002f4 	.word	0x200002f4

080029e4 <T_mode_MotorServoOn>:

void T_mode_MotorServoOn()
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	if(servo_on_status == MOTOR_OFF){
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <T_mode_MotorServoOn+0x60>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <T_mode_MotorServoOn+0x20>
		MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, T_ctlword_servo_off);
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <T_mode_MotorServoOn+0x64>)
 80029f2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80029f6:	f240 4003 	movw	r0, #1027	; 0x403
 80029fa:	f000 fb29 	bl	8003050 <MotorInitCommand>
		servo_on_status = MOTOR_RDY;
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <T_mode_MotorServoOn+0x60>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
	}
	if(servo_on_status == MOTOR_RDY){
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <T_mode_MotorServoOn+0x60>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d109      	bne.n	8002a20 <T_mode_MotorServoOn+0x3c>
		MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, T_ctlword_servo_RDY);
 8002a0c:	4a0f      	ldr	r2, [pc, #60]	; (8002a4c <T_mode_MotorServoOn+0x68>)
 8002a0e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002a12:	f240 4003 	movw	r0, #1027	; 0x403
 8002a16:	f000 fb1b 	bl	8003050 <MotorInitCommand>
		servo_on_status = MOTOR_ON;
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <T_mode_MotorServoOn+0x60>)
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
	}

	if(servo_on_status == MOTOR_ON){
 8002a20:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <T_mode_MotorServoOn+0x60>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d10a      	bne.n	8002a3e <T_mode_MotorServoOn+0x5a>
		MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, T_ctlword_servo_on);
 8002a28:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <T_mode_MotorServoOn+0x6c>)
 8002a2a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002a2e:	f240 4003 	movw	r0, #1027	; 0x403
 8002a32:	f000 fb0d 	bl	8003050 <MotorInitCommand>
		motor_cmd.auto_mode_flag = TRUE;
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <T_mode_MotorServoOn+0x70>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	}


}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200002f4 	.word	0x200002f4
 8002a48:	20000050 	.word	0x20000050
 8002a4c:	2000004c 	.word	0x2000004c
 8002a50:	20000048 	.word	0x20000048
 8002a54:	20002bdc 	.word	0x20002bdc

08002a58 <T_mode_MotorServoOff>:

void T_mode_MotorServoOff()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, T_ctlword_servo_off);
 8002a5c:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <T_mode_MotorServoOff+0x1c>)
 8002a5e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002a62:	f240 4003 	movw	r0, #1027	; 0x403
 8002a66:	f000 faf3 	bl	8003050 <MotorInitCommand>
	servo_on_status = MOTOR_OFF;
 8002a6a:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <T_mode_MotorServoOff+0x20>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000050 	.word	0x20000050
 8002a78:	200002f4 	.word	0x200002f4

08002a7c <TorqueCommandConverter>:

void TorqueCommandConverter(struct ControlCommand *cmd)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	cmd->torque_cmd = (int16_t)((cmd->torque[1] << 8) | cmd->torque[0]);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b21a      	sxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	if(cmd->torque_cmd != cmd->torque_cmd_prev){
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f9b3 208e 	ldrsh.w	r2, [r3, #142]	; 0x8e
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d037      	beq.n	8002b20 <TorqueCommandConverter+0xa4>


		Torquevalue[4] = cmd->torque[0];
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <TorqueCommandConverter+0xbc>)
 8002ab8:	711a      	strb	r2, [r3, #4]
		Torquevalue[5] = cmd->torque[1];
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <TorqueCommandConverter+0xbc>)
 8002ac2:	715a      	strb	r2, [r3, #5]

		TorquespeedLimit[4] = cmd->torque[2];
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <TorqueCommandConverter+0xc0>)
 8002acc:	711a      	strb	r2, [r3, #4]
		TorquespeedLimit[5] = cmd->torque[3];
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <TorqueCommandConverter+0xc0>)
 8002ad6:	715a      	strb	r2, [r3, #5]
		TorquespeedLimit[6] = cmd->torque[4];
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <TorqueCommandConverter+0xc0>)
 8002ae0:	719a      	strb	r2, [r3, #6]
		TorquespeedLimit[7] = cmd->torque[5];
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <TorqueCommandConverter+0xc0>)
 8002aea:	71da      	strb	r2, [r3, #7]

		Torquerate[4] = cmd->torque[6];
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <TorqueCommandConverter+0xc4>)
 8002af4:	711a      	strb	r2, [r3, #4]
		Torquerate[5] = cmd->torque[7];
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <TorqueCommandConverter+0xc4>)
 8002afe:	715a      	strb	r2, [r3, #5]


		cmd->user_flag = TRUE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
		cmd->torquevalue_flag = TRUE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
		cmd->torquespeedlimit_flag = TRUE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		cmd->torquerate_flag = TRUE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

	}

	cmd->torque_cmd_prev = cmd->torque_cmd;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f9b3 208e 	ldrsh.w	r2, [r3, #142]	; 0x8e
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	20000054 	.word	0x20000054
 8002b3c:	2000005c 	.word	0x2000005c
 8002b40:	20000064 	.word	0x20000064

08002b44 <MotorPrepare>:

void MotorPrepare()
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_prepare);
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <MotorPrepare+0x18>)
 8002b4a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002b4e:	f240 4003 	movw	r0, #1027	; 0x403
 8002b52:	f000 fa7d 	bl	8003050 <MotorInitCommand>

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000028 	.word	0x20000028

08002b60 <T_MotorPrepare>:

void T_MotorPrepare()
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, T_ctlword_prepare);
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <T_MotorPrepare+0x18>)
 8002b66:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002b6a:	f240 4003 	movw	r0, #1027	; 0x403
 8002b6e:	f000 fa6f 	bl	8003050 <MotorInitCommand>

}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000002c 	.word	0x2000002c

08002b7c <MotorStart>:

void MotorStart()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, ctlword_begin);
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <MotorStart+0x18>)
 8002b82:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002b86:	f240 4003 	movw	r0, #1027	; 0x403
 8002b8a:	f000 fa61 	bl	8003050 <MotorInitCommand>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000030 	.word	0x20000030

08002b98 <T_MotorStart>:

void T_MotorStart()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	MotorInitCommand(CONTROL_WORD_ID, FDCAN_DLC_BYTES_3, T_ctlword_begin);
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <T_MotorStart+0x18>)
 8002b9e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002ba2:	f240 4003 	movw	r0, #1027	; 0x403
 8002ba6:	f000 fa53 	bl	8003050 <MotorInitCommand>
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000034 	.word	0x20000034
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <MotorCommandConverter>:

void MotorCommandConverter(struct ControlCommand *cmd)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	//float _gear_ratio = 5;
	float _gear_ratio = 10; // SKKU AVANTE Gear Ratio 1 : 10
 8002bc0:	4baf      	ldr	r3, [pc, #700]	; (8002e80 <MotorCommandConverter+0x2c8>)
 8002bc2:	61fb      	str	r3, [r7, #28]
	float _motor_pulse = 10000;
 8002bc4:	4baf      	ldr	r3, [pc, #700]	; (8002e84 <MotorCommandConverter+0x2cc>)
 8002bc6:	61bb      	str	r3, [r7, #24]
	float _motor_gear_ratio = _motor_pulse * _gear_ratio / 360;
 8002bc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd4:	eddf 6aac 	vldr	s13, [pc, #688]	; 8002e88 <MotorCommandConverter+0x2d0>
 8002bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bdc:	edc7 7a05 	vstr	s15, [r7, #20]
	float _deg_to_rpm = 0.166667;
 8002be0:	4baa      	ldr	r3, [pc, #680]	; (8002e8c <MotorCommandConverter+0x2d4>)
 8002be2:	613b      	str	r3, [r7, #16]
	float _rpm_to_pulse = 166.66666667;
 8002be4:	4baa      	ldr	r3, [pc, #680]	; (8002e90 <MotorCommandConverter+0x2d8>)
 8002be6:	60fb      	str	r3, [r7, #12]

	cmd->pos_int16 = (int16_t)(cmd->user[1] << 8) | cmd->user[0];
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	785b      	ldrb	r3, [r3, #1]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b21a      	sxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	821a      	strh	r2, [r3, #16]
	cmd->pos_int32 = cmd->pos_int16;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	615a      	str	r2, [r3, #20]

	cmd->pos_float = (float)cmd->pos_int32 * _motor_gear_ratio * 0.1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1e:	ee17 0a90 	vmov	r0, s15
 8002c22:	f7fd fd8b 	bl	800073c <__aeabi_f2d>
 8002c26:	a394      	add	r3, pc, #592	; (adr r3, 8002e78 <MotorCommandConverter+0x2c0>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd faf8 	bl	8000220 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7fd fdd8 	bl	80007ec <__aeabi_d2f>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	619a      	str	r2, [r3, #24]
	cmd->pos_int32 = (int32_t)cmd->pos_float;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4c:	ee17 2a90 	vmov	r2, s15
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	615a      	str	r2, [r3, #20]

	cmd->pos_vel[3] = cmd->pos_int32 >> 24;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	161b      	asrs	r3, r3, #24
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	cmd->pos_vel[2] = cmd->pos_int32 >> 16;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	141b      	asrs	r3, r3, #16
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	cmd->pos_vel[1] = cmd->pos_int32 >> 8;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	121b      	asrs	r3, r3, #8
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	cmd->pos_vel[0] = cmd->pos_int32;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	cmd->vel_int32 = (int16_t)(cmd->user[3] << 8) | cmd->user[2];
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	78db      	ldrb	r3, [r3, #3]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	b21b      	sxth	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	789b      	ldrb	r3, [r3, #2]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
	cmd->vel_float = (float)cmd->vel_int32 * _deg_to_rpm;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002caa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	cmd->vel_float = cmd->vel_float * _gear_ratio;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002cbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	cmd->vel_float = cmd->vel_float * _rpm_to_pulse;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002cd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	cmd->vel_int32 = (int32_t)cmd->vel_float;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cea:	ee17 2a90 	vmov	r2, s15
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

	cmd->pos_vel[7] = cmd->vel_int32 >> 24;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	161b      	asrs	r3, r3, #24
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	cmd->pos_vel[6] = cmd->vel_int32 >> 16;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	141b      	asrs	r3, r3, #16
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	cmd->pos_vel[5] = cmd->vel_int32 >> 8;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	121b      	asrs	r3, r3, #8
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	cmd->pos_vel[4] = cmd->vel_int32;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	cmd->acc_int32 = (cmd->user[5] << 8) | cmd->user[4];
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	795b      	ldrb	r3, [r3, #5]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	7912      	ldrb	r2, [r2, #4]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
	cmd->acc_float = (float)cmd->acc_int32 * _deg_to_rpm;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	ee07 3a90 	vmov	s15, r3
 8002d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	cmd->acc_float = cmd->acc_float * _gear_ratio;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002d58:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	cmd->acc_float = cmd->acc_float * _rpm_to_pulse;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	cmd->acc_int32 = (int32_t)cmd->acc_float;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d84:	ee17 2a90 	vmov	r2, s15
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44

	cmd->acc_dec[3] = cmd->acc_int32 >> 24;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d90:	161b      	asrs	r3, r3, #24
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	cmd->acc_dec[2] = cmd->acc_int32>> 16;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	141b      	asrs	r3, r3, #16
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	cmd->acc_dec[1] = cmd->acc_int32 >> 8;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	121b      	asrs	r3, r3, #8
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	cmd->acc_dec[0] = cmd->acc_int32;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	cmd->dec_int32 = (cmd->user[7] << 8) | cmd->user[6];
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	79db      	ldrb	r3, [r3, #7]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	7992      	ldrb	r2, [r2, #6]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	64da      	str	r2, [r3, #76]	; 0x4c
	cmd->dec_float = (float)cmd->dec_int32 * _deg_to_rpm;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8002de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	cmd->dec_float = cmd->dec_float * _gear_ratio;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002df2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	cmd->dec_float = cmd->dec_float * _rpm_to_pulse;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002e06:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	cmd->dec_int32 = (int32_t)cmd->dec_float;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e1e:	ee17 2a90 	vmov	r2, s15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	64da      	str	r2, [r3, #76]	; 0x4c

	cmd->acc_dec[7] = cmd->dec_int32 >> 24;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	161b      	asrs	r3, r3, #24
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	cmd->acc_dec[6] = cmd->dec_int32>> 16;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	141b      	asrs	r3, r3, #16
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	cmd->acc_dec[5] = cmd->dec_int32 >> 8;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	121b      	asrs	r3, r3, #8
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	cmd->acc_dec[4] = cmd->dec_int32;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	cmd->pos_vel_flag = TRUE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	cmd->acc_dec_flag = TRUE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 8002e6c:	bf00      	nop
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	f3af 8000 	nop.w
 8002e78:	9999999a 	.word	0x9999999a
 8002e7c:	3fb99999 	.word	0x3fb99999
 8002e80:	41200000 	.word	0x41200000
 8002e84:	461c4000 	.word	0x461c4000
 8002e88:	43b40000 	.word	0x43b40000
 8002e8c:	3e2aaac1 	.word	0x3e2aaac1
 8002e90:	4326aaab 	.word	0x4326aaab

08002e94 <MotorInfoConverter>:

void MotorInfoConverter(struct StatusInformation *info)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	//float _gear_ratio = 1;
	float _gear_ratio = 10; // SKKU AVANTE Gear Ratio 1 : 10
 8002e9c:	4b67      	ldr	r3, [pc, #412]	; (800303c <MotorInfoConverter+0x1a8>)
 8002e9e:	61fb      	str	r3, [r7, #28]
	float _motor_pulse = 10000;
 8002ea0:	4b67      	ldr	r3, [pc, #412]	; (8003040 <MotorInfoConverter+0x1ac>)
 8002ea2:	61bb      	str	r3, [r7, #24]
	float _motor_gear_ratio = _motor_pulse * _gear_ratio / 360;
 8002ea4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ea8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003044 <MotorInfoConverter+0x1b0>
 8002eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eb8:	edc7 7a05 	vstr	s15, [r7, #20]
	float _deg_to_rpm = 0.166667;
 8002ebc:	4b62      	ldr	r3, [pc, #392]	; (8003048 <MotorInfoConverter+0x1b4>)
 8002ebe:	613b      	str	r3, [r7, #16]
	float _rpm_to_pulse = 166.66666667;
 8002ec0:	4b62      	ldr	r3, [pc, #392]	; (800304c <MotorInfoConverter+0x1b8>)
 8002ec2:	60fb      	str	r3, [r7, #12]

	info->pos_int32 = (info->pos_vel_raw[3] << 24) | (info->pos_vel_raw[2] << 16) | (info->pos_vel_raw[1] << 8) | (info->pos_vel_raw[0]);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7fdb      	ldrb	r3, [r3, #31]
 8002ec8:	061a      	lsls	r2, r3, #24
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7f9b      	ldrb	r3, [r3, #30]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7f5b      	ldrb	r3, [r3, #29]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	7f12      	ldrb	r2, [r2, #28]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	605a      	str	r2, [r3, #4]
	info->pos_float = (float)info->pos_int32;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	edc3 7a02 	vstr	s15, [r3, #8]
	info->pos_float = info->pos_float / _motor_gear_ratio * 10;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	edd3 6a02 	vldr	s13, [r3, #8]
 8002efc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	edc3 7a02 	vstr	s15, [r3, #8]
	info->pos_int32 = (int32_t)info->pos_float;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1c:	ee17 2a90 	vmov	r2, s15
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	605a      	str	r2, [r3, #4]
	info->pos_vel_curr_tor[0] = info->pos_int32;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	751a      	strb	r2, [r3, #20]
	info->pos_vel_curr_tor[1] = info->pos_int32 >> 8;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	121b      	asrs	r3, r3, #8
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	755a      	strb	r2, [r3, #21]

	info->vel_int32 = (info->pos_vel_raw[7] << 24) | (info->pos_vel_raw[6] << 16) | (info->pos_vel_raw[5] << 8) | (info->pos_vel_raw[4]);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f40:	061a      	lsls	r2, r3, #24
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	4313      	orrs	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60da      	str	r2, [r3, #12]
	info->vel_float = (float)info->vel_int32;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	edc3 7a04 	vstr	s15, [r3, #16]
	info->vel_float = info->vel_float /_rpm_to_pulse / _deg_to_rpm / _gear_ratio;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	edd3 6a04 	vldr	s13, [r3, #16]
 8002f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	edc3 7a04 	vstr	s15, [r3, #16]
	info->vel_int32 = (int32_t)info->vel_float;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fa2:	ee17 2a90 	vmov	r2, s15
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60da      	str	r2, [r3, #12]
	info->pos_vel_curr_tor[2] = info->vel_int32;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	759a      	strb	r2, [r3, #22]
	info->pos_vel_curr_tor[3] = info->vel_int32 >> 8;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	121b      	asrs	r3, r3, #8
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	75da      	strb	r2, [r3, #23]

	/* torque */
	info->pos_vel_curr_tor[4] = info->tor_curr_raw[0];
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	761a      	strb	r2, [r3, #24]
	info->pos_vel_curr_tor[5] = info->tor_curr_raw[1];
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	765a      	strb	r2, [r3, #25]
	/* current */
	info->pos_vel_curr_tor[6] = info->tor_curr_raw[2];
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	769a      	strb	r2, [r3, #26]
	info->pos_vel_curr_tor[7] = info->tor_curr_raw[3];
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	76da      	strb	r2, [r3, #27]

	info->status[0] = info->auto_mode;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	info->status[1] = info->servo_on_off;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	info->status[2] = info->status_raw[0];
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	info->status[3] = info->status_raw[1];
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	info->status[4] = info->status_raw[2];
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	info->status[5] = info->status_raw[3];
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

}
 8003030:	bf00      	nop
 8003032:	3724      	adds	r7, #36	; 0x24
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	41200000 	.word	0x41200000
 8003040:	461c4000 	.word	0x461c4000
 8003044:	43b40000 	.word	0x43b40000
 8003048:	3e2aaac1 	.word	0x3e2aaac1
 800304c:	4326aaab 	.word	0x4326aaab

08003050 <MotorInitCommand>:

void MotorInitCommand(uint32_t id, uint32_t length, uint8_t *data)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	Can_Tx_Header_can2.Identifier = id;
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <MotorInitCommand+0x3c>)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6013      	str	r3, [r2, #0]
	Can_Tx_Header_can2.IdType = FDCAN_STANDARD_ID;
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <MotorInitCommand+0x3c>)
 8003064:	2200      	movs	r2, #0
 8003066:	605a      	str	r2, [r3, #4]
	Can_Tx_Header_can2.TxFrameType = FDCAN_DATA_FRAME;
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <MotorInitCommand+0x3c>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
	Can_Tx_Header_can2.FDFormat = FDCAN_FRAME_CLASSIC;
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <MotorInitCommand+0x3c>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
	Can_Tx_Header_can2.DataLength = length;
 8003074:	4a05      	ldr	r2, [pc, #20]	; (800308c <MotorInitCommand+0x3c>)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	60d3      	str	r3, [r2, #12]

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Can_Tx_Header_can2, data);
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <MotorInitCommand+0x3c>)
 800307e:	4804      	ldr	r0, [pc, #16]	; (8003090 <MotorInitCommand+0x40>)
 8003080:	f001 fae9 	bl	8004656 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20002e6c 	.word	0x20002e6c
 8003090:	20002f24 	.word	0x20002f24

08003094 <MotorSetCommand>:

void MotorSetCommand(uint32_t id, uint32_t length, uint8_t *data, uint8_t *flag)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
	if(*flag) {
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01a      	beq.n	80030e0 <MotorSetCommand+0x4c>
		Can_Tx_Header_can2.Identifier = id;
 80030aa:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <MotorSetCommand+0x54>)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6013      	str	r3, [r2, #0]
		Can_Tx_Header_can2.IdType = FDCAN_STANDARD_ID;
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <MotorSetCommand+0x54>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
		Can_Tx_Header_can2.TxFrameType = FDCAN_DATA_FRAME;
 80030b6:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <MotorSetCommand+0x54>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
		Can_Tx_Header_can2.FDFormat = FDCAN_FRAME_CLASSIC;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <MotorSetCommand+0x54>)
 80030be:	2200      	movs	r2, #0
 80030c0:	619a      	str	r2, [r3, #24]
		Can_Tx_Header_can2.DataLength = length;
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <MotorSetCommand+0x54>)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	60d3      	str	r3, [r2, #12]
		Can_Tx_Header_can2.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <MotorSetCommand+0x54>)
 80030ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030ce:	61da      	str	r2, [r3, #28]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Can_Tx_Header_can2, data);
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4905      	ldr	r1, [pc, #20]	; (80030e8 <MotorSetCommand+0x54>)
 80030d4:	4805      	ldr	r0, [pc, #20]	; (80030ec <MotorSetCommand+0x58>)
 80030d6:	f001 fabe 	bl	8004656 <HAL_FDCAN_AddMessageToTxFifoQ>

		(*flag) = FALSE;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
	}
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20002e6c 	.word	0x20002e6c
 80030ec:	20002f24 	.word	0x20002f24

080030f0 <MotorControlCommand>:

void MotorControlCommand(uint32_t id, uint32_t length, uint8_t *data, uint8_t *flag)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
	if(*flag) {
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01a      	beq.n	800313c <MotorControlCommand+0x4c>
		Can_Tx_Header_can2.Identifier = id;
 8003106:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <MotorControlCommand+0x54>)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6013      	str	r3, [r2, #0]
		Can_Tx_Header_can2.IdType = FDCAN_STANDARD_ID;
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <MotorControlCommand+0x54>)
 800310e:	2200      	movs	r2, #0
 8003110:	605a      	str	r2, [r3, #4]
		Can_Tx_Header_can2.TxFrameType = FDCAN_DATA_FRAME;
 8003112:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <MotorControlCommand+0x54>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
		Can_Tx_Header_can2.FDFormat = FDCAN_FRAME_CLASSIC;
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <MotorControlCommand+0x54>)
 800311a:	2200      	movs	r2, #0
 800311c:	619a      	str	r2, [r3, #24]
		Can_Tx_Header_can2.DataLength = length;
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <MotorControlCommand+0x54>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
		Can_Tx_Header_can2.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <MotorControlCommand+0x54>)
 8003126:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800312a:	61da      	str	r2, [r3, #28]

		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &Can_Tx_Header_can2, data);
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4905      	ldr	r1, [pc, #20]	; (8003144 <MotorControlCommand+0x54>)
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <MotorControlCommand+0x58>)
 8003132:	f001 fa90 	bl	8004656 <HAL_FDCAN_AddMessageToTxFifoQ>

		(*flag) = FALSE;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
	}
}
 800313c:	bf00      	nop
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20002e6c 	.word	0x20002e6c
 8003148:	20002f24 	.word	0x20002f24

0800314c <CanErrorCheck>:

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Can_Tx_Header_can1, data);
}

void CanErrorCheck(FDCAN_HandleTypeDef *hfdcan, uint8_t *error_count)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
	uint8_t _error_state = (hfdcan->ErrorCode & 0x200) >> 9;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	0a5b      	lsrs	r3, r3, #9
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]

	if(_error_state) {
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01d      	beq.n	80031a6 <CanErrorCheck+0x5a>
		if((*error_count) == 10) {
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b0a      	cmp	r3, #10
 8003170:	d103      	bne.n	800317a <CanErrorCheck+0x2e>
			if((HAL_FDCAN_Stop(hfdcan)) != HAL_OK) {
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f001 f9ff 	bl	8004576 <HAL_FDCAN_Stop>
 8003178:	e006      	b.n	8003188 <CanErrorCheck+0x3c>
			}
		} else if( (*error_count) > 10) {
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b0a      	cmp	r3, #10
 8003180:	d902      	bls.n	8003188 <CanErrorCheck+0x3c>
			if( HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f001 f9cf 	bl	8004526 <HAL_FDCAN_Start>
			}
		}

		if((*error_count) < 15) {
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b0e      	cmp	r3, #14
 800318e:	d806      	bhi.n	800319e <CanErrorCheck+0x52>
			(*error_count)++;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	b2da      	uxtb	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	701a      	strb	r2, [r3, #0]
		}

	} else {
		(*error_count) = 0;
	}
}
 800319c:	e006      	b.n	80031ac <CanErrorCheck+0x60>
			(*error_count) = 0;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
}
 80031a4:	e002      	b.n	80031ac <CanErrorCheck+0x60>
		(*error_count) = 0;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <MotorSequnceTimer>:

void MotorSequnceTimer(uint8_t *count, uint8_t init, uint8_t max)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
 80031c0:	4613      	mov	r3, r2
 80031c2:	70bb      	strb	r3, [r7, #2]
	if( ++(*count) == max) {
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	78ba      	ldrb	r2, [r7, #2]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d102      	bne.n	80031e0 <MotorSequnceTimer+0x2c>
		(*count) = init;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	701a      	strb	r2, [r3, #0]
	}
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_MspInit+0x4c>)
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_MspInit+0x4c>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6613      	str	r3, [r2, #96]	; 0x60
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_MspInit+0x4c>)
 8003200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_MspInit+0x4c>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_MspInit+0x4c>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6593      	str	r3, [r2, #88]	; 0x58
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_MspInit+0x4c>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	210f      	movs	r1, #15
 8003226:	f06f 0001 	mvn.w	r0, #1
 800322a:	f000 fc3d 	bl	8003aa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000

0800323c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b0a2      	sub	sp, #136	; 0x88
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003254:	f107 0320 	add.w	r3, r7, #32
 8003258:	2254      	movs	r2, #84	; 0x54
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f006 f9b5 	bl	80095cc <memset>
  if(hfdcan->Instance==FDCAN1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a7a      	ldr	r2, [pc, #488]	; (8003450 <HAL_FDCAN_MspInit+0x214>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d14b      	bne.n	8003304 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800326c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003270:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003276:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003278:	f107 0320 	add.w	r3, r7, #32
 800327c:	4618      	mov	r0, r3
 800327e:	f002 fdfb 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003288:	f7fe fc50 	bl	8001b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800328c:	4b71      	ldr	r3, [pc, #452]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a70      	ldr	r2, [pc, #448]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 8003294:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003296:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10b      	bne.n	80032b6 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800329e:	4b6e      	ldr	r3, [pc, #440]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	4a6d      	ldr	r2, [pc, #436]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80032a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032a8:	6593      	str	r3, [r2, #88]	; 0x58
 80032aa:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032b6:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	4a67      	ldr	r2, [pc, #412]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80032bc:	f043 0308 	orr.w	r3, r3, #8
 80032c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032ce:	2303      	movs	r3, #3
 80032d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80032e0:	2309      	movs	r3, #9
 80032e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032ea:	4619      	mov	r1, r3
 80032ec:	485b      	ldr	r0, [pc, #364]	; (800345c <HAL_FDCAN_MspInit+0x220>)
 80032ee:	f001 fe37 	bl	8004f60 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2105      	movs	r1, #5
 80032f6:	2015      	movs	r0, #21
 80032f8:	f000 fbd6 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80032fc:	2015      	movs	r0, #21
 80032fe:	f000 fbed 	bl	8003adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003302:	e0a0      	b.n	8003446 <HAL_FDCAN_MspInit+0x20a>
  else if(hfdcan->Instance==FDCAN2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a55      	ldr	r2, [pc, #340]	; (8003460 <HAL_FDCAN_MspInit+0x224>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d14b      	bne.n	80033a6 <HAL_FDCAN_MspInit+0x16a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800330e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003312:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003318:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800331a:	f107 0320 	add.w	r3, r7, #32
 800331e:	4618      	mov	r0, r3
 8003320:	f002 fdaa 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_FDCAN_MspInit+0xf2>
      Error_Handler();
 800332a:	f7fe fbff 	bl	8001b2c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800332e:	4b49      	ldr	r3, [pc, #292]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	4a47      	ldr	r2, [pc, #284]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 8003336:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d10b      	bne.n	8003358 <HAL_FDCAN_MspInit+0x11c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003340:	4b45      	ldr	r3, [pc, #276]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	4a44      	ldr	r2, [pc, #272]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 8003346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800334a:	6593      	str	r3, [r2, #88]	; 0x58
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003358:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	4a3e      	ldr	r2, [pc, #248]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003364:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003370:	2360      	movs	r3, #96	; 0x60
 8003372:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337c:	2300      	movs	r3, #0
 800337e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003382:	2309      	movs	r3, #9
 8003384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800338c:	4619      	mov	r1, r3
 800338e:	4835      	ldr	r0, [pc, #212]	; (8003464 <HAL_FDCAN_MspInit+0x228>)
 8003390:	f001 fde6 	bl	8004f60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2105      	movs	r1, #5
 8003398:	2056      	movs	r0, #86	; 0x56
 800339a:	f000 fb85 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 800339e:	2056      	movs	r0, #86	; 0x56
 80033a0:	f000 fb9c 	bl	8003adc <HAL_NVIC_EnableIRQ>
}
 80033a4:	e04f      	b.n	8003446 <HAL_FDCAN_MspInit+0x20a>
  else if(hfdcan->Instance==FDCAN3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <HAL_FDCAN_MspInit+0x22c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d14a      	bne.n	8003446 <HAL_FDCAN_MspInit+0x20a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80033b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80033b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ba:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033bc:	f107 0320 	add.w	r3, r7, #32
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 fd59 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_FDCAN_MspInit+0x194>
      Error_Handler();
 80033cc:	f7fe fbae 	bl	8001b2c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3301      	adds	r3, #1
 80033d6:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 80033d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80033da:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <HAL_FDCAN_MspInit+0x218>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10b      	bne.n	80033fa <HAL_FDCAN_MspInit+0x1be>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ec:	6593      	str	r3, [r2, #88]	; 0x58
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80033f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	4a16      	ldr	r2, [pc, #88]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_FDCAN_MspInit+0x21c>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003412:	2318      	movs	r3, #24
 8003414:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8003424:	230b      	movs	r3, #11
 8003426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800342e:	4619      	mov	r1, r3
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <HAL_FDCAN_MspInit+0x228>)
 8003432:	f001 fd95 	bl	8004f60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 5, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2105      	movs	r1, #5
 800343a:	2058      	movs	r0, #88	; 0x58
 800343c:	f000 fb34 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8003440:	2058      	movs	r0, #88	; 0x58
 8003442:	f000 fb4b 	bl	8003adc <HAL_NVIC_EnableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3788      	adds	r7, #136	; 0x88
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40006400 	.word	0x40006400
 8003454:	200002f8 	.word	0x200002f8
 8003458:	40021000 	.word	0x40021000
 800345c:	48000c00 	.word	0x48000c00
 8003460:	40006800 	.word	0x40006800
 8003464:	48000400 	.word	0x48000400
 8003468:	40006c00 	.word	0x40006c00

0800346c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b09e      	sub	sp, #120	; 0x78
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	f107 0310 	add.w	r3, r7, #16
 8003488:	2254      	movs	r2, #84	; 0x54
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f006 f89d 	bl	80095cc <memset>
  if(huart->Instance==USART1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_UART_MspInit+0x160>)
 8003498:	4293      	cmp	r3, r2
 800349a:	f040 8092 	bne.w	80035c2 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800349e:	2301      	movs	r3, #1
 80034a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a6:	f107 0310 	add.w	r3, r7, #16
 80034aa:	4618      	mov	r0, r3
 80034ac:	f002 fce4 	bl	8005e78 <HAL_RCCEx_PeriphCLKConfig>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80034b6:	f7fe fb39 	bl	8001b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ba:	4b45      	ldr	r3, [pc, #276]	; (80035d0 <HAL_UART_MspInit+0x164>)
 80034bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034be:	4a44      	ldr	r2, [pc, #272]	; (80035d0 <HAL_UART_MspInit+0x164>)
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c4:	6613      	str	r3, [r2, #96]	; 0x60
 80034c6:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <HAL_UART_MspInit+0x164>)
 80034c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <HAL_UART_MspInit+0x164>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	4a3e      	ldr	r2, [pc, #248]	; (80035d0 <HAL_UART_MspInit+0x164>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034de:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <HAL_UART_MspInit+0x164>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034fc:	2307      	movs	r3, #7
 80034fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003504:	4619      	mov	r1, r3
 8003506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800350a:	f001 fd29 	bl	8004f60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800350e:	4b31      	ldr	r3, [pc, #196]	; (80035d4 <HAL_UART_MspInit+0x168>)
 8003510:	4a31      	ldr	r2, [pc, #196]	; (80035d8 <HAL_UART_MspInit+0x16c>)
 8003512:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_UART_MspInit+0x168>)
 8003516:	2218      	movs	r2, #24
 8003518:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800351a:	4b2e      	ldr	r3, [pc, #184]	; (80035d4 <HAL_UART_MspInit+0x168>)
 800351c:	2200      	movs	r2, #0
 800351e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003520:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <HAL_UART_MspInit+0x168>)
 8003522:	2200      	movs	r2, #0
 8003524:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003526:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_UART_MspInit+0x168>)
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800352c:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_UART_MspInit+0x168>)
 800352e:	2200      	movs	r2, #0
 8003530:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003532:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_UART_MspInit+0x168>)
 8003534:	2200      	movs	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_UART_MspInit+0x168>)
 800353a:	2200      	movs	r2, #0
 800353c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <HAL_UART_MspInit+0x168>)
 8003540:	2200      	movs	r2, #0
 8003542:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003544:	4823      	ldr	r0, [pc, #140]	; (80035d4 <HAL_UART_MspInit+0x168>)
 8003546:	f000 fad7 	bl	8003af8 <HAL_DMA_Init>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8003550:	f7fe faec 	bl	8001b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <HAL_UART_MspInit+0x168>)
 8003558:	67da      	str	r2, [r3, #124]	; 0x7c
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_UART_MspInit+0x168>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <HAL_UART_MspInit+0x170>)
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <HAL_UART_MspInit+0x174>)
 8003564:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_UART_MspInit+0x170>)
 8003568:	2219      	movs	r2, #25
 800356a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_UART_MspInit+0x170>)
 800356e:	2210      	movs	r2, #16
 8003570:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_UART_MspInit+0x170>)
 8003574:	2200      	movs	r2, #0
 8003576:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_UART_MspInit+0x170>)
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800357e:	4b17      	ldr	r3, [pc, #92]	; (80035dc <HAL_UART_MspInit+0x170>)
 8003580:	2200      	movs	r2, #0
 8003582:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_UART_MspInit+0x170>)
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_UART_MspInit+0x170>)
 800358c:	2200      	movs	r2, #0
 800358e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_UART_MspInit+0x170>)
 8003592:	2200      	movs	r2, #0
 8003594:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003596:	4811      	ldr	r0, [pc, #68]	; (80035dc <HAL_UART_MspInit+0x170>)
 8003598:	f000 faae 	bl	8003af8 <HAL_DMA_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80035a2:	f7fe fac3 	bl	8001b2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <HAL_UART_MspInit+0x170>)
 80035aa:	679a      	str	r2, [r3, #120]	; 0x78
 80035ac:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <HAL_UART_MspInit+0x170>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2105      	movs	r1, #5
 80035b6:	2025      	movs	r0, #37	; 0x25
 80035b8:	f000 fa76 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035bc:	2025      	movs	r0, #37	; 0x25
 80035be:	f000 fa8d 	bl	8003adc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035c2:	bf00      	nop
 80035c4:	3778      	adds	r7, #120	; 0x78
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40013800 	.word	0x40013800
 80035d0:	40021000 	.word	0x40021000
 80035d4:	20002b7c 	.word	0x20002b7c
 80035d8:	40020008 	.word	0x40020008
 80035dc:	20002af8 	.word	0x20002af8
 80035e0:	4002001c 	.word	0x4002001c

080035e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08c      	sub	sp, #48	; 0x30
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80035f4:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_InitTick+0xc4>)
 80035f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f8:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <HAL_InitTick+0xc4>)
 80035fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035fe:	6613      	str	r3, [r2, #96]	; 0x60
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_InitTick+0xc4>)
 8003602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800360c:	f107 020c 	add.w	r2, r7, #12
 8003610:	f107 0310 	add.w	r3, r7, #16
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f002 fbb6 	bl	8005d88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800361c:	f002 fb9e 	bl	8005d5c <HAL_RCC_GetPCLK2Freq>
 8003620:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	4a21      	ldr	r2, [pc, #132]	; (80036ac <HAL_InitTick+0xc8>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9b      	lsrs	r3, r3, #18
 800362c:	3b01      	subs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <HAL_InitTick+0xcc>)
 8003632:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_InitTick+0xd0>)
 8003634:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003636:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <HAL_InitTick+0xcc>)
 8003638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800363c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800363e:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <HAL_InitTick+0xcc>)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <HAL_InitTick+0xcc>)
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_InitTick+0xcc>)
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8003650:	4817      	ldr	r0, [pc, #92]	; (80036b0 <HAL_InitTick+0xcc>)
 8003652:	f002 fe5f 	bl	8006314 <HAL_TIM_Base_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800365c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11b      	bne.n	800369c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003664:	4812      	ldr	r0, [pc, #72]	; (80036b0 <HAL_InitTick+0xcc>)
 8003666:	f002 feb7 	bl	80063d8 <HAL_TIM_Base_Start_IT>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003678:	2019      	movs	r0, #25
 800367a:	f000 fa2f 	bl	8003adc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b0f      	cmp	r3, #15
 8003682:	d808      	bhi.n	8003696 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003684:	2200      	movs	r2, #0
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	2019      	movs	r0, #25
 800368a:	f000 fa0d 	bl	8003aa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800368e:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <HAL_InitTick+0xd4>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e002      	b.n	800369c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800369c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3730      	adds	r7, #48	; 0x30
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	431bde83 	.word	0x431bde83
 80036b0:	20002fdc 	.word	0x20002fdc
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	2000027c 	.word	0x2000027c

080036bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036c0:	e7fe      	b.n	80036c0 <NMI_Handler+0x4>

080036c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036c6:	e7fe      	b.n	80036c6 <HardFault_Handler+0x4>

080036c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036cc:	e7fe      	b.n	80036cc <MemManage_Handler+0x4>

080036ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036d2:	e7fe      	b.n	80036d2 <BusFault_Handler+0x4>

080036d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d8:	e7fe      	b.n	80036d8 <UsageFault_Handler+0x4>

080036da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <DMA1_Channel1_IRQHandler+0x10>)
 80036ee:	f000 fbe6 	bl	8003ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20002b7c 	.word	0x20002b7c

080036fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <DMA1_Channel2_IRQHandler+0x10>)
 8003702:	f000 fbdc 	bl	8003ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20002af8 	.word	0x20002af8

08003710 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003714:	4802      	ldr	r0, [pc, #8]	; (8003720 <FDCAN1_IT0_IRQHandler+0x10>)
 8003716:	f001 f9a3 	bl	8004a60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20002d54 	.word	0x20002d54

08003724 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003728:	4802      	ldr	r0, [pc, #8]	; (8003734 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800372a:	f002 fecd 	bl	80064c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20002fdc 	.word	0x20002fdc

08003738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800373c:	4802      	ldr	r0, [pc, #8]	; (8003748 <USART1_IRQHandler+0x10>)
 800373e:	f003 f9a9 	bl	8006a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20002c70 	.word	0x20002c70

0800374c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003750:	4802      	ldr	r0, [pc, #8]	; (800375c <FDCAN2_IT0_IRQHandler+0x10>)
 8003752:	f001 f985 	bl	8004a60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20002f24 	.word	0x20002f24

08003760 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8003764:	4802      	ldr	r0, [pc, #8]	; (8003770 <FDCAN3_IT0_IRQHandler+0x10>)
 8003766:	f001 f97b 	bl	8004a60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20002a2c 	.word	0x20002a2c

08003774 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <SystemInit+0x20>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	4a05      	ldr	r2, [pc, #20]	; (8003794 <SystemInit+0x20>)
 8003780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <SequenceTimer>:

/******************************************************************************/
/*                              Treeze Function                               */
/******************************************************************************/
void SequenceTimer(uint8_t *timer, uint8_t init, uint8_t max)
{	/* Function Description : SequnceTimer For CAN */
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
 80037a4:	4613      	mov	r3, r2
 80037a6:	70bb      	strb	r3, [r7, #2]
	if (++(*timer) == max) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	78ba      	ldrb	r2, [r7, #2]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d102      	bne.n	80037c4 <SequenceTimer+0x2c>
		(*timer) = init;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	701a      	strb	r2, [r3, #0]
	}
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_UARTEx_RxEventCallback>:
/*                              UART_Callback                                 */
/******************************************************************************/
uint8_t test_buffer[8];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a08      	ldr	r2, [pc, #32]	; (8003804 <HAL_UARTEx_RxEventCallback+0x34>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10a      	bne.n	80037fc <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy (test_buffer, uart.rx_buffer, 8);
 80037e6:	4b08      	ldr	r3, [pc, #32]	; (8003808 <HAL_UARTEx_RxEventCallback+0x38>)
 80037e8:	4a08      	ldr	r2, [pc, #32]	; (800380c <HAL_UARTEx_RxEventCallback+0x3c>)
 80037ea:	6811      	ldr	r1, [r2, #0]
 80037ec:	6852      	ldr	r2, [r2, #4]
 80037ee:	6019      	str	r1, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]

		//HAL_UART_Transmit_DMA(&huart1, uart.tx_buffer, 5);

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart.rx_buffer, 8);
 80037f2:	2208      	movs	r2, #8
 80037f4:	4905      	ldr	r1, [pc, #20]	; (800380c <HAL_UARTEx_RxEventCallback+0x3c>)
 80037f6:	4806      	ldr	r0, [pc, #24]	; (8003810 <HAL_UARTEx_RxEventCallback+0x40>)
 80037f8:	f004 fc86 	bl	8008108 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40013800 	.word	0x40013800
 8003808:	20003028 	.word	0x20003028
 800380c:	20002f10 	.word	0x20002f10
 8003810:	20002c70 	.word	0x20002c70

08003814 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	//Flag Clear
	uart.tx_done_flag = FALSE;
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_UART_TxCpltCallback+0x1c>)
 800381e:	2200      	movs	r2, #0
 8003820:	741a      	strb	r2, [r3, #16]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	20002f10 	.word	0x20002f10

08003834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003834:	480d      	ldr	r0, [pc, #52]	; (800386c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003836:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003838:	480d      	ldr	r0, [pc, #52]	; (8003870 <LoopForever+0x6>)
  ldr r1, =_edata
 800383a:	490e      	ldr	r1, [pc, #56]	; (8003874 <LoopForever+0xa>)
  ldr r2, =_sidata
 800383c:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <LoopForever+0xe>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003840:	e002      	b.n	8003848 <LoopCopyDataInit>

08003842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003846:	3304      	adds	r3, #4

08003848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800384a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800384c:	d3f9      	bcc.n	8003842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384e:	4a0b      	ldr	r2, [pc, #44]	; (800387c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003850:	4c0b      	ldr	r4, [pc, #44]	; (8003880 <LoopForever+0x16>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003854:	e001      	b.n	800385a <LoopFillZerobss>

08003856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003858:	3204      	adds	r2, #4

0800385a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800385a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800385c:	d3fb      	bcc.n	8003856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800385e:	f7ff ff89 	bl	8003774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003862:	f005 ff11 	bl	8009688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003866:	f7fd fe61 	bl	800152c <main>

0800386a <LoopForever>:

LoopForever:
    b LoopForever
 800386a:	e7fe      	b.n	800386a <LoopForever>
  ldr   r0, =_estack
 800386c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003874:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8003878:	0800988c 	.word	0x0800988c
  ldr r2, =_sbss
 800387c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8003880:	20003034 	.word	0x20003034

08003884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003884:	e7fe      	b.n	8003884 <ADC1_2_IRQHandler>

08003886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003890:	2003      	movs	r0, #3
 8003892:	f000 f8fe 	bl	8003a92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003896:	200f      	movs	r0, #15
 8003898:	f7ff fea4 	bl	80035e4 <HAL_InitTick>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	71fb      	strb	r3, [r7, #7]
 80038a6:	e001      	b.n	80038ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038a8:	f7ff fca0 	bl	80031ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038ac:	79fb      	ldrb	r3, [r7, #7]

}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_IncTick+0x1c>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_IncTick+0x20>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4413      	add	r3, r2
 80038c6:	4a03      	ldr	r2, [pc, #12]	; (80038d4 <HAL_IncTick+0x1c>)
 80038c8:	6013      	str	r3, [r2, #0]
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	20003030 	.word	0x20003030
 80038d8:	20000280 	.word	0x20000280

080038dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return uwTick;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_GetTick+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20003030 	.word	0x20003030

080038f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038fc:	f7ff ffee 	bl	80038dc <HAL_GetTick>
 8003900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d004      	beq.n	8003918 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_Delay+0x40>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003918:	bf00      	nop
 800391a:	f7ff ffdf 	bl	80038dc <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	429a      	cmp	r2, r3
 8003928:	d8f7      	bhi.n	800391a <HAL_Delay+0x26>
  {
  }
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000280 	.word	0x20000280

08003938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60d3      	str	r3, [r2, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <__NVIC_GetPriorityGrouping+0x18>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	f003 0307 	and.w	r3, r3, #7
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db0b      	blt.n	80039c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	4907      	ldr	r1, [pc, #28]	; (80039d4 <__NVIC_EnableIRQ+0x38>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2001      	movs	r0, #1
 80039be:	fa00 f202 	lsl.w	r2, r0, r2
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db0a      	blt.n	8003a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <__NVIC_SetPriority+0x4c>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	0112      	lsls	r2, r2, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	440b      	add	r3, r1
 80039fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a00:	e00a      	b.n	8003a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4908      	ldr	r1, [pc, #32]	; (8003a28 <__NVIC_SetPriority+0x50>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	761a      	strb	r2, [r3, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000e100 	.word	0xe000e100
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f1c3 0307 	rsb	r3, r3, #7
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	bf28      	it	cs
 8003a4a:	2304      	movcs	r3, #4
 8003a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d902      	bls.n	8003a5c <NVIC_EncodePriority+0x30>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3b03      	subs	r3, #3
 8003a5a:	e000      	b.n	8003a5e <NVIC_EncodePriority+0x32>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43d9      	mvns	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	4313      	orrs	r3, r2
         );
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff4c 	bl	8003938 <__NVIC_SetPriorityGrouping>
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab6:	f7ff ff63 	bl	8003980 <__NVIC_GetPriorityGrouping>
 8003aba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	6978      	ldr	r0, [r7, #20]
 8003ac2:	f7ff ffb3 	bl	8003a2c <NVIC_EncodePriority>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ff82 	bl	80039d8 <__NVIC_SetPriority>
}
 8003ad4:	bf00      	nop
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff56 	bl	800399c <__NVIC_EnableIRQ>
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e08d      	b.n	8003c26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_DMA_Init+0x138>)
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d80f      	bhi.n	8003b36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b45      	ldr	r3, [pc, #276]	; (8003c34 <HAL_DMA_Init+0x13c>)
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a45      	ldr	r2, [pc, #276]	; (8003c38 <HAL_DMA_Init+0x140>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	009a      	lsls	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a42      	ldr	r2, [pc, #264]	; (8003c3c <HAL_DMA_Init+0x144>)
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
 8003b34:	e00e      	b.n	8003b54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <HAL_DMA_Init+0x148>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a3d      	ldr	r2, [pc, #244]	; (8003c38 <HAL_DMA_Init+0x140>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	009a      	lsls	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a3c      	ldr	r2, [pc, #240]	; (8003c44 <HAL_DMA_Init+0x14c>)
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa76 	bl	8004098 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb4:	d102      	bne.n	8003bbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bd0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d010      	beq.n	8003bfc <HAL_DMA_Init+0x104>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d80c      	bhi.n	8003bfc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa96 	bl	8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	e008      	b.n	8003c0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40020407 	.word	0x40020407
 8003c34:	bffdfff8 	.word	0xbffdfff8
 8003c38:	cccccccd 	.word	0xcccccccd
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	bffdfbf8 	.word	0xbffdfbf8
 8003c44:	40020400 	.word	0x40020400

08003c48 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_DMA_Start_IT+0x20>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e066      	b.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d155      	bne.n	8003d28 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f9bb 	bl	800401c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 020e 	orr.w	r2, r2, #14
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e00f      	b.n	8003ce0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0204 	bic.w	r2, r2, #4
 8003cce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 020a 	orr.w	r2, r2, #10
 8003cde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d14:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e005      	b.n	8003d34 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
 8003d32:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d005      	beq.n	8003d62 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
 8003d60:	e037      	b.n	8003dd2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 020e 	bic.w	r2, r2, #14
 8003d70:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d80:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f003 021f 	and.w	r2, r3, #31
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dd0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d00d      	beq.n	8003e24 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	e047      	b.n	8003eb4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 020e 	bic.w	r2, r2, #14
 8003e32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	f003 021f 	and.w	r2, r3, #31
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	2101      	movs	r1, #1
 8003e62:	fa01 f202 	lsl.w	r2, r1, r2
 8003e66:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
    }
  }
  return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2204      	movs	r2, #4
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d026      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x7a>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d021      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d107      	bne.n	8003f12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0204 	bic.w	r2, r2, #4
 8003f10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f003 021f 	and.w	r2, r3, #31
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	2104      	movs	r1, #4
 8003f20:	fa01 f202 	lsl.w	r2, r1, r2
 8003f24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d071      	beq.n	8004012 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f36:	e06c      	b.n	8004012 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2202      	movs	r2, #2
 8003f42:	409a      	lsls	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02e      	beq.n	8003faa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d029      	beq.n	8003faa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 020a 	bic.w	r2, r2, #10
 8003f72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	2102      	movs	r1, #2
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d038      	beq.n	8004012 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fa8:	e033      	b.n	8004012 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02a      	beq.n	8004014 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d025      	beq.n	8004014 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 020e 	bic.w	r2, r2, #14
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	f003 021f 	and.w	r2, r3, #31
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004012:	bf00      	nop
 8004014:	bf00      	nop
}
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004032:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004044:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f003 021f 	and.w	r2, r3, #31
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2101      	movs	r1, #1
 8004054:	fa01 f202 	lsl.w	r2, r1, r2
 8004058:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b10      	cmp	r3, #16
 8004068:	d108      	bne.n	800407c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800407a:	e007      	b.n	800408c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d802      	bhi.n	80040b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e001      	b.n	80040b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040b4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	3b08      	subs	r3, #8
 80040c2:	4a12      	ldr	r2, [pc, #72]	; (800410c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4413      	add	r3, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	2201      	movs	r2, #1
 80040ec:	409a      	lsls	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40020407 	.word	0x40020407
 8004104:	40020800 	.word	0x40020800
 8004108:	40020820 	.word	0x40020820
 800410c:	cccccccd 	.word	0xcccccccd
 8004110:	40020880 	.word	0x40020880

08004114 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a08      	ldr	r2, [pc, #32]	; (8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004136:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2201      	movs	r2, #1
 8004142:	409a      	lsls	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	1000823f 	.word	0x1000823f
 8004158:	40020940 	.word	0x40020940

0800415c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e147      	b.n	80043fe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff f85a 	bl	800323c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0210 	bic.w	r2, r2, #16
 8004196:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004198:	f7ff fba0 	bl	80038dc <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800419e:	e012      	b.n	80041c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041a0:	f7ff fb9c 	bl	80038dc <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b0a      	cmp	r3, #10
 80041ac:	d90b      	bls.n	80041c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b2:	f043 0201 	orr.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2203      	movs	r2, #3
 80041be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e11b      	b.n	80043fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d0e5      	beq.n	80041a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041e4:	f7ff fb7a 	bl	80038dc <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041ea:	e012      	b.n	8004212 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041ec:	f7ff fb76 	bl	80038dc <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b0a      	cmp	r3, #10
 80041f8:	d90b      	bls.n	8004212 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2203      	movs	r2, #3
 800420a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0f5      	b.n	80043fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0e5      	beq.n	80041ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0202 	orr.w	r2, r2, #2
 800422e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a74      	ldr	r2, [pc, #464]	; (8004408 <HAL_FDCAN_Init+0x2ac>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d103      	bne.n	8004242 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800423a:	4a74      	ldr	r2, [pc, #464]	; (800440c <HAL_FDCAN_Init+0x2b0>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	7c1b      	ldrb	r3, [r3, #16]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d108      	bne.n	800425c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004258:	619a      	str	r2, [r3, #24]
 800425a:	e007      	b.n	800426c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7c5b      	ldrb	r3, [r3, #17]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d108      	bne.n	8004286 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004282:	619a      	str	r2, [r3, #24]
 8004284:	e007      	b.n	8004296 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004294:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7c9b      	ldrb	r3, [r3, #18]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d108      	bne.n	80042b0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ac:	619a      	str	r2, [r3, #24]
 80042ae:	e007      	b.n	80042c0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80042e4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0210 	bic.w	r2, r2, #16
 80042f4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d108      	bne.n	8004310 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0204 	orr.w	r2, r2, #4
 800430c:	619a      	str	r2, [r3, #24]
 800430e:	e02c      	b.n	800436a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d028      	beq.n	800436a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d01c      	beq.n	800435a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699a      	ldr	r2, [r3, #24]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800432e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0210 	orr.w	r2, r2, #16
 800433e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d110      	bne.n	800436a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0220 	orr.w	r2, r2, #32
 8004356:	619a      	str	r2, [r3, #24]
 8004358:	e007      	b.n	800436a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699a      	ldr	r2, [r3, #24]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0220 	orr.w	r2, r2, #32
 8004368:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	3b01      	subs	r3, #1
 8004370:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	3b01      	subs	r3, #1
 8004378:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800437a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004382:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	3b01      	subs	r3, #1
 800438c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004392:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004394:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439e:	d115      	bne.n	80043cc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	3b01      	subs	r3, #1
 80043ac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043ae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	3b01      	subs	r3, #1
 80043b6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043b8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	3b01      	subs	r3, #1
 80043c2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043c8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043ca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fcd4 	bl	8004d90 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40006400 	.word	0x40006400
 800440c:	40006500 	.word	0x40006500

08004410 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004420:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d002      	beq.n	800442e <HAL_FDCAN_ConfigFilter+0x1e>
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d13d      	bne.n	80044aa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d119      	bne.n	800446a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004442:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800444a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e01d      	b.n	80044a6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	075a      	lsls	r2, r3, #29
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	079a      	lsls	r2, r3, #30
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3304      	adds	r3, #4
 800449e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e006      	b.n	80044b8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ae:	f043 0202 	orr.w	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d116      	bne.n	800450c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044e6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	011a      	lsls	r2, r3, #4
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	431a      	orrs	r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	431a      	orrs	r2, r3
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e006      	b.n	800451a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	f043 0204 	orr.w	r2, r3, #4
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d110      	bne.n	800455c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e006      	b.n	800456a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004560:	f043 0204 	orr.w	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d156      	bne.n	800463c <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0201 	orr.w	r2, r2, #1
 800459c:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800459e:	e011      	b.n	80045c4 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b0a      	cmp	r3, #10
 80045a4:	d90b      	bls.n	80045be <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2203      	movs	r2, #3
 80045b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e045      	b.n	800464a <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3301      	adds	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0e6      	beq.n	80045a0 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699a      	ldr	r2, [r3, #24]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0210 	bic.w	r2, r2, #16
 80045e4:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80045e6:	e011      	b.n	800460c <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b0a      	cmp	r3, #10
 80045ec:	d90b      	bls.n	8004606 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2203      	movs	r2, #3
 80045fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e021      	b.n	800464a <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3301      	adds	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b08      	cmp	r3, #8
 8004618:	d0e6      	beq.n	80045e8 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699a      	ldr	r2, [r3, #24]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0202 	orr.w	r2, r2, #2
 8004628:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e006      	b.n	800464a <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004640:	f043 0208 	orr.w	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d12c      	bne.n	80046c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e023      	b.n	80046d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68b9      	ldr	r1, [r7, #8]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fbdf 	bl	8004e68 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2101      	movs	r1, #1
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	fa01 f202 	lsl.w	r2, r1, r2
 80046b6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80046ba:	2201      	movs	r2, #1
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	409a      	lsls	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e006      	b.n	80046d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	f043 0208 	orr.w	r2, r3, #8
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b08b      	sub	sp, #44	; 0x2c
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80046f4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80046f6:	7efb      	ldrb	r3, [r7, #27]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f040 80bc 	bne.w	8004876 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d121      	bne.n	8004748 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004718:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0af      	b.n	8004884 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	440b      	add	r3, r1
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
 8004746:	e020      	b.n	800478a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e08d      	b.n	8004884 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800477c:	69fa      	ldr	r2, [r7, #28]
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	440b      	add	r3, r1
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d107      	bne.n	80047ae <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	0c9b      	lsrs	r3, r3, #18
 80047a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e005      	b.n	80047ba <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	3304      	adds	r3, #4
 80047d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0e1b      	lsrs	r3, r3, #24
 800480c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0fda      	lsrs	r2, r3, #31
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	3304      	adds	r3, #4
 8004822:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8004828:	2300      	movs	r3, #0
 800482a:	623b      	str	r3, [r7, #32]
 800482c:	e00a      	b.n	8004844 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	441a      	add	r2, r3
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	440b      	add	r3, r1
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	3301      	adds	r3, #1
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	4a11      	ldr	r2, [pc, #68]	; (8004890 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800484c:	5cd3      	ldrb	r3, [r2, r3]
 800484e:	461a      	mov	r2, r3
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	4293      	cmp	r3, r2
 8004854:	d3eb      	bcc.n	800482e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b40      	cmp	r3, #64	; 0x40
 800485a:	d105      	bne.n	8004868 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004866:	e004      	b.n	8004872 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e006      	b.n	8004884 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487a:	f043 0208 	orr.w	r2, r3, #8
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	372c      	adds	r7, #44	; 0x2c
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	08009844 	.word	0x08009844

08004894 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048a6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d003      	beq.n	80048b6 <HAL_FDCAN_ActivateNotification+0x22>
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	f040 80c8 	bne.w	8004a46 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d03b      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d031      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d027      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01d      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	d013      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00c      	beq.n	800495a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d13b      	bne.n	80049e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8004974:	2b00      	cmp	r3, #0
 8004976:	d004      	beq.n	8004982 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d131      	bne.n	80049e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d127      	bne.n	80049e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d11d      	bne.n	80049e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d113      	bne.n	80049e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00c      	beq.n	80049f6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0202 	orr.w	r2, r2, #2
 80049f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d009      	beq.n	8004a32 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e006      	b.n	8004a54 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	f043 0202 	orr.w	r2, r3, #2
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	6a3a      	ldr	r2, [r7, #32]
 8004a94:	4013      	ands	r3, r2
 8004a96:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aa2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004aba:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ace:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004ad2:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4013      	ands	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2240      	movs	r2, #64	; 0x40
 8004b02:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f923 	bl	8004d50 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d014      	beq.n	8004b50 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b2e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b46:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004b48:	6939      	ldr	r1, [r7, #16]
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8e1 	bl	8004d12 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8b6 	bl	8004cd2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d007      	beq.n	8004b7c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004b74:	6a39      	ldr	r1, [r7, #32]
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc fb68 	bl	800124c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004b8a:	69f9      	ldr	r1, [r7, #28]
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fc fb91 	bl	80012b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f895 	bl	8004ce8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01a      	beq.n	8004c02 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d013      	beq.n	8004c02 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004be2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f87d 	bl	8004cfc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00e      	beq.n	8004c2e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c26:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f87d 	bl	8004d28 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00e      	beq.n	8004c5a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c52:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f871 	bl	8004d3c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d011      	beq.n	8004c8c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004c9a:	6979      	ldr	r1, [r7, #20]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f86b 	bl	8004d78 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f84d 	bl	8004d64 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004cca:	bf00      	nop
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
	...

08004d90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004d98:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004d9a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d103      	bne.n	8004dae <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004dac:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2c      	ldr	r2, [pc, #176]	; (8004e64 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004dbe:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dce:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	041a      	lsls	r2, r3, #16
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	061a      	lsls	r2, r3, #24
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e005      	b.n	8004e42 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d3f3      	bcc.n	8004e36 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	4000a400 	.word	0x4000a400
 8004e60:	40006800 	.word	0x40006800
 8004e64:	40006c00 	.word	0x40006c00

08004e68 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b089      	sub	sp, #36	; 0x24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8004e86:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	e00a      	b.n	8004eaa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004e9c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004ea2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004eb4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004eba:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004ec0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	440b      	add	r3, r1
 8004eda:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e020      	b.n	8004f3c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3303      	adds	r3, #3
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	3302      	adds	r3, #2
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	440b      	add	r3, r1
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f12:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	3301      	adds	r3, #1
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	440b      	add	r3, r1
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004f20:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	440a      	add	r2, r1
 8004f28:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004f2a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	3304      	adds	r3, #4
 8004f34:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	4a06      	ldr	r2, [pc, #24]	; (8004f5c <FDCAN_CopyMessageToRAM+0xf4>)
 8004f44:	5cd3      	ldrb	r3, [r2, r3]
 8004f46:	461a      	mov	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d3d5      	bcc.n	8004efa <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	3724      	adds	r7, #36	; 0x24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	08009844 	.word	0x08009844

08004f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f6e:	e15a      	b.n	8005226 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	2101      	movs	r1, #1
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 814c 	beq.w	8005220 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d005      	beq.n	8004fa0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d130      	bne.n	8005002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2203      	movs	r2, #3
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 0201 	and.w	r2, r3, #1
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	2b03      	cmp	r3, #3
 800500c:	d017      	beq.n	800503e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d123      	bne.n	8005092 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	08da      	lsrs	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3208      	adds	r2, #8
 8005052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005056:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	220f      	movs	r2, #15
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4013      	ands	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	08da      	lsrs	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3208      	adds	r2, #8
 800508c:	6939      	ldr	r1, [r7, #16]
 800508e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	2203      	movs	r2, #3
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43db      	mvns	r3, r3
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4013      	ands	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0203 	and.w	r2, r3, #3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80a6 	beq.w	8005220 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d4:	4b5b      	ldr	r3, [pc, #364]	; (8005244 <HAL_GPIO_Init+0x2e4>)
 80050d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d8:	4a5a      	ldr	r2, [pc, #360]	; (8005244 <HAL_GPIO_Init+0x2e4>)
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	6613      	str	r3, [r2, #96]	; 0x60
 80050e0:	4b58      	ldr	r3, [pc, #352]	; (8005244 <HAL_GPIO_Init+0x2e4>)
 80050e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ec:	4a56      	ldr	r2, [pc, #344]	; (8005248 <HAL_GPIO_Init+0x2e8>)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	089b      	lsrs	r3, r3, #2
 80050f2:	3302      	adds	r3, #2
 80050f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	220f      	movs	r2, #15
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4013      	ands	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005116:	d01f      	beq.n	8005158 <HAL_GPIO_Init+0x1f8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a4c      	ldr	r2, [pc, #304]	; (800524c <HAL_GPIO_Init+0x2ec>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d019      	beq.n	8005154 <HAL_GPIO_Init+0x1f4>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a4b      	ldr	r2, [pc, #300]	; (8005250 <HAL_GPIO_Init+0x2f0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <HAL_GPIO_Init+0x1f0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a4a      	ldr	r2, [pc, #296]	; (8005254 <HAL_GPIO_Init+0x2f4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00d      	beq.n	800514c <HAL_GPIO_Init+0x1ec>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a49      	ldr	r2, [pc, #292]	; (8005258 <HAL_GPIO_Init+0x2f8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <HAL_GPIO_Init+0x1e8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a48      	ldr	r2, [pc, #288]	; (800525c <HAL_GPIO_Init+0x2fc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d101      	bne.n	8005144 <HAL_GPIO_Init+0x1e4>
 8005140:	2305      	movs	r3, #5
 8005142:	e00a      	b.n	800515a <HAL_GPIO_Init+0x1fa>
 8005144:	2306      	movs	r3, #6
 8005146:	e008      	b.n	800515a <HAL_GPIO_Init+0x1fa>
 8005148:	2304      	movs	r3, #4
 800514a:	e006      	b.n	800515a <HAL_GPIO_Init+0x1fa>
 800514c:	2303      	movs	r3, #3
 800514e:	e004      	b.n	800515a <HAL_GPIO_Init+0x1fa>
 8005150:	2302      	movs	r3, #2
 8005152:	e002      	b.n	800515a <HAL_GPIO_Init+0x1fa>
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <HAL_GPIO_Init+0x1fa>
 8005158:	2300      	movs	r3, #0
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	f002 0203 	and.w	r2, r2, #3
 8005160:	0092      	lsls	r2, r2, #2
 8005162:	4093      	lsls	r3, r2
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800516a:	4937      	ldr	r1, [pc, #220]	; (8005248 <HAL_GPIO_Init+0x2e8>)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	089b      	lsrs	r3, r3, #2
 8005170:	3302      	adds	r3, #2
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005178:	4b39      	ldr	r3, [pc, #228]	; (8005260 <HAL_GPIO_Init+0x300>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	43db      	mvns	r3, r3
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4013      	ands	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800519c:	4a30      	ldr	r2, [pc, #192]	; (8005260 <HAL_GPIO_Init+0x300>)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80051a2:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <HAL_GPIO_Init+0x300>)
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4013      	ands	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051c6:	4a26      	ldr	r2, [pc, #152]	; (8005260 <HAL_GPIO_Init+0x300>)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80051cc:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_GPIO_Init+0x300>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	43db      	mvns	r3, r3
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4013      	ands	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <HAL_GPIO_Init+0x300>)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80051f6:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <HAL_GPIO_Init+0x300>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	43db      	mvns	r3, r3
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4013      	ands	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800521a:	4a11      	ldr	r2, [pc, #68]	; (8005260 <HAL_GPIO_Init+0x300>)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3301      	adds	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	f47f ae9d 	bne.w	8004f70 <HAL_GPIO_Init+0x10>
  }
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40021000 	.word	0x40021000
 8005248:	40010000 	.word	0x40010000
 800524c:	48000400 	.word	0x48000400
 8005250:	48000800 	.word	0x48000800
 8005254:	48000c00 	.word	0x48000c00
 8005258:	48001000 	.word	0x48001000
 800525c:	48001400 	.word	0x48001400
 8005260:	40010400 	.word	0x40010400

08005264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d141      	bne.n	80052f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005272:	4b4b      	ldr	r3, [pc, #300]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527e:	d131      	bne.n	80052e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005280:	4b47      	ldr	r3, [pc, #284]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005286:	4a46      	ldr	r2, [pc, #280]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800528c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005290:	4b43      	ldr	r3, [pc, #268]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005298:	4a41      	ldr	r2, [pc, #260]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800529e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052a0:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2232      	movs	r2, #50	; 0x32
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	4a3f      	ldr	r2, [pc, #252]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	0c9b      	lsrs	r3, r3, #18
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b6:	e002      	b.n	80052be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052be:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ca:	d102      	bne.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f2      	bne.n	80052b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052d2:	4b33      	ldr	r3, [pc, #204]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052de:	d158      	bne.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e057      	b.n	8005394 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e4:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ea:	4a2d      	ldr	r2, [pc, #180]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052f4:	e04d      	b.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052fc:	d141      	bne.n	8005382 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052fe:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530a:	d131      	bne.n	8005370 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005312:	4a23      	ldr	r2, [pc, #140]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800531c:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005324:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800532a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800532c:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2232      	movs	r2, #50	; 0x32
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	4a1c      	ldr	r2, [pc, #112]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	0c9b      	lsrs	r3, r3, #18
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005342:	e002      	b.n	800534a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3b01      	subs	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d102      	bne.n	800535e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f2      	bne.n	8005344 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536a:	d112      	bne.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e011      	b.n	8005394 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005380:	e007      	b.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005382:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800538a:	4a05      	ldr	r2, [pc, #20]	; (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005390:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	40007000 	.word	0x40007000
 80053a4:	20000278 	.word	0x20000278
 80053a8:	431bde83 	.word	0x431bde83

080053ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e306      	b.n	80059cc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d075      	beq.n	80054b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ca:	4b97      	ldr	r3, [pc, #604]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
 80053d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d4:	4b94      	ldr	r3, [pc, #592]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	d102      	bne.n	80053ea <HAL_RCC_OscConfig+0x3e>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d002      	beq.n	80053f0 <HAL_RCC_OscConfig+0x44>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d10b      	bne.n	8005408 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f0:	4b8d      	ldr	r3, [pc, #564]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d05b      	beq.n	80054b4 <HAL_RCC_OscConfig+0x108>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d157      	bne.n	80054b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e2e1      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005410:	d106      	bne.n	8005420 <HAL_RCC_OscConfig+0x74>
 8005412:	4b85      	ldr	r3, [pc, #532]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a84      	ldr	r2, [pc, #528]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e01d      	b.n	800545c <HAL_RCC_OscConfig+0xb0>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005428:	d10c      	bne.n	8005444 <HAL_RCC_OscConfig+0x98>
 800542a:	4b7f      	ldr	r3, [pc, #508]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a7e      	ldr	r2, [pc, #504]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b7c      	ldr	r3, [pc, #496]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a7b      	ldr	r2, [pc, #492]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 800543c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e00b      	b.n	800545c <HAL_RCC_OscConfig+0xb0>
 8005444:	4b78      	ldr	r3, [pc, #480]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a77      	ldr	r2, [pc, #476]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 800544a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	4b75      	ldr	r3, [pc, #468]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a74      	ldr	r2, [pc, #464]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800545a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d013      	beq.n	800548c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fe fa3a 	bl	80038dc <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800546c:	f7fe fa36 	bl	80038dc <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	; 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e2a6      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547e:	4b6a      	ldr	r3, [pc, #424]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0xc0>
 800548a:	e014      	b.n	80054b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7fe fa26 	bl	80038dc <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005494:	f7fe fa22 	bl	80038dc <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	; 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e292      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054a6:	4b60      	ldr	r3, [pc, #384]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0xe8>
 80054b2:	e000      	b.n	80054b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d075      	beq.n	80055ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c2:	4b59      	ldr	r3, [pc, #356]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054cc:	4b56      	ldr	r3, [pc, #344]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b0c      	cmp	r3, #12
 80054da:	d102      	bne.n	80054e2 <HAL_RCC_OscConfig+0x136>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d002      	beq.n	80054e8 <HAL_RCC_OscConfig+0x13c>
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d11f      	bne.n	8005528 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e8:	4b4f      	ldr	r3, [pc, #316]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_OscConfig+0x154>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e265      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b49      	ldr	r3, [pc, #292]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	061b      	lsls	r3, r3, #24
 800550e:	4946      	ldr	r1, [pc, #280]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005514:	4b45      	ldr	r3, [pc, #276]	; (800562c <HAL_RCC_OscConfig+0x280>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe f863 	bl	80035e4 <HAL_InitTick>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d043      	beq.n	80055ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e251      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d023      	beq.n	8005578 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005530:	4b3d      	ldr	r3, [pc, #244]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3c      	ldr	r2, [pc, #240]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fe f9ce 	bl	80038dc <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005544:	f7fe f9ca 	bl	80038dc <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e23a      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005556:	4b34      	ldr	r3, [pc, #208]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005562:	4b31      	ldr	r3, [pc, #196]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	061b      	lsls	r3, r3, #24
 8005570:	492d      	ldr	r1, [pc, #180]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	604b      	str	r3, [r1, #4]
 8005576:	e01a      	b.n	80055ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 800557e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fe f9aa 	bl	80038dc <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558c:	f7fe f9a6 	bl	80038dc <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e216      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800559e:	4b22      	ldr	r3, [pc, #136]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x1e0>
 80055aa:	e000      	b.n	80055ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d041      	beq.n	800563e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d01c      	beq.n	80055fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055c2:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80055c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c8:	4a17      	ldr	r2, [pc, #92]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d2:	f7fe f983 	bl	80038dc <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055da:	f7fe f97f 	bl	80038dc <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e1ef      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055ec:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80055ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0ef      	beq.n	80055da <HAL_RCC_OscConfig+0x22e>
 80055fa:	e020      	b.n	800563e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 80055fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <HAL_RCC_OscConfig+0x27c>)
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fe f966 	bl	80038dc <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005612:	e00d      	b.n	8005630 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005614:	f7fe f962 	bl	80038dc <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d906      	bls.n	8005630 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e1d2      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000
 800562c:	2000027c 	.word	0x2000027c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005630:	4b8c      	ldr	r3, [pc, #560]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ea      	bne.n	8005614 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80a6 	beq.w	8005798 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564c:	2300      	movs	r3, #0
 800564e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005650:	4b84      	ldr	r3, [pc, #528]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCC_OscConfig+0x2b4>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_RCC_OscConfig+0x2b6>
 8005660:	2300      	movs	r3, #0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00d      	beq.n	8005682 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005666:	4b7f      	ldr	r3, [pc, #508]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	4a7e      	ldr	r2, [pc, #504]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 800566c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005670:	6593      	str	r3, [r2, #88]	; 0x58
 8005672:	4b7c      	ldr	r3, [pc, #496]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800567e:	2301      	movs	r3, #1
 8005680:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005682:	4b79      	ldr	r3, [pc, #484]	; (8005868 <HAL_RCC_OscConfig+0x4bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d118      	bne.n	80056c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800568e:	4b76      	ldr	r3, [pc, #472]	; (8005868 <HAL_RCC_OscConfig+0x4bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a75      	ldr	r2, [pc, #468]	; (8005868 <HAL_RCC_OscConfig+0x4bc>)
 8005694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569a:	f7fe f91f 	bl	80038dc <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a2:	f7fe f91b 	bl	80038dc <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e18b      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b4:	4b6c      	ldr	r3, [pc, #432]	; (8005868 <HAL_RCC_OscConfig+0x4bc>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f0      	beq.n	80056a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d108      	bne.n	80056da <HAL_RCC_OscConfig+0x32e>
 80056c8:	4b66      	ldr	r3, [pc, #408]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	4a65      	ldr	r2, [pc, #404]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056d8:	e024      	b.n	8005724 <HAL_RCC_OscConfig+0x378>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d110      	bne.n	8005704 <HAL_RCC_OscConfig+0x358>
 80056e2:	4b60      	ldr	r3, [pc, #384]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	4a5e      	ldr	r2, [pc, #376]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80056ea:	f043 0304 	orr.w	r3, r3, #4
 80056ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056f2:	4b5c      	ldr	r3, [pc, #368]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	4a5a      	ldr	r2, [pc, #360]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005702:	e00f      	b.n	8005724 <HAL_RCC_OscConfig+0x378>
 8005704:	4b57      	ldr	r3, [pc, #348]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	4a56      	ldr	r2, [pc, #344]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005714:	4b53      	ldr	r3, [pc, #332]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571a:	4a52      	ldr	r2, [pc, #328]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 800571c:	f023 0304 	bic.w	r3, r3, #4
 8005720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d016      	beq.n	800575a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fe f8d6 	bl	80038dc <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005732:	e00a      	b.n	800574a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fe f8d2 	bl	80038dc <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e140      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574a:	4b46      	ldr	r3, [pc, #280]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0ed      	beq.n	8005734 <HAL_RCC_OscConfig+0x388>
 8005758:	e015      	b.n	8005786 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575a:	f7fe f8bf 	bl	80038dc <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005760:	e00a      	b.n	8005778 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005762:	f7fe f8bb 	bl	80038dc <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005770:	4293      	cmp	r3, r2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e129      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005778:	4b3a      	ldr	r3, [pc, #232]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ed      	bne.n	8005762 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005786:	7ffb      	ldrb	r3, [r7, #31]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578c:	4b35      	ldr	r3, [pc, #212]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	4a34      	ldr	r2, [pc, #208]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005796:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d03c      	beq.n	800581e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01c      	beq.n	80057e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057ac:	4b2d      	ldr	r3, [pc, #180]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80057ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b2:	4a2c      	ldr	r2, [pc, #176]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fe f88e 	bl	80038dc <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057c4:	f7fe f88a 	bl	80038dc <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0fa      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057d6:	4b23      	ldr	r3, [pc, #140]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80057d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ef      	beq.n	80057c4 <HAL_RCC_OscConfig+0x418>
 80057e4:	e01b      	b.n	800581e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057e6:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80057e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057ec:	4a1d      	ldr	r2, [pc, #116]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f6:	f7fe f871 	bl	80038dc <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057fe:	f7fe f86d 	bl	80038dc <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e0dd      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005810:	4b14      	ldr	r3, [pc, #80]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1ef      	bne.n	80057fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80d1 	beq.w	80059ca <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b0c      	cmp	r3, #12
 8005832:	f000 808b 	beq.w	800594c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d15e      	bne.n	80058fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a08      	ldr	r2, [pc, #32]	; (8005864 <HAL_RCC_OscConfig+0x4b8>)
 8005844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fe f847 	bl	80038dc <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005850:	e00c      	b.n	800586c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005852:	f7fe f843 	bl	80038dc <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d905      	bls.n	800586c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e0b3      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
 8005864:	40021000 	.word	0x40021000
 8005868:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586c:	4b59      	ldr	r3, [pc, #356]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ec      	bne.n	8005852 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005878:	4b56      	ldr	r3, [pc, #344]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	4b56      	ldr	r3, [pc, #344]	; (80059d8 <HAL_RCC_OscConfig+0x62c>)
 800587e:	4013      	ands	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6a11      	ldr	r1, [r2, #32]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005888:	3a01      	subs	r2, #1
 800588a:	0112      	lsls	r2, r2, #4
 800588c:	4311      	orrs	r1, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005892:	0212      	lsls	r2, r2, #8
 8005894:	4311      	orrs	r1, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800589a:	0852      	lsrs	r2, r2, #1
 800589c:	3a01      	subs	r2, #1
 800589e:	0552      	lsls	r2, r2, #21
 80058a0:	4311      	orrs	r1, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058a6:	0852      	lsrs	r2, r2, #1
 80058a8:	3a01      	subs	r2, #1
 80058aa:	0652      	lsls	r2, r2, #25
 80058ac:	4311      	orrs	r1, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058b2:	06d2      	lsls	r2, r2, #27
 80058b4:	430a      	orrs	r2, r1
 80058b6:	4947      	ldr	r1, [pc, #284]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058bc:	4b45      	ldr	r3, [pc, #276]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a44      	ldr	r2, [pc, #272]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 80058c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058c8:	4b42      	ldr	r3, [pc, #264]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	4a41      	ldr	r2, [pc, #260]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 80058ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fe f802 	bl	80038dc <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058dc:	f7fd fffe 	bl	80038dc <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e06e      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ee:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x530>
 80058fa:	e066      	b.n	80059ca <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fc:	4b35      	ldr	r3, [pc, #212]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a34      	ldr	r2, [pc, #208]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 8005902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005906:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005908:	4b32      	ldr	r3, [pc, #200]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4a31      	ldr	r2, [pc, #196]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005914:	4b2f      	ldr	r3, [pc, #188]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4a2e      	ldr	r2, [pc, #184]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 800591a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800591e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005922:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fd ffda 	bl	80038dc <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592c:	f7fd ffd6 	bl	80038dc <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e046      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800593e:	4b25      	ldr	r3, [pc, #148]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x580>
 800594a:	e03e      	b.n	80059ca <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e039      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <HAL_RCC_OscConfig+0x628>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f003 0203 	and.w	r2, r3, #3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	429a      	cmp	r2, r3
 800596a:	d12c      	bne.n	80059c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	3b01      	subs	r3, #1
 8005978:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d123      	bne.n	80059c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d11b      	bne.n	80059c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d113      	bne.n	80059c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	3b01      	subs	r3, #1
 80059ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d109      	bne.n	80059c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	3b01      	subs	r3, #1
 80059c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d001      	beq.n	80059ca <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40021000 	.word	0x40021000
 80059d8:	019f800c 	.word	0x019f800c

080059dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e11e      	b.n	8005c32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059f4:	4b91      	ldr	r3, [pc, #580]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d910      	bls.n	8005a24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a02:	4b8e      	ldr	r3, [pc, #568]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f023 020f 	bic.w	r2, r3, #15
 8005a0a:	498c      	ldr	r1, [pc, #560]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a12:	4b8a      	ldr	r3, [pc, #552]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e106      	b.n	8005c32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d073      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d129      	bne.n	8005a8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a38:	4b81      	ldr	r3, [pc, #516]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0f4      	b.n	8005c32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a48:	f000 f9d0 	bl	8005dec <RCC_GetSysClockFreqFromPLLSource>
 8005a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4a7c      	ldr	r2, [pc, #496]	; (8005c44 <HAL_RCC_ClockConfig+0x268>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d93f      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a56:	4b7a      	ldr	r3, [pc, #488]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d033      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d12f      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a76:	4b72      	ldr	r3, [pc, #456]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a7e:	4a70      	ldr	r2, [pc, #448]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	e024      	b.n	8005ad6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d107      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a94:	4b6a      	ldr	r3, [pc, #424]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0c6      	b.n	8005c32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aa4:	4b66      	ldr	r3, [pc, #408]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0be      	b.n	8005c32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ab4:	f000 f8ce 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4a61      	ldr	r2, [pc, #388]	; (8005c44 <HAL_RCC_ClockConfig+0x268>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d909      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ac2:	4b5f      	ldr	r3, [pc, #380]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aca:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ad2:	2380      	movs	r3, #128	; 0x80
 8005ad4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ad6:	4b5a      	ldr	r3, [pc, #360]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f023 0203 	bic.w	r2, r3, #3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4957      	ldr	r1, [pc, #348]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae8:	f7fd fef8 	bl	80038dc <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aee:	e00a      	b.n	8005b06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af0:	f7fd fef4 	bl	80038dc <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e095      	b.n	8005c32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b06:	4b4e      	ldr	r3, [pc, #312]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 020c 	and.w	r2, r3, #12
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d1eb      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d023      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b30:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	4a42      	ldr	r2, [pc, #264]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b48:	4b3d      	ldr	r3, [pc, #244]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b50:	4a3b      	ldr	r2, [pc, #236]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b58:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	4936      	ldr	r1, [pc, #216]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	d105      	bne.n	8005b7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b72:	4b33      	ldr	r3, [pc, #204]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4a32      	ldr	r2, [pc, #200]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b7e:	4b2f      	ldr	r3, [pc, #188]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d21d      	bcs.n	8005bc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8c:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f023 020f 	bic.w	r2, r3, #15
 8005b94:	4929      	ldr	r1, [pc, #164]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b9c:	f7fd fe9e 	bl	80038dc <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba4:	f7fd fe9a 	bl	80038dc <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e03b      	b.n	8005c32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bba:	4b20      	ldr	r3, [pc, #128]	; (8005c3c <HAL_RCC_ClockConfig+0x260>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d1ed      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd4:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4917      	ldr	r1, [pc, #92]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bf2:	4b13      	ldr	r3, [pc, #76]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	490f      	ldr	r1, [pc, #60]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c06:	f000 f825 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <HAL_RCC_ClockConfig+0x264>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	091b      	lsrs	r3, r3, #4
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	490c      	ldr	r1, [pc, #48]	; (8005c48 <HAL_RCC_ClockConfig+0x26c>)
 8005c18:	5ccb      	ldrb	r3, [r1, r3]
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c22:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <HAL_RCC_ClockConfig+0x270>)
 8005c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c26:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_RCC_ClockConfig+0x274>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd fcda 	bl	80035e4 <HAL_InitTick>
 8005c30:	4603      	mov	r3, r0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40022000 	.word	0x40022000
 8005c40:	40021000 	.word	0x40021000
 8005c44:	04c4b400 	.word	0x04c4b400
 8005c48:	0800982c 	.word	0x0800982c
 8005c4c:	20000278 	.word	0x20000278
 8005c50:	2000027c 	.word	0x2000027c

08005c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c5a:	4b2c      	ldr	r3, [pc, #176]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d102      	bne.n	8005c6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c66:	4b2a      	ldr	r3, [pc, #168]	; (8005d10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	e047      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c6c:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d102      	bne.n	8005c7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c78:	4b26      	ldr	r3, [pc, #152]	; (8005d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	e03e      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c7e:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d136      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c8a:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c94:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	091b      	lsrs	r3, r3, #4
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d10c      	bne.n	8005cc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ca8:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cb2:	68d2      	ldr	r2, [r2, #12]
 8005cb4:	0a12      	lsrs	r2, r2, #8
 8005cb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	617b      	str	r3, [r7, #20]
      break;
 8005cc0:	e00c      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cc2:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ccc:	68d2      	ldr	r2, [r2, #12]
 8005cce:	0a12      	lsrs	r2, r2, #8
 8005cd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cd4:	fb02 f303 	mul.w	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]
      break;
 8005cda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	0e5b      	lsrs	r3, r3, #25
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	e001      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cfc:	693b      	ldr	r3, [r7, #16]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	00f42400 	.word	0x00f42400
 8005d14:	01312d00 	.word	0x01312d00

08005d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000278 	.word	0x20000278

08005d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d34:	f7ff fff0 	bl	8005d18 <HAL_RCC_GetHCLKFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	0a1b      	lsrs	r3, r3, #8
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	4904      	ldr	r1, [pc, #16]	; (8005d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40021000 	.word	0x40021000
 8005d58:	0800983c 	.word	0x0800983c

08005d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d60:	f7ff ffda 	bl	8005d18 <HAL_RCC_GetHCLKFreq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	0adb      	lsrs	r3, r3, #11
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	4904      	ldr	r1, [pc, #16]	; (8005d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d72:	5ccb      	ldrb	r3, [r1, r3]
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800983c 	.word	0x0800983c

08005d88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	220f      	movs	r2, #15
 8005d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005d98:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0203 	and.w	r2, r3, #3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <HAL_RCC_GetClockConfig+0x5c>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <HAL_RCC_GetClockConfig+0x5c>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <HAL_RCC_GetClockConfig+0x5c>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	08db      	lsrs	r3, r3, #3
 8005dc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <HAL_RCC_GetClockConfig+0x60>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 020f 	and.w	r2, r3, #15
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	601a      	str	r2, [r3, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40021000 	.word	0x40021000
 8005de8:	40022000 	.word	0x40022000

08005dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005df2:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dfc:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d10c      	bne.n	8005e2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e10:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e18:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e1a:	68d2      	ldr	r2, [r2, #12]
 8005e1c:	0a12      	lsrs	r2, r2, #8
 8005e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	617b      	str	r3, [r7, #20]
    break;
 8005e28:	e00c      	b.n	8005e44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e2a:	4a12      	ldr	r2, [pc, #72]	; (8005e74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e32:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e34:	68d2      	ldr	r2, [r2, #12]
 8005e36:	0a12      	lsrs	r2, r2, #8
 8005e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e3c:	fb02 f303 	mul.w	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]
    break;
 8005e42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	0e5b      	lsrs	r3, r3, #25
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e5e:	687b      	ldr	r3, [r7, #4]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	01312d00 	.word	0x01312d00
 8005e74:	00f42400 	.word	0x00f42400

08005e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e80:	2300      	movs	r3, #0
 8005e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e84:	2300      	movs	r3, #0
 8005e86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8098 	beq.w	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e96:	2300      	movs	r3, #0
 8005e98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b43      	ldr	r3, [pc, #268]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	4b40      	ldr	r3, [pc, #256]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8005eb2:	4b3d      	ldr	r3, [pc, #244]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ec2:	4b3a      	ldr	r3, [pc, #232]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a39      	ldr	r2, [pc, #228]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ece:	f7fd fd05 	bl	80038dc <HAL_GetTick>
 8005ed2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed4:	e009      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed6:	f7fd fd01 	bl	80038dc <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d902      	bls.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	74fb      	strb	r3, [r7, #19]
        break;
 8005ee8:	e005      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eea:	4b30      	ldr	r3, [pc, #192]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0ef      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ef6:	7cfb      	ldrb	r3, [r7, #19]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d159      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005efc:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01e      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d019      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f18:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f24:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f34:	4b1c      	ldr	r3, [pc, #112]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f44:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fd fcc1 	bl	80038dc <HAL_GetTick>
 8005f5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f5c:	e00b      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fd fcbd 	bl	80038dc <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d902      	bls.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	74fb      	strb	r3, [r7, #19]
            break;
 8005f74:	e006      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0ec      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f84:	7cfb      	ldrb	r3, [r7, #19]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10b      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f98:	4903      	ldr	r1, [pc, #12]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fa2:	7cfb      	ldrb	r3, [r7, #19]
 8005fa4:	74bb      	strb	r3, [r7, #18]
 8005fa6:	e005      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fb4:	7c7b      	ldrb	r3, [r7, #17]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fba:	4ba7      	ldr	r3, [pc, #668]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbe:	4aa6      	ldr	r2, [pc, #664]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd2:	4ba1      	ldr	r3, [pc, #644]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd8:	f023 0203 	bic.w	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	499d      	ldr	r1, [pc, #628]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ff4:	4b98      	ldr	r3, [pc, #608]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f023 020c 	bic.w	r2, r3, #12
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	4995      	ldr	r1, [pc, #596]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006016:	4b90      	ldr	r3, [pc, #576]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	498c      	ldr	r1, [pc, #560]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0308 	and.w	r3, r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006038:	4b87      	ldr	r3, [pc, #540]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	4984      	ldr	r1, [pc, #528]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800605a:	4b7f      	ldr	r3, [pc, #508]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	497b      	ldr	r1, [pc, #492]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800607c:	4b76      	ldr	r3, [pc, #472]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	4973      	ldr	r1, [pc, #460]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800609e:	4b6e      	ldr	r3, [pc, #440]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	496a      	ldr	r1, [pc, #424]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060c0:	4b65      	ldr	r3, [pc, #404]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	4962      	ldr	r1, [pc, #392]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060e2:	4b5d      	ldr	r3, [pc, #372]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	4959      	ldr	r1, [pc, #356]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006104:	4b54      	ldr	r3, [pc, #336]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800610a:	f023 0203 	bic.w	r2, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006112:	4951      	ldr	r1, [pc, #324]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006126:	4b4c      	ldr	r3, [pc, #304]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	4948      	ldr	r1, [pc, #288]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006148:	4b43      	ldr	r3, [pc, #268]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	4940      	ldr	r1, [pc, #256]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006168:	4b3b      	ldr	r3, [pc, #236]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a3a      	ldr	r2, [pc, #232]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006172:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800617c:	2b00      	cmp	r3, #0
 800617e:	d015      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006180:	4b35      	ldr	r3, [pc, #212]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618e:	4932      	ldr	r1, [pc, #200]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800619e:	d105      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061a0:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a2c      	ldr	r2, [pc, #176]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d015      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061b8:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	4924      	ldr	r1, [pc, #144]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061d6:	d105      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d8:	4b1f      	ldr	r3, [pc, #124]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a1e      	ldr	r2, [pc, #120]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d015      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fe:	4916      	ldr	r1, [pc, #88]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800620e:	d105      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4a10      	ldr	r2, [pc, #64]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800621a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d019      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	4908      	ldr	r1, [pc, #32]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006246:	d109      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006248:	4b03      	ldr	r3, [pc, #12]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	4a02      	ldr	r2, [pc, #8]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800624e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006252:	60d3      	str	r3, [r2, #12]
 8006254:	e002      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006256:	bf00      	nop
 8006258:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d015      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006268:	4b29      	ldr	r3, [pc, #164]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006276:	4926      	ldr	r1, [pc, #152]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006286:	d105      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006288:	4b21      	ldr	r3, [pc, #132]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	4a20      	ldr	r2, [pc, #128]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800628e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006292:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80062a0:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ae:	4918      	ldr	r1, [pc, #96]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062be:	d105      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062c0:	4b13      	ldr	r3, [pc, #76]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a12      	ldr	r2, [pc, #72]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d015      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e6:	490a      	ldr	r1, [pc, #40]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f6:	d105      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4a04      	ldr	r2, [pc, #16]	; (8006310 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006302:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006304:	7cbb      	ldrb	r3, [r7, #18]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40021000 	.word	0x40021000

08006314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e049      	b.n	80063ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f841 	bl	80063c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	4619      	mov	r1, r3
 8006352:	4610      	mov	r0, r2
 8006354:	f000 fa60 	bl	8006818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
	...

080063d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d001      	beq.n	80063f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e054      	b.n	800649a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a26      	ldr	r2, [pc, #152]	; (80064a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d022      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x80>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641a:	d01d      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x80>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a22      	ldr	r2, [pc, #136]	; (80064ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d018      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x80>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a21      	ldr	r2, [pc, #132]	; (80064b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d013      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x80>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00e      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x80>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1e      	ldr	r2, [pc, #120]	; (80064b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d009      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x80>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1c      	ldr	r2, [pc, #112]	; (80064bc <HAL_TIM_Base_Start_IT+0xe4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d004      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0x80>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d115      	bne.n	8006484 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <HAL_TIM_Base_Start_IT+0xec>)
 8006460:	4013      	ands	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b06      	cmp	r3, #6
 8006468:	d015      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0xbe>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006470:	d011      	beq.n	8006496 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006482:	e008      	b.n	8006496 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e000      	b.n	8006498 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40012c00 	.word	0x40012c00
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40013400 	.word	0x40013400
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40015000 	.word	0x40015000
 80064c4:	00010007 	.word	0x00010007

080064c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d122      	bne.n	8006524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d11b      	bne.n	8006524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0202 	mvn.w	r2, #2
 80064f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f003 0303 	and.w	r3, r3, #3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f965 	bl	80067da <HAL_TIM_IC_CaptureCallback>
 8006510:	e005      	b.n	800651e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f957 	bl	80067c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f968 	bl	80067ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b04      	cmp	r3, #4
 8006530:	d122      	bne.n	8006578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b04      	cmp	r3, #4
 800653e:	d11b      	bne.n	8006578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0204 	mvn.w	r2, #4
 8006548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f93b 	bl	80067da <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f92d 	bl	80067c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f93e 	bl	80067ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b08      	cmp	r3, #8
 8006584:	d122      	bne.n	80065cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b08      	cmp	r3, #8
 8006592:	d11b      	bne.n	80065cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0208 	mvn.w	r2, #8
 800659c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2204      	movs	r2, #4
 80065a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f911 	bl	80067da <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f903 	bl	80067c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f914 	bl	80067ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0310 	and.w	r3, r3, #16
 80065d6:	2b10      	cmp	r3, #16
 80065d8:	d122      	bne.n	8006620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d11b      	bne.n	8006620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0210 	mvn.w	r2, #16
 80065f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2208      	movs	r2, #8
 80065f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f8e7 	bl	80067da <HAL_TIM_IC_CaptureCallback>
 800660c:	e005      	b.n	800661a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f8d9 	bl	80067c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f8ea 	bl	80067ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b01      	cmp	r3, #1
 800662c:	d10e      	bne.n	800664c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b01      	cmp	r3, #1
 800663a:	d107      	bne.n	800664c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0201 	mvn.w	r2, #1
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fb fa5e 	bl	8001b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d10e      	bne.n	8006678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d107      	bne.n	8006678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f982 	bl	800697c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006686:	d10e      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b80      	cmp	r3, #128	; 0x80
 8006694:	d107      	bne.n	80066a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800669e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f975 	bl	8006990 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b40      	cmp	r3, #64	; 0x40
 80066b2:	d10e      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d107      	bne.n	80066d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f898 	bl	8006802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d10e      	bne.n	80066fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d107      	bne.n	80066fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0220 	mvn.w	r2, #32
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f935 	bl	8006968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670c:	d10f      	bne.n	800672e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800671c:	d107      	bne.n	800672e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f93b 	bl	80069a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800673c:	d10f      	bne.n	800675e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800674c:	d107      	bne.n	800675e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f92d 	bl	80069b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800676c:	d10f      	bne.n	800678e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677c:	d107      	bne.n	800678e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f91f 	bl	80069cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800679c:	d10f      	bne.n	80067be <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ac:	d107      	bne.n	80067be <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80067b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f911 	bl	80069e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a46      	ldr	r2, [pc, #280]	; (8006944 <TIM_Base_SetConfig+0x12c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d017      	beq.n	8006860 <TIM_Base_SetConfig+0x48>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006836:	d013      	beq.n	8006860 <TIM_Base_SetConfig+0x48>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a43      	ldr	r2, [pc, #268]	; (8006948 <TIM_Base_SetConfig+0x130>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00f      	beq.n	8006860 <TIM_Base_SetConfig+0x48>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a42      	ldr	r2, [pc, #264]	; (800694c <TIM_Base_SetConfig+0x134>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00b      	beq.n	8006860 <TIM_Base_SetConfig+0x48>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a41      	ldr	r2, [pc, #260]	; (8006950 <TIM_Base_SetConfig+0x138>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d007      	beq.n	8006860 <TIM_Base_SetConfig+0x48>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a40      	ldr	r2, [pc, #256]	; (8006954 <TIM_Base_SetConfig+0x13c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_Base_SetConfig+0x48>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a3f      	ldr	r2, [pc, #252]	; (8006958 <TIM_Base_SetConfig+0x140>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a33      	ldr	r2, [pc, #204]	; (8006944 <TIM_Base_SetConfig+0x12c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d023      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006880:	d01f      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a30      	ldr	r2, [pc, #192]	; (8006948 <TIM_Base_SetConfig+0x130>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01b      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a2f      	ldr	r2, [pc, #188]	; (800694c <TIM_Base_SetConfig+0x134>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d017      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a2e      	ldr	r2, [pc, #184]	; (8006950 <TIM_Base_SetConfig+0x138>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2d      	ldr	r2, [pc, #180]	; (8006954 <TIM_Base_SetConfig+0x13c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00f      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a2d      	ldr	r2, [pc, #180]	; (800695c <TIM_Base_SetConfig+0x144>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00b      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2c      	ldr	r2, [pc, #176]	; (8006960 <TIM_Base_SetConfig+0x148>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d007      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2b      	ldr	r2, [pc, #172]	; (8006964 <TIM_Base_SetConfig+0x14c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d003      	beq.n	80068c2 <TIM_Base_SetConfig+0xaa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a26      	ldr	r2, [pc, #152]	; (8006958 <TIM_Base_SetConfig+0x140>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d108      	bne.n	80068d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <TIM_Base_SetConfig+0x12c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d013      	beq.n	8006928 <TIM_Base_SetConfig+0x110>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a14      	ldr	r2, [pc, #80]	; (8006954 <TIM_Base_SetConfig+0x13c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00f      	beq.n	8006928 <TIM_Base_SetConfig+0x110>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a14      	ldr	r2, [pc, #80]	; (800695c <TIM_Base_SetConfig+0x144>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_Base_SetConfig+0x110>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a13      	ldr	r2, [pc, #76]	; (8006960 <TIM_Base_SetConfig+0x148>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_Base_SetConfig+0x110>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a12      	ldr	r2, [pc, #72]	; (8006964 <TIM_Base_SetConfig+0x14c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_Base_SetConfig+0x110>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a0d      	ldr	r2, [pc, #52]	; (8006958 <TIM_Base_SetConfig+0x140>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d103      	bne.n	8006930 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	615a      	str	r2, [r3, #20]
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40013400 	.word	0x40013400
 8006958:	40015000 	.word	0x40015000
 800695c:	40014000 	.word	0x40014000
 8006960:	40014400 	.word	0x40014400
 8006964:	40014800 	.word	0x40014800

08006968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e042      	b.n	8006a8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d106      	bne.n	8006a1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fc fd27 	bl	800346c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2224      	movs	r2, #36	; 0x24
 8006a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fb62 	bl	8007100 <UART_SetConfig>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e022      	b.n	8006a8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fe52 	bl	80076f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fed9 	bl	800783c <UART_CheckIdleState>
 8006a8a:	4603      	mov	r3, r0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b0ba      	sub	sp, #232	; 0xe8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006aba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006abe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d11b      	bne.n	8006b08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d015      	beq.n	8006b08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 82d6 	beq.w	80070aa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
      }
      return;
 8006b06:	e2d0      	b.n	80070aa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 811f 	beq.w	8006d50 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b16:	4b8b      	ldr	r3, [pc, #556]	; (8006d44 <HAL_UART_IRQHandler+0x2b0>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b22:	4b89      	ldr	r3, [pc, #548]	; (8006d48 <HAL_UART_IRQHandler+0x2b4>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8112 	beq.w	8006d50 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d011      	beq.n	8006b5c <HAL_UART_IRQHandler+0xc8>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b52:	f043 0201 	orr.w	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_UART_IRQHandler+0xf8>
 8006b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b82:	f043 0204 	orr.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d011      	beq.n	8006bbc <HAL_UART_IRQHandler+0x128>
 8006b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb2:	f043 0202 	orr.w	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d017      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bd8:	4b5a      	ldr	r3, [pc, #360]	; (8006d44 <HAL_UART_IRQHandler+0x2b0>)
 8006bda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2208      	movs	r2, #8
 8006be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bee:	f043 0208 	orr.w	r2, r3, #8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d012      	beq.n	8006c2a <HAL_UART_IRQHandler+0x196>
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c20:	f043 0220 	orr.w	r2, r3, #32
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 823c 	beq.w	80070ae <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d013      	beq.n	8006c6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d005      	beq.n	8006c8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d04f      	beq.n	8006d2e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 ffd1 	bl	8007c36 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d141      	bne.n	8006d26 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1d9      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d013      	beq.n	8006d1e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfa:	4a14      	ldr	r2, [pc, #80]	; (8006d4c <HAL_UART_IRQHandler+0x2b8>)
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd f874 	bl	8003df0 <HAL_DMA_Abort_IT>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d017      	beq.n	8006d3e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1c:	e00f      	b.n	8006d3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f9e4 	bl	80070ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d24:	e00b      	b.n	8006d3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f9e0 	bl	80070ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	e007      	b.n	8006d3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f9dc 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006d3c:	e1b7      	b.n	80070ae <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3e:	bf00      	nop
    return;
 8006d40:	e1b5      	b.n	80070ae <HAL_UART_IRQHandler+0x61a>
 8006d42:	bf00      	nop
 8006d44:	10000001 	.word	0x10000001
 8006d48:	04000120 	.word	0x04000120
 8006d4c:	08007ee1 	.word	0x08007ee1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	f040 814a 	bne.w	8006fee <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f003 0310 	and.w	r3, r3, #16
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 8143 	beq.w	8006fee <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 813c 	beq.w	8006fee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	f040 80b5 	bne.w	8006ef8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8187 	beq.w	80070b2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dae:	429a      	cmp	r2, r3
 8006db0:	f080 817f 	bcs.w	80070b2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 8086 	bne.w	8006edc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1da      	bne.n	8006dd0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3308      	adds	r3, #8
 8006e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e1      	bne.n	8006e1a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e3      	bne.n	8006e56 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eac:	f023 0310 	bic.w	r3, r3, #16
 8006eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ec0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e4      	bne.n	8006e9c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fc ff31 	bl	8003d3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7fc fc6d 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ef6:	e0dc      	b.n	80070b2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 80ce 	beq.w	80070b6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 80c9 	beq.w	80070b6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f46:	647b      	str	r3, [r7, #68]	; 0x44
 8006f48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e4      	bne.n	8006f24 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	623b      	str	r3, [r7, #32]
   return(result);
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f82:	633a      	str	r2, [r7, #48]	; 0x30
 8006f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e1      	bne.n	8006f5a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0310 	bic.w	r3, r3, #16
 8006fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	69b9      	ldr	r1, [r7, #24]
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e4      	bne.n	8006faa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fc fbf2 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fec:	e063      	b.n	80070b6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00e      	beq.n	8007018 <HAL_UART_IRQHandler+0x584>
 8006ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d008      	beq.n	8007018 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800700e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 ffa6 	bl	8007f62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007016:	e051      	b.n	80070bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007020:	2b00      	cmp	r3, #0
 8007022:	d014      	beq.n	800704e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007040:	2b00      	cmp	r3, #0
 8007042:	d03a      	beq.n	80070ba <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
    }
    return;
 800704c:	e035      	b.n	80070ba <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800704e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <HAL_UART_IRQHandler+0x5da>
 800705a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800705e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 ff50 	bl	8007f0c <UART_EndTransmit_IT>
    return;
 800706c:	e026      	b.n	80070bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800706e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d009      	beq.n	800708e <HAL_UART_IRQHandler+0x5fa>
 800707a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 ff7f 	bl	8007f8a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800708c:	e016      	b.n	80070bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d010      	beq.n	80070bc <HAL_UART_IRQHandler+0x628>
 800709a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da0c      	bge.n	80070bc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ff67 	bl	8007f76 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070a8:	e008      	b.n	80070bc <HAL_UART_IRQHandler+0x628>
      return;
 80070aa:	bf00      	nop
 80070ac:	e006      	b.n	80070bc <HAL_UART_IRQHandler+0x628>
    return;
 80070ae:	bf00      	nop
 80070b0:	e004      	b.n	80070bc <HAL_UART_IRQHandler+0x628>
      return;
 80070b2:	bf00      	nop
 80070b4:	e002      	b.n	80070bc <HAL_UART_IRQHandler+0x628>
      return;
 80070b6:	bf00      	nop
 80070b8:	e000      	b.n	80070bc <HAL_UART_IRQHandler+0x628>
    return;
 80070ba:	bf00      	nop
  }
}
 80070bc:	37e8      	adds	r7, #232	; 0xe8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop

080070c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007104:	b08c      	sub	sp, #48	; 0x30
 8007106:	af00      	add	r7, sp, #0
 8007108:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	431a      	orrs	r2, r3
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	431a      	orrs	r2, r3
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	4313      	orrs	r3, r2
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4baa      	ldr	r3, [pc, #680]	; (80073d8 <UART_SetConfig+0x2d8>)
 8007130:	4013      	ands	r3, r2
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007138:	430b      	orrs	r3, r1
 800713a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a9f      	ldr	r2, [pc, #636]	; (80073dc <UART_SetConfig+0x2dc>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007168:	4313      	orrs	r3, r2
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007176:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	6812      	ldr	r2, [r2, #0]
 800717e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007180:	430b      	orrs	r3, r1
 8007182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	f023 010f 	bic.w	r1, r3, #15
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a90      	ldr	r2, [pc, #576]	; (80073e0 <UART_SetConfig+0x2e0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d125      	bne.n	80071f0 <UART_SetConfig+0xf0>
 80071a4:	4b8f      	ldr	r3, [pc, #572]	; (80073e4 <UART_SetConfig+0x2e4>)
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d81a      	bhi.n	80071e8 <UART_SetConfig+0xe8>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <UART_SetConfig+0xb8>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071c9 	.word	0x080071c9
 80071bc:	080071d9 	.word	0x080071d9
 80071c0:	080071d1 	.word	0x080071d1
 80071c4:	080071e1 	.word	0x080071e1
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ce:	e116      	b.n	80073fe <UART_SetConfig+0x2fe>
 80071d0:	2302      	movs	r3, #2
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d6:	e112      	b.n	80073fe <UART_SetConfig+0x2fe>
 80071d8:	2304      	movs	r3, #4
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071de:	e10e      	b.n	80073fe <UART_SetConfig+0x2fe>
 80071e0:	2308      	movs	r3, #8
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e6:	e10a      	b.n	80073fe <UART_SetConfig+0x2fe>
 80071e8:	2310      	movs	r3, #16
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ee:	e106      	b.n	80073fe <UART_SetConfig+0x2fe>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a7c      	ldr	r2, [pc, #496]	; (80073e8 <UART_SetConfig+0x2e8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d138      	bne.n	800726c <UART_SetConfig+0x16c>
 80071fa:	4b7a      	ldr	r3, [pc, #488]	; (80073e4 <UART_SetConfig+0x2e4>)
 80071fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007200:	f003 030c 	and.w	r3, r3, #12
 8007204:	2b0c      	cmp	r3, #12
 8007206:	d82d      	bhi.n	8007264 <UART_SetConfig+0x164>
 8007208:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <UART_SetConfig+0x110>)
 800720a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720e:	bf00      	nop
 8007210:	08007245 	.word	0x08007245
 8007214:	08007265 	.word	0x08007265
 8007218:	08007265 	.word	0x08007265
 800721c:	08007265 	.word	0x08007265
 8007220:	08007255 	.word	0x08007255
 8007224:	08007265 	.word	0x08007265
 8007228:	08007265 	.word	0x08007265
 800722c:	08007265 	.word	0x08007265
 8007230:	0800724d 	.word	0x0800724d
 8007234:	08007265 	.word	0x08007265
 8007238:	08007265 	.word	0x08007265
 800723c:	08007265 	.word	0x08007265
 8007240:	0800725d 	.word	0x0800725d
 8007244:	2300      	movs	r3, #0
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800724a:	e0d8      	b.n	80073fe <UART_SetConfig+0x2fe>
 800724c:	2302      	movs	r3, #2
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007252:	e0d4      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007254:	2304      	movs	r3, #4
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725a:	e0d0      	b.n	80073fe <UART_SetConfig+0x2fe>
 800725c:	2308      	movs	r3, #8
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e0cc      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007264:	2310      	movs	r3, #16
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e0c8      	b.n	80073fe <UART_SetConfig+0x2fe>
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a5e      	ldr	r2, [pc, #376]	; (80073ec <UART_SetConfig+0x2ec>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d125      	bne.n	80072c2 <UART_SetConfig+0x1c2>
 8007276:	4b5b      	ldr	r3, [pc, #364]	; (80073e4 <UART_SetConfig+0x2e4>)
 8007278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007280:	2b30      	cmp	r3, #48	; 0x30
 8007282:	d016      	beq.n	80072b2 <UART_SetConfig+0x1b2>
 8007284:	2b30      	cmp	r3, #48	; 0x30
 8007286:	d818      	bhi.n	80072ba <UART_SetConfig+0x1ba>
 8007288:	2b20      	cmp	r3, #32
 800728a:	d00a      	beq.n	80072a2 <UART_SetConfig+0x1a2>
 800728c:	2b20      	cmp	r3, #32
 800728e:	d814      	bhi.n	80072ba <UART_SetConfig+0x1ba>
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <UART_SetConfig+0x19a>
 8007294:	2b10      	cmp	r3, #16
 8007296:	d008      	beq.n	80072aa <UART_SetConfig+0x1aa>
 8007298:	e00f      	b.n	80072ba <UART_SetConfig+0x1ba>
 800729a:	2300      	movs	r3, #0
 800729c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a0:	e0ad      	b.n	80073fe <UART_SetConfig+0x2fe>
 80072a2:	2302      	movs	r3, #2
 80072a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a8:	e0a9      	b.n	80073fe <UART_SetConfig+0x2fe>
 80072aa:	2304      	movs	r3, #4
 80072ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b0:	e0a5      	b.n	80073fe <UART_SetConfig+0x2fe>
 80072b2:	2308      	movs	r3, #8
 80072b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b8:	e0a1      	b.n	80073fe <UART_SetConfig+0x2fe>
 80072ba:	2310      	movs	r3, #16
 80072bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c0:	e09d      	b.n	80073fe <UART_SetConfig+0x2fe>
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a4a      	ldr	r2, [pc, #296]	; (80073f0 <UART_SetConfig+0x2f0>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d125      	bne.n	8007318 <UART_SetConfig+0x218>
 80072cc:	4b45      	ldr	r3, [pc, #276]	; (80073e4 <UART_SetConfig+0x2e4>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072d6:	2bc0      	cmp	r3, #192	; 0xc0
 80072d8:	d016      	beq.n	8007308 <UART_SetConfig+0x208>
 80072da:	2bc0      	cmp	r3, #192	; 0xc0
 80072dc:	d818      	bhi.n	8007310 <UART_SetConfig+0x210>
 80072de:	2b80      	cmp	r3, #128	; 0x80
 80072e0:	d00a      	beq.n	80072f8 <UART_SetConfig+0x1f8>
 80072e2:	2b80      	cmp	r3, #128	; 0x80
 80072e4:	d814      	bhi.n	8007310 <UART_SetConfig+0x210>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <UART_SetConfig+0x1f0>
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d008      	beq.n	8007300 <UART_SetConfig+0x200>
 80072ee:	e00f      	b.n	8007310 <UART_SetConfig+0x210>
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f6:	e082      	b.n	80073fe <UART_SetConfig+0x2fe>
 80072f8:	2302      	movs	r3, #2
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fe:	e07e      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007300:	2304      	movs	r3, #4
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007306:	e07a      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007308:	2308      	movs	r3, #8
 800730a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800730e:	e076      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007310:	2310      	movs	r3, #16
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007316:	e072      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a35      	ldr	r2, [pc, #212]	; (80073f4 <UART_SetConfig+0x2f4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d12a      	bne.n	8007378 <UART_SetConfig+0x278>
 8007322:	4b30      	ldr	r3, [pc, #192]	; (80073e4 <UART_SetConfig+0x2e4>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007330:	d01a      	beq.n	8007368 <UART_SetConfig+0x268>
 8007332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007336:	d81b      	bhi.n	8007370 <UART_SetConfig+0x270>
 8007338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800733c:	d00c      	beq.n	8007358 <UART_SetConfig+0x258>
 800733e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007342:	d815      	bhi.n	8007370 <UART_SetConfig+0x270>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <UART_SetConfig+0x250>
 8007348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734c:	d008      	beq.n	8007360 <UART_SetConfig+0x260>
 800734e:	e00f      	b.n	8007370 <UART_SetConfig+0x270>
 8007350:	2300      	movs	r3, #0
 8007352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007356:	e052      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007358:	2302      	movs	r3, #2
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800735e:	e04e      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007360:	2304      	movs	r3, #4
 8007362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007366:	e04a      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007368:	2308      	movs	r3, #8
 800736a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800736e:	e046      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007370:	2310      	movs	r3, #16
 8007372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007376:	e042      	b.n	80073fe <UART_SetConfig+0x2fe>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a17      	ldr	r2, [pc, #92]	; (80073dc <UART_SetConfig+0x2dc>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d13a      	bne.n	80073f8 <UART_SetConfig+0x2f8>
 8007382:	4b18      	ldr	r3, [pc, #96]	; (80073e4 <UART_SetConfig+0x2e4>)
 8007384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007388:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800738c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007390:	d01a      	beq.n	80073c8 <UART_SetConfig+0x2c8>
 8007392:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007396:	d81b      	bhi.n	80073d0 <UART_SetConfig+0x2d0>
 8007398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800739c:	d00c      	beq.n	80073b8 <UART_SetConfig+0x2b8>
 800739e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a2:	d815      	bhi.n	80073d0 <UART_SetConfig+0x2d0>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <UART_SetConfig+0x2b0>
 80073a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ac:	d008      	beq.n	80073c0 <UART_SetConfig+0x2c0>
 80073ae:	e00f      	b.n	80073d0 <UART_SetConfig+0x2d0>
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b6:	e022      	b.n	80073fe <UART_SetConfig+0x2fe>
 80073b8:	2302      	movs	r3, #2
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073be:	e01e      	b.n	80073fe <UART_SetConfig+0x2fe>
 80073c0:	2304      	movs	r3, #4
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c6:	e01a      	b.n	80073fe <UART_SetConfig+0x2fe>
 80073c8:	2308      	movs	r3, #8
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ce:	e016      	b.n	80073fe <UART_SetConfig+0x2fe>
 80073d0:	2310      	movs	r3, #16
 80073d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073d6:	e012      	b.n	80073fe <UART_SetConfig+0x2fe>
 80073d8:	cfff69f3 	.word	0xcfff69f3
 80073dc:	40008000 	.word	0x40008000
 80073e0:	40013800 	.word	0x40013800
 80073e4:	40021000 	.word	0x40021000
 80073e8:	40004400 	.word	0x40004400
 80073ec:	40004800 	.word	0x40004800
 80073f0:	40004c00 	.word	0x40004c00
 80073f4:	40005000 	.word	0x40005000
 80073f8:	2310      	movs	r3, #16
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4aae      	ldr	r2, [pc, #696]	; (80076bc <UART_SetConfig+0x5bc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	f040 8097 	bne.w	8007538 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800740a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800740e:	2b08      	cmp	r3, #8
 8007410:	d823      	bhi.n	800745a <UART_SetConfig+0x35a>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <UART_SetConfig+0x318>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	0800743d 	.word	0x0800743d
 800741c:	0800745b 	.word	0x0800745b
 8007420:	08007445 	.word	0x08007445
 8007424:	0800745b 	.word	0x0800745b
 8007428:	0800744b 	.word	0x0800744b
 800742c:	0800745b 	.word	0x0800745b
 8007430:	0800745b 	.word	0x0800745b
 8007434:	0800745b 	.word	0x0800745b
 8007438:	08007453 	.word	0x08007453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800743c:	f7fe fc78 	bl	8005d30 <HAL_RCC_GetPCLK1Freq>
 8007440:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007442:	e010      	b.n	8007466 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007444:	4b9e      	ldr	r3, [pc, #632]	; (80076c0 <UART_SetConfig+0x5c0>)
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007448:	e00d      	b.n	8007466 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800744a:	f7fe fc03 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 800744e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007450:	e009      	b.n	8007466 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007458:	e005      	b.n	8007466 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007464:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8130 	beq.w	80076ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	4a94      	ldr	r2, [pc, #592]	; (80076c4 <UART_SetConfig+0x5c4>)
 8007474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007478:	461a      	mov	r2, r3
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007480:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4413      	add	r3, r2
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	429a      	cmp	r2, r3
 8007490:	d305      	bcc.n	800749e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	429a      	cmp	r2, r3
 800749c:	d903      	bls.n	80074a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074a4:	e113      	b.n	80076ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	2200      	movs	r2, #0
 80074aa:	60bb      	str	r3, [r7, #8]
 80074ac:	60fa      	str	r2, [r7, #12]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	4a84      	ldr	r2, [pc, #528]	; (80076c4 <UART_SetConfig+0x5c4>)
 80074b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2200      	movs	r2, #0
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074c8:	f7f9 f9e0 	bl	800088c <__aeabi_uldivmod>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4610      	mov	r0, r2
 80074d2:	4619      	mov	r1, r3
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	020b      	lsls	r3, r1, #8
 80074de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074e2:	0202      	lsls	r2, r0, #8
 80074e4:	6979      	ldr	r1, [r7, #20]
 80074e6:	6849      	ldr	r1, [r1, #4]
 80074e8:	0849      	lsrs	r1, r1, #1
 80074ea:	2000      	movs	r0, #0
 80074ec:	460c      	mov	r4, r1
 80074ee:	4605      	mov	r5, r0
 80074f0:	eb12 0804 	adds.w	r8, r2, r4
 80074f4:	eb43 0905 	adc.w	r9, r3, r5
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	469a      	mov	sl, r3
 8007500:	4693      	mov	fp, r2
 8007502:	4652      	mov	r2, sl
 8007504:	465b      	mov	r3, fp
 8007506:	4640      	mov	r0, r8
 8007508:	4649      	mov	r1, r9
 800750a:	f7f9 f9bf 	bl	800088c <__aeabi_uldivmod>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4613      	mov	r3, r2
 8007514:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800751c:	d308      	bcc.n	8007530 <UART_SetConfig+0x430>
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007524:	d204      	bcs.n	8007530 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6a3a      	ldr	r2, [r7, #32]
 800752c:	60da      	str	r2, [r3, #12]
 800752e:	e0ce      	b.n	80076ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007536:	e0ca      	b.n	80076ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007540:	d166      	bne.n	8007610 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007546:	2b08      	cmp	r3, #8
 8007548:	d827      	bhi.n	800759a <UART_SetConfig+0x49a>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <UART_SetConfig+0x450>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007575 	.word	0x08007575
 8007554:	0800757d 	.word	0x0800757d
 8007558:	08007585 	.word	0x08007585
 800755c:	0800759b 	.word	0x0800759b
 8007560:	0800758b 	.word	0x0800758b
 8007564:	0800759b 	.word	0x0800759b
 8007568:	0800759b 	.word	0x0800759b
 800756c:	0800759b 	.word	0x0800759b
 8007570:	08007593 	.word	0x08007593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007574:	f7fe fbdc 	bl	8005d30 <HAL_RCC_GetPCLK1Freq>
 8007578:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800757a:	e014      	b.n	80075a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800757c:	f7fe fbee 	bl	8005d5c <HAL_RCC_GetPCLK2Freq>
 8007580:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007582:	e010      	b.n	80075a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007584:	4b4e      	ldr	r3, [pc, #312]	; (80076c0 <UART_SetConfig+0x5c0>)
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007588:	e00d      	b.n	80075a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800758a:	f7fe fb63 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 800758e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007590:	e009      	b.n	80075a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007598:	e005      	b.n	80075a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8090 	beq.w	80076ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	4a44      	ldr	r2, [pc, #272]	; (80076c4 <UART_SetConfig+0x5c4>)
 80075b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075b8:	461a      	mov	r2, r3
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80075c0:	005a      	lsls	r2, r3, #1
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	441a      	add	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d916      	bls.n	8007608 <UART_SetConfig+0x508>
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e0:	d212      	bcs.n	8007608 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f023 030f 	bic.w	r3, r3, #15
 80075ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	8bfb      	ldrh	r3, [r7, #30]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	8bfa      	ldrh	r2, [r7, #30]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e062      	b.n	80076ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800760e:	e05e      	b.n	80076ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007610:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007614:	2b08      	cmp	r3, #8
 8007616:	d828      	bhi.n	800766a <UART_SetConfig+0x56a>
 8007618:	a201      	add	r2, pc, #4	; (adr r2, 8007620 <UART_SetConfig+0x520>)
 800761a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761e:	bf00      	nop
 8007620:	08007645 	.word	0x08007645
 8007624:	0800764d 	.word	0x0800764d
 8007628:	08007655 	.word	0x08007655
 800762c:	0800766b 	.word	0x0800766b
 8007630:	0800765b 	.word	0x0800765b
 8007634:	0800766b 	.word	0x0800766b
 8007638:	0800766b 	.word	0x0800766b
 800763c:	0800766b 	.word	0x0800766b
 8007640:	08007663 	.word	0x08007663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007644:	f7fe fb74 	bl	8005d30 <HAL_RCC_GetPCLK1Freq>
 8007648:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800764a:	e014      	b.n	8007676 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800764c:	f7fe fb86 	bl	8005d5c <HAL_RCC_GetPCLK2Freq>
 8007650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007652:	e010      	b.n	8007676 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007654:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <UART_SetConfig+0x5c0>)
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007658:	e00d      	b.n	8007676 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800765a:	f7fe fafb 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 800765e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007660:	e009      	b.n	8007676 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007668:	e005      	b.n	8007676 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007674:	bf00      	nop
    }

    if (pclk != 0U)
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d028      	beq.n	80076ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	4a10      	ldr	r2, [pc, #64]	; (80076c4 <UART_SetConfig+0x5c4>)
 8007682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007686:	461a      	mov	r2, r3
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	fbb3 f2f2 	udiv	r2, r3, r2
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	085b      	lsrs	r3, r3, #1
 8007694:	441a      	add	r2, r3
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	fbb2 f3f3 	udiv	r3, r2, r3
 800769e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	2b0f      	cmp	r3, #15
 80076a4:	d910      	bls.n	80076c8 <UART_SetConfig+0x5c8>
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ac:	d20c      	bcs.n	80076c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60da      	str	r2, [r3, #12]
 80076b8:	e009      	b.n	80076ce <UART_SetConfig+0x5ce>
 80076ba:	bf00      	nop
 80076bc:	40008000 	.word	0x40008000
 80076c0:	00f42400 	.word	0x00f42400
 80076c4:	08009854 	.word	0x08009854
      }
      else
      {
        ret = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2201      	movs	r2, #1
 80076da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2200      	movs	r2, #0
 80076e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2200      	movs	r2, #0
 80076e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80076ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3730      	adds	r7, #48	; 0x30
 80076f2:	46bd      	mov	sp, r7
 80076f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080076f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01a      	beq.n	800780e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f6:	d10a      	bne.n	800780e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	605a      	str	r2, [r3, #4]
  }
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af02      	add	r7, sp, #8
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800784c:	f7fc f846 	bl	80038dc <HAL_GetTick>
 8007850:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b08      	cmp	r3, #8
 800785e:	d10e      	bne.n	800787e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f82f 	bl	80078d2 <UART_WaitOnFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e025      	b.n	80078ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b04      	cmp	r3, #4
 800788a:	d10e      	bne.n	80078aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800788c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f819 	bl	80078d2 <UART_WaitOnFlagUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e00f      	b.n	80078ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b09c      	sub	sp, #112	; 0x70
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e2:	e0a9      	b.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	f000 80a5 	beq.w	8007a38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ee:	f7fb fff5 	bl	80038dc <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d302      	bcc.n	8007904 <UART_WaitOnFlagUntilTimeout+0x32>
 80078fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007900:	2b00      	cmp	r3, #0
 8007902:	d140      	bne.n	8007986 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007918:	667b      	str	r3, [r7, #100]	; 0x64
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007924:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007928:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e6      	bne.n	8007904 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	663b      	str	r3, [r7, #96]	; 0x60
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007956:	64ba      	str	r2, [r7, #72]	; 0x48
 8007958:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800795c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2220      	movs	r2, #32
 8007976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e069      	b.n	8007a5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d051      	beq.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800799e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079a2:	d149      	bne.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
 80079ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e6      	bne.n	80079ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3308      	adds	r3, #8
 80079e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	613b      	str	r3, [r7, #16]
   return(result);
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f023 0301 	bic.w	r3, r3, #1
 80079f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a00:	623a      	str	r2, [r7, #32]
 8007a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	69f9      	ldr	r1, [r7, #28]
 8007a06:	6a3a      	ldr	r2, [r7, #32]
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e5      	bne.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e010      	b.n	8007a5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69da      	ldr	r2, [r3, #28]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4013      	ands	r3, r2
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	bf0c      	ite	eq
 8007a48:	2301      	moveq	r3, #1
 8007a4a:	2300      	movne	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	f43f af46 	beq.w	80078e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3770      	adds	r7, #112	; 0x70
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b096      	sub	sp, #88	; 0x58
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2222      	movs	r2, #34	; 0x22
 8007a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02c      	beq.n	8007af2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9c:	4a42      	ldr	r2, [pc, #264]	; (8007ba8 <UART_Start_Receive_DMA+0x144>)
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa4:	4a41      	ldr	r2, [pc, #260]	; (8007bac <UART_Start_Receive_DMA+0x148>)
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aac:	4a40      	ldr	r2, [pc, #256]	; (8007bb0 <UART_Start_Receive_DMA+0x14c>)
 8007aae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3324      	adds	r3, #36	; 0x24
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac8:	461a      	mov	r2, r3
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	f7fc f8bc 	bl	8003c48 <HAL_DMA_Start_IT>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00d      	beq.n	8007af2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2210      	movs	r2, #16
 8007ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e055      	b.n	8007b9e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d018      	beq.n	8007b34 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b16:	657b      	str	r3, [r7, #84]	; 0x54
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b22:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e6      	bne.n	8007b02 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3308      	adds	r3, #8
 8007b52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b54:	637a      	str	r2, [r7, #52]	; 0x34
 8007b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e5      	bne.n	8007b34 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	613b      	str	r3, [r7, #16]
   return(result);
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b88:	623a      	str	r2, [r7, #32]
 8007b8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	69f9      	ldr	r1, [r7, #28]
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e5      	bne.n	8007b68 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3758      	adds	r7, #88	; 0x58
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	08007d03 	.word	0x08007d03
 8007bac:	08007e29 	.word	0x08007e29
 8007bb0:	08007e61 	.word	0x08007e61

08007bb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b08f      	sub	sp, #60	; 0x3c
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bdc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e6      	bne.n	8007bbc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c04:	633b      	str	r3, [r7, #48]	; 0x30
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c0e:	61ba      	str	r2, [r7, #24]
 8007c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6979      	ldr	r1, [r7, #20]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e5      	bne.n	8007bee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007c2a:	bf00      	nop
 8007c2c:	373c      	adds	r7, #60	; 0x3c
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b095      	sub	sp, #84	; 0x54
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e6      	bne.n	8007c3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e3      	bne.n	8007c70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d118      	bne.n	8007ce2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	f023 0310 	bic.w	r3, r3, #16
 8007cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cce:	61bb      	str	r3, [r7, #24]
 8007cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6979      	ldr	r1, [r7, #20]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	613b      	str	r3, [r7, #16]
   return(result);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e6      	bne.n	8007cb0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007cf6:	bf00      	nop
 8007cf8:	3754      	adds	r7, #84	; 0x54
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b09c      	sub	sp, #112	; 0x70
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d171      	bne.n	8007e02 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e6      	bne.n	8007d26 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	f023 0301 	bic.w	r3, r3, #1
 8007d6e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3308      	adds	r3, #8
 8007d76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d78:	647a      	str	r2, [r7, #68]	; 0x44
 8007d7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e5      	bne.n	8007d58 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3308      	adds	r3, #8
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	e853 3f00 	ldrex	r3, [r3]
 8007d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007da2:	663b      	str	r3, [r7, #96]	; 0x60
 8007da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dac:	633a      	str	r2, [r7, #48]	; 0x30
 8007dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e5      	bne.n	8007d8c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d118      	bne.n	8007e02 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0310 	bic.w	r3, r3, #16
 8007de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	69b9      	ldr	r1, [r7, #24]
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e6      	bne.n	8007dd0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d107      	bne.n	8007e1a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e10:	4619      	mov	r1, r3
 8007e12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e14:	f7fb fcdc 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e18:	e002      	b.n	8007e20 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007e1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e1c:	f7ff f952 	bl	80070c4 <HAL_UART_RxCpltCallback>
}
 8007e20:	bf00      	nop
 8007e22:	3770      	adds	r7, #112	; 0x70
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d109      	bne.n	8007e52 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e44:	085b      	lsrs	r3, r3, #1
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	4619      	mov	r1, r3
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7fb fcc0 	bl	80037d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e50:	e002      	b.n	8007e58 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff f940 	bl	80070d8 <HAL_UART_RxHalfCpltCallback>
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e88:	2b80      	cmp	r3, #128	; 0x80
 8007e8a:	d109      	bne.n	8007ea0 <UART_DMAError+0x40>
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2b21      	cmp	r3, #33	; 0x21
 8007e90:	d106      	bne.n	8007ea0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007e9a:	6978      	ldr	r0, [r7, #20]
 8007e9c:	f7ff fe8a 	bl	8007bb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d109      	bne.n	8007ec2 <UART_DMAError+0x62>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b22      	cmp	r3, #34	; 0x22
 8007eb2:	d106      	bne.n	8007ec2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007ebc:	6978      	ldr	r0, [r7, #20]
 8007ebe:	f7ff feba 	bl	8007c36 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec8:	f043 0210 	orr.w	r2, r3, #16
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f7ff f90a 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed8:	bf00      	nop
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff f8f4 	bl	80070ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f28:	61fb      	str	r3, [r7, #28]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	61bb      	str	r3, [r7, #24]
 8007f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6979      	ldr	r1, [r7, #20]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e6      	bne.n	8007f14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fb fc5d 	bl	8003814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5a:	bf00      	nop
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_UARTEx_DisableFifoMode+0x16>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e027      	b.n	8008004 <HAL_UARTEx_DisableFifoMode+0x66>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2224      	movs	r2, #36	; 0x24
 8007fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0201 	bic.w	r2, r2, #1
 8007fda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007fe2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008024:	2302      	movs	r3, #2
 8008026:	e02d      	b.n	8008084 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2224      	movs	r2, #36	; 0x24
 8008034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f8ab 	bl	80081c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800809c:	2b01      	cmp	r3, #1
 800809e:	d101      	bne.n	80080a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080a0:	2302      	movs	r3, #2
 80080a2:	e02d      	b.n	8008100 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2224      	movs	r2, #36	; 0x24
 80080b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f86d 	bl	80081c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08c      	sub	sp, #48	; 0x30
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811c:	2b20      	cmp	r3, #32
 800811e:	d14a      	bne.n	80081b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008126:	88fb      	ldrh	r3, [r7, #6]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e043      	b.n	80081b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800813a:	2302      	movs	r3, #2
 800813c:	e03c      	b.n	80081b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800814c:	88fb      	ldrh	r3, [r7, #6]
 800814e:	461a      	mov	r2, r3
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff fc86 	bl	8007a64 <UART_Start_Receive_DMA>
 8008158:	4603      	mov	r3, r0
 800815a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800815e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008162:	2b00      	cmp	r3, #0
 8008164:	d124      	bne.n	80081b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800816a:	2b01      	cmp	r3, #1
 800816c:	d11d      	bne.n	80081aa <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2210      	movs	r2, #16
 8008174:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	617b      	str	r3, [r7, #20]
   return(result);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f043 0310 	orr.w	r3, r3, #16
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
 8008196:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6a39      	ldr	r1, [r7, #32]
 800819a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819c:	e841 2300 	strex	r3, r2, [r1]
 80081a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e6      	bne.n	8008176 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80081a8:	e002      	b.n	80081b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80081b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80081b4:	e000      	b.n	80081b8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80081b6:	2302      	movs	r3, #2
  }
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3730      	adds	r7, #48	; 0x30
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d108      	bne.n	80081e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081e0:	e031      	b.n	8008246 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081e2:	2308      	movs	r3, #8
 80081e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081e6:	2308      	movs	r3, #8
 80081e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	0e5b      	lsrs	r3, r3, #25
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	0f5b      	lsrs	r3, r3, #29
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	7b3a      	ldrb	r2, [r7, #12]
 800820e:	4911      	ldr	r1, [pc, #68]	; (8008254 <UARTEx_SetNbDataToProcess+0x94>)
 8008210:	5c8a      	ldrb	r2, [r1, r2]
 8008212:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008216:	7b3a      	ldrb	r2, [r7, #12]
 8008218:	490f      	ldr	r1, [pc, #60]	; (8008258 <UARTEx_SetNbDataToProcess+0x98>)
 800821a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800821c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008220:	b29a      	uxth	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	7b7a      	ldrb	r2, [r7, #13]
 800822c:	4909      	ldr	r1, [pc, #36]	; (8008254 <UARTEx_SetNbDataToProcess+0x94>)
 800822e:	5c8a      	ldrb	r2, [r1, r2]
 8008230:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008234:	7b7a      	ldrb	r2, [r7, #13]
 8008236:	4908      	ldr	r1, [pc, #32]	; (8008258 <UARTEx_SetNbDataToProcess+0x98>)
 8008238:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800823a:	fb93 f3f2 	sdiv	r3, r3, r2
 800823e:	b29a      	uxth	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	0800986c 	.word	0x0800986c
 8008258:	08009874 	.word	0x08009874

0800825c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800826a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800826e:	2b84      	cmp	r3, #132	; 0x84
 8008270:	d005      	beq.n	800827e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008272:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4413      	add	r3, r2
 800827a:	3303      	adds	r3, #3
 800827c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800827e:	68fb      	ldr	r3, [r7, #12]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008290:	f000 fa70 	bl	8008774 <vTaskStartScheduler>
  
  return osOK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	bd80      	pop	{r7, pc}

0800829a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800829a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800829c:	b087      	sub	sp, #28
 800829e:	af02      	add	r7, sp, #8
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685c      	ldr	r4, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082b0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff ffcf 	bl	800825c <makeFreeRtosPriority>
 80082be:	4602      	mov	r2, r0
 80082c0:	f107 030c 	add.w	r3, r7, #12
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	9200      	str	r2, [sp, #0]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	4632      	mov	r2, r6
 80082cc:	4629      	mov	r1, r5
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 f8d2 	bl	8008478 <xTaskCreate>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d001      	beq.n	80082de <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	e000      	b.n	80082e0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80082de:	68fb      	ldr	r3, [r7, #12]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <osDelay+0x16>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	e000      	b.n	8008300 <osDelay+0x18>
 80082fe:	2301      	movs	r3, #1
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fa03 	bl	800870c <vTaskDelay>
  
  return osOK;
 8008306:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f103 0208 	add.w	r2, r3, #8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f04f 32ff 	mov.w	r2, #4294967295
 8008328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f103 0208 	add.w	r2, r3, #8
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f103 0208 	add.w	r2, r3, #8
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	689a      	ldr	r2, [r3, #8]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d103      	bne.n	80083d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	e00c      	b.n	80083ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	3308      	adds	r3, #8
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	e002      	b.n	80083e0 <vListInsert+0x2e>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d2f6      	bcs.n	80083da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	601a      	str	r2, [r3, #0]
}
 8008418:	bf00      	nop
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6892      	ldr	r2, [r2, #8]
 800843a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6852      	ldr	r2, [r2, #4]
 8008444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	429a      	cmp	r2, r3
 800844e:	d103      	bne.n	8008458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	1e5a      	subs	r2, r3, #1
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08c      	sub	sp, #48	; 0x30
 800847c:	af04      	add	r7, sp, #16
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008488:	88fb      	ldrh	r3, [r7, #6]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4618      	mov	r0, r3
 800848e:	f000 feb3 	bl	80091f8 <pvPortMalloc>
 8008492:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00e      	beq.n	80084b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800849a:	20a0      	movs	r0, #160	; 0xa0
 800849c:	f000 feac 	bl	80091f8 <pvPortMalloc>
 80084a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	631a      	str	r2, [r3, #48]	; 0x30
 80084ae:	e005      	b.n	80084bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084b0:	6978      	ldr	r0, [r7, #20]
 80084b2:	f000 ff6d 	bl	8009390 <vPortFree>
 80084b6:	e001      	b.n	80084bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d013      	beq.n	80084ea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084c2:	88fa      	ldrh	r2, [r7, #6]
 80084c4:	2300      	movs	r3, #0
 80084c6:	9303      	str	r3, [sp, #12]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	9302      	str	r3, [sp, #8]
 80084cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f80f 	bl	80084fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084de:	69f8      	ldr	r0, [r7, #28]
 80084e0:	f000 f8aa 	bl	8008638 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084e4:	2301      	movs	r3, #1
 80084e6:	61bb      	str	r3, [r7, #24]
 80084e8:	e002      	b.n	80084f0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084ea:	f04f 33ff 	mov.w	r3, #4294967295
 80084ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084f0:	69bb      	ldr	r3, [r7, #24]
	}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3720      	adds	r7, #32
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008514:	3b01      	subs	r3, #1
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01f      	beq.n	800858a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800854a:	2300      	movs	r3, #0
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	e012      	b.n	8008576 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	7819      	ldrb	r1, [r3, #0]
 8008558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	4413      	add	r3, r2
 800855e:	3334      	adds	r3, #52	; 0x34
 8008560:	460a      	mov	r2, r1
 8008562:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	4413      	add	r3, r2
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d006      	beq.n	800857e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3301      	adds	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	2b0f      	cmp	r3, #15
 800857a:	d9e9      	bls.n	8008550 <prvInitialiseNewTask+0x54>
 800857c:	e000      	b.n	8008580 <prvInitialiseNewTask+0x84>
			{
				break;
 800857e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008588:	e003      	b.n	8008592 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	2b06      	cmp	r3, #6
 8008596:	d901      	bls.n	800859c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008598:	2306      	movs	r3, #6
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	2200      	movs	r2, #0
 80085ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	3304      	adds	r3, #4
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fecc 	bl	8008350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	3318      	adds	r3, #24
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff fec7 	bl	8008350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	f1c3 0207 	rsb	r2, r3, #7
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	334c      	adds	r3, #76	; 0x4c
 80085ec:	224c      	movs	r2, #76	; 0x4c
 80085ee:	2100      	movs	r1, #0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 ffeb 	bl	80095cc <memset>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	4a0c      	ldr	r2, [pc, #48]	; (800862c <prvInitialiseNewTask+0x130>)
 80085fa:	651a      	str	r2, [r3, #80]	; 0x50
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <prvInitialiseNewTask+0x134>)
 8008600:	655a      	str	r2, [r3, #84]	; 0x54
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	4a0b      	ldr	r2, [pc, #44]	; (8008634 <prvInitialiseNewTask+0x138>)
 8008606:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	69b8      	ldr	r0, [r7, #24]
 800860e:	f000 fbe7 	bl	8008de0 <pxPortInitialiseStack>
 8008612:	4602      	mov	r2, r0
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008622:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008624:	bf00      	nop
 8008626:	3720      	adds	r7, #32
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20002850 	.word	0x20002850
 8008630:	200028b8 	.word	0x200028b8
 8008634:	20002920 	.word	0x20002920

08008638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008640:	f000 fcf8 	bl	8009034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008644:	4b2a      	ldr	r3, [pc, #168]	; (80086f0 <prvAddNewTaskToReadyList+0xb8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3301      	adds	r3, #1
 800864a:	4a29      	ldr	r2, [pc, #164]	; (80086f0 <prvAddNewTaskToReadyList+0xb8>)
 800864c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800864e:	4b29      	ldr	r3, [pc, #164]	; (80086f4 <prvAddNewTaskToReadyList+0xbc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008656:	4a27      	ldr	r2, [pc, #156]	; (80086f4 <prvAddNewTaskToReadyList+0xbc>)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800865c:	4b24      	ldr	r3, [pc, #144]	; (80086f0 <prvAddNewTaskToReadyList+0xb8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d110      	bne.n	8008686 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008664:	f000 fab2 	bl	8008bcc <prvInitialiseTaskLists>
 8008668:	e00d      	b.n	8008686 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800866a:	4b23      	ldr	r3, [pc, #140]	; (80086f8 <prvAddNewTaskToReadyList+0xc0>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d109      	bne.n	8008686 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008672:	4b20      	ldr	r3, [pc, #128]	; (80086f4 <prvAddNewTaskToReadyList+0xbc>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	429a      	cmp	r2, r3
 800867e:	d802      	bhi.n	8008686 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008680:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <prvAddNewTaskToReadyList+0xbc>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008686:	4b1d      	ldr	r3, [pc, #116]	; (80086fc <prvAddNewTaskToReadyList+0xc4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3301      	adds	r3, #1
 800868c:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <prvAddNewTaskToReadyList+0xc4>)
 800868e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008694:	2201      	movs	r2, #1
 8008696:	409a      	lsls	r2, r3
 8008698:	4b19      	ldr	r3, [pc, #100]	; (8008700 <prvAddNewTaskToReadyList+0xc8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4313      	orrs	r3, r2
 800869e:	4a18      	ldr	r2, [pc, #96]	; (8008700 <prvAddNewTaskToReadyList+0xc8>)
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4a15      	ldr	r2, [pc, #84]	; (8008704 <prvAddNewTaskToReadyList+0xcc>)
 80086b0:	441a      	add	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4619      	mov	r1, r3
 80086b8:	4610      	mov	r0, r2
 80086ba:	f7ff fe56 	bl	800836a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086be:	f000 fce9 	bl	8009094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086c2:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <prvAddNewTaskToReadyList+0xc0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00e      	beq.n	80086e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <prvAddNewTaskToReadyList+0xbc>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d207      	bcs.n	80086e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086d8:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <prvAddNewTaskToReadyList+0xd0>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	200003fc 	.word	0x200003fc
 80086f4:	200002fc 	.word	0x200002fc
 80086f8:	20000408 	.word	0x20000408
 80086fc:	20000418 	.word	0x20000418
 8008700:	20000404 	.word	0x20000404
 8008704:	20000300 	.word	0x20000300
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d017      	beq.n	800874e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <vTaskDelay+0x60>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <vTaskDelay+0x30>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	60bb      	str	r3, [r7, #8]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800873c:	f000 f86a 	bl	8008814 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008740:	2100      	movs	r1, #0
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fae6 	bl	8008d14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008748:	f000 f872 	bl	8008830 <xTaskResumeAll>
 800874c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d107      	bne.n	8008764 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <vTaskDelay+0x64>)
 8008756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20000424 	.word	0x20000424
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800877a:	4b1e      	ldr	r3, [pc, #120]	; (80087f4 <vTaskStartScheduler+0x80>)
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	2300      	movs	r3, #0
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	2280      	movs	r2, #128	; 0x80
 8008786:	491c      	ldr	r1, [pc, #112]	; (80087f8 <vTaskStartScheduler+0x84>)
 8008788:	481c      	ldr	r0, [pc, #112]	; (80087fc <vTaskStartScheduler+0x88>)
 800878a:	f7ff fe75 	bl	8008478 <xTaskCreate>
 800878e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d11b      	bne.n	80087ce <vTaskStartScheduler+0x5a>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	60bb      	str	r3, [r7, #8]
}
 80087a8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <vTaskStartScheduler+0x8c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	334c      	adds	r3, #76	; 0x4c
 80087b0:	4a14      	ldr	r2, [pc, #80]	; (8008804 <vTaskStartScheduler+0x90>)
 80087b2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087b4:	4b14      	ldr	r3, [pc, #80]	; (8008808 <vTaskStartScheduler+0x94>)
 80087b6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087bc:	4b13      	ldr	r3, [pc, #76]	; (800880c <vTaskStartScheduler+0x98>)
 80087be:	2201      	movs	r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087c2:	4b13      	ldr	r3, [pc, #76]	; (8008810 <vTaskStartScheduler+0x9c>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087c8:	f000 fb92 	bl	8008ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087cc:	e00e      	b.n	80087ec <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d4:	d10a      	bne.n	80087ec <vTaskStartScheduler+0x78>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	607b      	str	r3, [r7, #4]
}
 80087e8:	bf00      	nop
 80087ea:	e7fe      	b.n	80087ea <vTaskStartScheduler+0x76>
}
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000420 	.word	0x20000420
 80087f8:	08009824 	.word	0x08009824
 80087fc:	08008b9d 	.word	0x08008b9d
 8008800:	200002fc 	.word	0x200002fc
 8008804:	200002d4 	.word	0x200002d4
 8008808:	2000041c 	.word	0x2000041c
 800880c:	20000408 	.word	0x20000408
 8008810:	20000400 	.word	0x20000400

08008814 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008818:	4b04      	ldr	r3, [pc, #16]	; (800882c <vTaskSuspendAll+0x18>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3301      	adds	r3, #1
 800881e:	4a03      	ldr	r2, [pc, #12]	; (800882c <vTaskSuspendAll+0x18>)
 8008820:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008822:	bf00      	nop
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	20000424 	.word	0x20000424

08008830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800883a:	2300      	movs	r3, #0
 800883c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800883e:	4b41      	ldr	r3, [pc, #260]	; (8008944 <xTaskResumeAll+0x114>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <xTaskResumeAll+0x2c>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	603b      	str	r3, [r7, #0]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800885c:	f000 fbea 	bl	8009034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008860:	4b38      	ldr	r3, [pc, #224]	; (8008944 <xTaskResumeAll+0x114>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3b01      	subs	r3, #1
 8008866:	4a37      	ldr	r2, [pc, #220]	; (8008944 <xTaskResumeAll+0x114>)
 8008868:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800886a:	4b36      	ldr	r3, [pc, #216]	; (8008944 <xTaskResumeAll+0x114>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d161      	bne.n	8008936 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008872:	4b35      	ldr	r3, [pc, #212]	; (8008948 <xTaskResumeAll+0x118>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d05d      	beq.n	8008936 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800887a:	e02e      	b.n	80088da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800887c:	4b33      	ldr	r3, [pc, #204]	; (800894c <xTaskResumeAll+0x11c>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	3318      	adds	r3, #24
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff fdcb 	bl	8008424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3304      	adds	r3, #4
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff fdc6 	bl	8008424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	2201      	movs	r2, #1
 800889e:	409a      	lsls	r2, r3
 80088a0:	4b2b      	ldr	r3, [pc, #172]	; (8008950 <xTaskResumeAll+0x120>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	4a2a      	ldr	r2, [pc, #168]	; (8008950 <xTaskResumeAll+0x120>)
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4a27      	ldr	r2, [pc, #156]	; (8008954 <xTaskResumeAll+0x124>)
 80088b8:	441a      	add	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3304      	adds	r3, #4
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f7ff fd52 	bl	800836a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ca:	4b23      	ldr	r3, [pc, #140]	; (8008958 <xTaskResumeAll+0x128>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d302      	bcc.n	80088da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80088d4:	4b21      	ldr	r3, [pc, #132]	; (800895c <xTaskResumeAll+0x12c>)
 80088d6:	2201      	movs	r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088da:	4b1c      	ldr	r3, [pc, #112]	; (800894c <xTaskResumeAll+0x11c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1cc      	bne.n	800887c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088e8:	f000 f9f4 	bl	8008cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088ec:	4b1c      	ldr	r3, [pc, #112]	; (8008960 <xTaskResumeAll+0x130>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d010      	beq.n	800891a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088f8:	f000 f836 	bl	8008968 <xTaskIncrementTick>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008902:	4b16      	ldr	r3, [pc, #88]	; (800895c <xTaskResumeAll+0x12c>)
 8008904:	2201      	movs	r2, #1
 8008906:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3b01      	subs	r3, #1
 800890c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1f1      	bne.n	80088f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008914:	4b12      	ldr	r3, [pc, #72]	; (8008960 <xTaskResumeAll+0x130>)
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800891a:	4b10      	ldr	r3, [pc, #64]	; (800895c <xTaskResumeAll+0x12c>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d009      	beq.n	8008936 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008922:	2301      	movs	r3, #1
 8008924:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008926:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <xTaskResumeAll+0x134>)
 8008928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008936:	f000 fbad 	bl	8009094 <vPortExitCritical>

	return xAlreadyYielded;
 800893a:	68bb      	ldr	r3, [r7, #8]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20000424 	.word	0x20000424
 8008948:	200003fc 	.word	0x200003fc
 800894c:	200003bc 	.word	0x200003bc
 8008950:	20000404 	.word	0x20000404
 8008954:	20000300 	.word	0x20000300
 8008958:	200002fc 	.word	0x200002fc
 800895c:	20000410 	.word	0x20000410
 8008960:	2000040c 	.word	0x2000040c
 8008964:	e000ed04 	.word	0xe000ed04

08008968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800896e:	2300      	movs	r3, #0
 8008970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008972:	4b4e      	ldr	r3, [pc, #312]	; (8008aac <xTaskIncrementTick+0x144>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f040 808e 	bne.w	8008a98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800897c:	4b4c      	ldr	r3, [pc, #304]	; (8008ab0 <xTaskIncrementTick+0x148>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3301      	adds	r3, #1
 8008982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008984:	4a4a      	ldr	r2, [pc, #296]	; (8008ab0 <xTaskIncrementTick+0x148>)
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d120      	bne.n	80089d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008990:	4b48      	ldr	r3, [pc, #288]	; (8008ab4 <xTaskIncrementTick+0x14c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	603b      	str	r3, [r7, #0]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <xTaskIncrementTick+0x46>
 80089b0:	4b40      	ldr	r3, [pc, #256]	; (8008ab4 <xTaskIncrementTick+0x14c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	4b40      	ldr	r3, [pc, #256]	; (8008ab8 <xTaskIncrementTick+0x150>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a3e      	ldr	r2, [pc, #248]	; (8008ab4 <xTaskIncrementTick+0x14c>)
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	4a3e      	ldr	r2, [pc, #248]	; (8008ab8 <xTaskIncrementTick+0x150>)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6013      	str	r3, [r2, #0]
 80089c4:	4b3d      	ldr	r3, [pc, #244]	; (8008abc <xTaskIncrementTick+0x154>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	4a3c      	ldr	r2, [pc, #240]	; (8008abc <xTaskIncrementTick+0x154>)
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	f000 f981 	bl	8008cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089d2:	4b3b      	ldr	r3, [pc, #236]	; (8008ac0 <xTaskIncrementTick+0x158>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d348      	bcc.n	8008a6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089dc:	4b35      	ldr	r3, [pc, #212]	; (8008ab4 <xTaskIncrementTick+0x14c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e6:	4b36      	ldr	r3, [pc, #216]	; (8008ac0 <xTaskIncrementTick+0x158>)
 80089e8:	f04f 32ff 	mov.w	r2, #4294967295
 80089ec:	601a      	str	r2, [r3, #0]
					break;
 80089ee:	e03e      	b.n	8008a6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f0:	4b30      	ldr	r3, [pc, #192]	; (8008ab4 <xTaskIncrementTick+0x14c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d203      	bcs.n	8008a10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a08:	4a2d      	ldr	r2, [pc, #180]	; (8008ac0 <xTaskIncrementTick+0x158>)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a0e:	e02e      	b.n	8008a6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fd05 	bl	8008424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d004      	beq.n	8008a2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	3318      	adds	r3, #24
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fcfc 	bl	8008424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	2201      	movs	r2, #1
 8008a32:	409a      	lsls	r2, r3
 8008a34:	4b23      	ldr	r3, [pc, #140]	; (8008ac4 <xTaskIncrementTick+0x15c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	4a22      	ldr	r2, [pc, #136]	; (8008ac4 <xTaskIncrementTick+0x15c>)
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4a1f      	ldr	r2, [pc, #124]	; (8008ac8 <xTaskIncrementTick+0x160>)
 8008a4c:	441a      	add	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f7ff fc88 	bl	800836a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	4b1b      	ldr	r3, [pc, #108]	; (8008acc <xTaskIncrementTick+0x164>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d3b9      	bcc.n	80089dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a6c:	e7b6      	b.n	80089dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a6e:	4b17      	ldr	r3, [pc, #92]	; (8008acc <xTaskIncrementTick+0x164>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a74:	4914      	ldr	r1, [pc, #80]	; (8008ac8 <xTaskIncrementTick+0x160>)
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	440b      	add	r3, r1
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d901      	bls.n	8008a8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008a86:	2301      	movs	r3, #1
 8008a88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a8a:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <xTaskIncrementTick+0x168>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008a92:	2301      	movs	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e004      	b.n	8008aa2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a98:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <xTaskIncrementTick+0x16c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	4a0d      	ldr	r2, [pc, #52]	; (8008ad4 <xTaskIncrementTick+0x16c>)
 8008aa0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008aa2:	697b      	ldr	r3, [r7, #20]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20000424 	.word	0x20000424
 8008ab0:	20000400 	.word	0x20000400
 8008ab4:	200003b4 	.word	0x200003b4
 8008ab8:	200003b8 	.word	0x200003b8
 8008abc:	20000414 	.word	0x20000414
 8008ac0:	2000041c 	.word	0x2000041c
 8008ac4:	20000404 	.word	0x20000404
 8008ac8:	20000300 	.word	0x20000300
 8008acc:	200002fc 	.word	0x200002fc
 8008ad0:	20000410 	.word	0x20000410
 8008ad4:	2000040c 	.word	0x2000040c

08008ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ade:	4b29      	ldr	r3, [pc, #164]	; (8008b84 <vTaskSwitchContext+0xac>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ae6:	4b28      	ldr	r3, [pc, #160]	; (8008b88 <vTaskSwitchContext+0xb0>)
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008aec:	e044      	b.n	8008b78 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008aee:	4b26      	ldr	r3, [pc, #152]	; (8008b88 <vTaskSwitchContext+0xb0>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008af4:	4b25      	ldr	r3, [pc, #148]	; (8008b8c <vTaskSwitchContext+0xb4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	fab3 f383 	clz	r3, r3
 8008b00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b02:	7afb      	ldrb	r3, [r7, #11]
 8008b04:	f1c3 031f 	rsb	r3, r3, #31
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	4921      	ldr	r1, [pc, #132]	; (8008b90 <vTaskSwitchContext+0xb8>)
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	440b      	add	r3, r1
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10a      	bne.n	8008b34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	607b      	str	r3, [r7, #4]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <vTaskSwitchContext+0x5a>
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4a14      	ldr	r2, [pc, #80]	; (8008b90 <vTaskSwitchContext+0xb8>)
 8008b40:	4413      	add	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	3308      	adds	r3, #8
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d104      	bne.n	8008b64 <vTaskSwitchContext+0x8c>
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	605a      	str	r2, [r3, #4]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	4a0a      	ldr	r2, [pc, #40]	; (8008b94 <vTaskSwitchContext+0xbc>)
 8008b6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b6e:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <vTaskSwitchContext+0xbc>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	334c      	adds	r3, #76	; 0x4c
 8008b74:	4a08      	ldr	r2, [pc, #32]	; (8008b98 <vTaskSwitchContext+0xc0>)
 8008b76:	6013      	str	r3, [r2, #0]
}
 8008b78:	bf00      	nop
 8008b7a:	371c      	adds	r7, #28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr
 8008b84:	20000424 	.word	0x20000424
 8008b88:	20000410 	.word	0x20000410
 8008b8c:	20000404 	.word	0x20000404
 8008b90:	20000300 	.word	0x20000300
 8008b94:	200002fc 	.word	0x200002fc
 8008b98:	200002d4 	.word	0x200002d4

08008b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ba4:	f000 f852 	bl	8008c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ba8:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <prvIdleTask+0x28>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d9f9      	bls.n	8008ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <prvIdleTask+0x2c>)
 8008bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bc0:	e7f0      	b.n	8008ba4 <prvIdleTask+0x8>
 8008bc2:	bf00      	nop
 8008bc4:	20000300 	.word	0x20000300
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
 8008bd6:	e00c      	b.n	8008bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4a12      	ldr	r2, [pc, #72]	; (8008c2c <prvInitialiseTaskLists+0x60>)
 8008be4:	4413      	add	r3, r2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fb92 	bl	8008310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	607b      	str	r3, [r7, #4]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b06      	cmp	r3, #6
 8008bf6:	d9ef      	bls.n	8008bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bf8:	480d      	ldr	r0, [pc, #52]	; (8008c30 <prvInitialiseTaskLists+0x64>)
 8008bfa:	f7ff fb89 	bl	8008310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bfe:	480d      	ldr	r0, [pc, #52]	; (8008c34 <prvInitialiseTaskLists+0x68>)
 8008c00:	f7ff fb86 	bl	8008310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c04:	480c      	ldr	r0, [pc, #48]	; (8008c38 <prvInitialiseTaskLists+0x6c>)
 8008c06:	f7ff fb83 	bl	8008310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c0a:	480c      	ldr	r0, [pc, #48]	; (8008c3c <prvInitialiseTaskLists+0x70>)
 8008c0c:	f7ff fb80 	bl	8008310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c10:	480b      	ldr	r0, [pc, #44]	; (8008c40 <prvInitialiseTaskLists+0x74>)
 8008c12:	f7ff fb7d 	bl	8008310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c16:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <prvInitialiseTaskLists+0x78>)
 8008c18:	4a05      	ldr	r2, [pc, #20]	; (8008c30 <prvInitialiseTaskLists+0x64>)
 8008c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <prvInitialiseTaskLists+0x7c>)
 8008c1e:	4a05      	ldr	r2, [pc, #20]	; (8008c34 <prvInitialiseTaskLists+0x68>)
 8008c20:	601a      	str	r2, [r3, #0]
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000300 	.word	0x20000300
 8008c30:	2000038c 	.word	0x2000038c
 8008c34:	200003a0 	.word	0x200003a0
 8008c38:	200003bc 	.word	0x200003bc
 8008c3c:	200003d0 	.word	0x200003d0
 8008c40:	200003e8 	.word	0x200003e8
 8008c44:	200003b4 	.word	0x200003b4
 8008c48:	200003b8 	.word	0x200003b8

08008c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c52:	e019      	b.n	8008c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c54:	f000 f9ee 	bl	8009034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c58:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <prvCheckTasksWaitingTermination+0x50>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fbdd 	bl	8008424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <prvCheckTasksWaitingTermination+0x54>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	4a0b      	ldr	r2, [pc, #44]	; (8008ca0 <prvCheckTasksWaitingTermination+0x54>)
 8008c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c74:	4b0b      	ldr	r3, [pc, #44]	; (8008ca4 <prvCheckTasksWaitingTermination+0x58>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ca4 <prvCheckTasksWaitingTermination+0x58>)
 8008c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c7e:	f000 fa09 	bl	8009094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f810 	bl	8008ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c88:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <prvCheckTasksWaitingTermination+0x58>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e1      	bne.n	8008c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200003d0 	.word	0x200003d0
 8008ca0:	200003fc 	.word	0x200003fc
 8008ca4:	200003e4 	.word	0x200003e4

08008ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	334c      	adds	r3, #76	; 0x4c
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fc91 	bl	80095dc <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fb66 	bl	8009390 <vPortFree>
			vPortFree( pxTCB );
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb63 	bl	8009390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cda:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <prvResetNextTaskUnblockTime+0x38>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ce4:	4b0a      	ldr	r3, [pc, #40]	; (8008d10 <prvResetNextTaskUnblockTime+0x3c>)
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cec:	e008      	b.n	8008d00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cee:	4b07      	ldr	r3, [pc, #28]	; (8008d0c <prvResetNextTaskUnblockTime+0x38>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4a04      	ldr	r2, [pc, #16]	; (8008d10 <prvResetNextTaskUnblockTime+0x3c>)
 8008cfe:	6013      	str	r3, [r2, #0]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	200003b4 	.word	0x200003b4
 8008d10:	2000041c 	.word	0x2000041c

08008d14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d1e:	4b29      	ldr	r3, [pc, #164]	; (8008dc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d24:	4b28      	ldr	r3, [pc, #160]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7ff fb7a 	bl	8008424 <uxListRemove>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10b      	bne.n	8008d4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008d36:	4b24      	ldr	r3, [pc, #144]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	43da      	mvns	r2, r3
 8008d44:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4013      	ands	r3, r2
 8008d4a:	4a20      	ldr	r2, [pc, #128]	; (8008dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d54:	d10a      	bne.n	8008d6c <prvAddCurrentTaskToDelayedList+0x58>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d007      	beq.n	8008d6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d5c:	4b1a      	ldr	r3, [pc, #104]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3304      	adds	r3, #4
 8008d62:	4619      	mov	r1, r3
 8008d64:	481a      	ldr	r0, [pc, #104]	; (8008dd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008d66:	f7ff fb00 	bl	800836a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d6a:	e026      	b.n	8008dba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4413      	add	r3, r2
 8008d72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d74:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d209      	bcs.n	8008d98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d84:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7ff fb0e 	bl	80083b2 <vListInsert>
}
 8008d96:	e010      	b.n	8008dba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3304      	adds	r3, #4
 8008da2:	4619      	mov	r1, r3
 8008da4:	4610      	mov	r0, r2
 8008da6:	f7ff fb04 	bl	80083b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008daa:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d202      	bcs.n	8008dba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008db4:	4a09      	ldr	r2, [pc, #36]	; (8008ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	6013      	str	r3, [r2, #0]
}
 8008dba:	bf00      	nop
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000400 	.word	0x20000400
 8008dc8:	200002fc 	.word	0x200002fc
 8008dcc:	20000404 	.word	0x20000404
 8008dd0:	200003e8 	.word	0x200003e8
 8008dd4:	200003b8 	.word	0x200003b8
 8008dd8:	200003b4 	.word	0x200003b4
 8008ddc:	2000041c 	.word	0x2000041c

08008de0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3b04      	subs	r3, #4
 8008df0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3b04      	subs	r3, #4
 8008dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f023 0201 	bic.w	r2, r3, #1
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e10:	4a0c      	ldr	r2, [pc, #48]	; (8008e44 <pxPortInitialiseStack+0x64>)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3b14      	subs	r3, #20
 8008e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3b04      	subs	r3, #4
 8008e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f06f 0202 	mvn.w	r2, #2
 8008e2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3b20      	subs	r3, #32
 8008e34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e36:	68fb      	ldr	r3, [r7, #12]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	08008e49 	.word	0x08008e49

08008e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e52:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <prvTaskExitError+0x54>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5a:	d00a      	beq.n	8008e72 <prvTaskExitError+0x2a>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60fb      	str	r3, [r7, #12]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <prvTaskExitError+0x28>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	60bb      	str	r3, [r7, #8]
}
 8008e84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e86:	bf00      	nop
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0fc      	beq.n	8008e88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	20000284 	.word	0x20000284

08008ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <pxCurrentTCBConst2>)
 8008ea2:	6819      	ldr	r1, [r3, #0]
 8008ea4:	6808      	ldr	r0, [r1, #0]
 8008ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eaa:	f380 8809 	msr	PSP, r0
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f380 8811 	msr	BASEPRI, r0
 8008eba:	4770      	bx	lr
 8008ebc:	f3af 8000 	nop.w

08008ec0 <pxCurrentTCBConst2>:
 8008ec0:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop

08008ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ec8:	4808      	ldr	r0, [pc, #32]	; (8008eec <prvPortStartFirstTask+0x24>)
 8008eca:	6800      	ldr	r0, [r0, #0]
 8008ecc:	6800      	ldr	r0, [r0, #0]
 8008ece:	f380 8808 	msr	MSP, r0
 8008ed2:	f04f 0000 	mov.w	r0, #0
 8008ed6:	f380 8814 	msr	CONTROL, r0
 8008eda:	b662      	cpsie	i
 8008edc:	b661      	cpsie	f
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	df00      	svc	0
 8008ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eea:	bf00      	nop
 8008eec:	e000ed08 	.word	0xe000ed08

08008ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ef6:	4b46      	ldr	r3, [pc, #280]	; (8009010 <xPortStartScheduler+0x120>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a46      	ldr	r2, [pc, #280]	; (8009014 <xPortStartScheduler+0x124>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d10a      	bne.n	8008f16 <xPortStartScheduler+0x26>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	613b      	str	r3, [r7, #16]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f16:	4b3e      	ldr	r3, [pc, #248]	; (8009010 <xPortStartScheduler+0x120>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a3f      	ldr	r2, [pc, #252]	; (8009018 <xPortStartScheduler+0x128>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d10a      	bne.n	8008f36 <xPortStartScheduler+0x46>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	60fb      	str	r3, [r7, #12]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f36:	4b39      	ldr	r3, [pc, #228]	; (800901c <xPortStartScheduler+0x12c>)
 8008f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	22ff      	movs	r2, #255	; 0xff
 8008f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	4b31      	ldr	r3, [pc, #196]	; (8009020 <xPortStartScheduler+0x130>)
 8008f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f5e:	4b31      	ldr	r3, [pc, #196]	; (8009024 <xPortStartScheduler+0x134>)
 8008f60:	2207      	movs	r2, #7
 8008f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f64:	e009      	b.n	8008f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f66:	4b2f      	ldr	r3, [pc, #188]	; (8009024 <xPortStartScheduler+0x134>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	4a2d      	ldr	r2, [pc, #180]	; (8009024 <xPortStartScheduler+0x134>)
 8008f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f82:	2b80      	cmp	r3, #128	; 0x80
 8008f84:	d0ef      	beq.n	8008f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f86:	4b27      	ldr	r3, [pc, #156]	; (8009024 <xPortStartScheduler+0x134>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f1c3 0307 	rsb	r3, r3, #7
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d00a      	beq.n	8008fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	60bb      	str	r3, [r7, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fa8:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <xPortStartScheduler+0x134>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	4a1d      	ldr	r2, [pc, #116]	; (8009024 <xPortStartScheduler+0x134>)
 8008fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <xPortStartScheduler+0x134>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fba:	4a1a      	ldr	r2, [pc, #104]	; (8009024 <xPortStartScheduler+0x134>)
 8008fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fc6:	4b18      	ldr	r3, [pc, #96]	; (8009028 <xPortStartScheduler+0x138>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a17      	ldr	r2, [pc, #92]	; (8009028 <xPortStartScheduler+0x138>)
 8008fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fd2:	4b15      	ldr	r3, [pc, #84]	; (8009028 <xPortStartScheduler+0x138>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a14      	ldr	r2, [pc, #80]	; (8009028 <xPortStartScheduler+0x138>)
 8008fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fde:	f000 f8dd 	bl	800919c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fe2:	4b12      	ldr	r3, [pc, #72]	; (800902c <xPortStartScheduler+0x13c>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fe8:	f000 f8fc 	bl	80091e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fec:	4b10      	ldr	r3, [pc, #64]	; (8009030 <xPortStartScheduler+0x140>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a0f      	ldr	r2, [pc, #60]	; (8009030 <xPortStartScheduler+0x140>)
 8008ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ff8:	f7ff ff66 	bl	8008ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ffc:	f7ff fd6c 	bl	8008ad8 <vTaskSwitchContext>
	prvTaskExitError();
 8009000:	f7ff ff22 	bl	8008e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	e000ed00 	.word	0xe000ed00
 8009014:	410fc271 	.word	0x410fc271
 8009018:	410fc270 	.word	0x410fc270
 800901c:	e000e400 	.word	0xe000e400
 8009020:	20000428 	.word	0x20000428
 8009024:	2000042c 	.word	0x2000042c
 8009028:	e000ed20 	.word	0xe000ed20
 800902c:	20000284 	.word	0x20000284
 8009030:	e000ef34 	.word	0xe000ef34

08009034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	607b      	str	r3, [r7, #4]
}
 800904c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800904e:	4b0f      	ldr	r3, [pc, #60]	; (800908c <vPortEnterCritical+0x58>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3301      	adds	r3, #1
 8009054:	4a0d      	ldr	r2, [pc, #52]	; (800908c <vPortEnterCritical+0x58>)
 8009056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009058:	4b0c      	ldr	r3, [pc, #48]	; (800908c <vPortEnterCritical+0x58>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d10f      	bne.n	8009080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009060:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <vPortEnterCritical+0x5c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00a      	beq.n	8009080 <vPortEnterCritical+0x4c>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	603b      	str	r3, [r7, #0]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <vPortEnterCritical+0x4a>
	}
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	20000284 	.word	0x20000284
 8009090:	e000ed04 	.word	0xe000ed04

08009094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800909a:	4b12      	ldr	r3, [pc, #72]	; (80090e4 <vPortExitCritical+0x50>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <vPortExitCritical+0x24>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	607b      	str	r3, [r7, #4]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090b8:	4b0a      	ldr	r3, [pc, #40]	; (80090e4 <vPortExitCritical+0x50>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3b01      	subs	r3, #1
 80090be:	4a09      	ldr	r2, [pc, #36]	; (80090e4 <vPortExitCritical+0x50>)
 80090c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090c2:	4b08      	ldr	r3, [pc, #32]	; (80090e4 <vPortExitCritical+0x50>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d105      	bne.n	80090d6 <vPortExitCritical+0x42>
 80090ca:	2300      	movs	r3, #0
 80090cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000284 	.word	0x20000284
	...

080090f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090f0:	f3ef 8009 	mrs	r0, PSP
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	4b15      	ldr	r3, [pc, #84]	; (8009150 <pxCurrentTCBConst>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	f01e 0f10 	tst.w	lr, #16
 8009100:	bf08      	it	eq
 8009102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910a:	6010      	str	r0, [r2, #0]
 800910c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009114:	f380 8811 	msr	BASEPRI, r0
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f7ff fcda 	bl	8008ad8 <vTaskSwitchContext>
 8009124:	f04f 0000 	mov.w	r0, #0
 8009128:	f380 8811 	msr	BASEPRI, r0
 800912c:	bc09      	pop	{r0, r3}
 800912e:	6819      	ldr	r1, [r3, #0]
 8009130:	6808      	ldr	r0, [r1, #0]
 8009132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009136:	f01e 0f10 	tst.w	lr, #16
 800913a:	bf08      	it	eq
 800913c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009140:	f380 8809 	msr	PSP, r0
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	f3af 8000 	nop.w

08009150 <pxCurrentTCBConst>:
 8009150:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop

08009158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	607b      	str	r3, [r7, #4]
}
 8009170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009172:	f7ff fbf9 	bl	8008968 <xTaskIncrementTick>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800917c:	4b06      	ldr	r3, [pc, #24]	; (8009198 <SysTick_Handler+0x40>)
 800917e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	2300      	movs	r3, #0
 8009186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	f383 8811 	msr	BASEPRI, r3
}
 800918e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091a0:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <vPortSetupTimerInterrupt+0x34>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <vPortSetupTimerInterrupt+0x38>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <vPortSetupTimerInterrupt+0x3c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a0a      	ldr	r2, [pc, #40]	; (80091dc <vPortSetupTimerInterrupt+0x40>)
 80091b2:	fba2 2303 	umull	r2, r3, r2, r3
 80091b6:	099b      	lsrs	r3, r3, #6
 80091b8:	4a09      	ldr	r2, [pc, #36]	; (80091e0 <vPortSetupTimerInterrupt+0x44>)
 80091ba:	3b01      	subs	r3, #1
 80091bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091be:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <vPortSetupTimerInterrupt+0x34>)
 80091c0:	2207      	movs	r2, #7
 80091c2:	601a      	str	r2, [r3, #0]
}
 80091c4:	bf00      	nop
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	e000e010 	.word	0xe000e010
 80091d4:	e000e018 	.word	0xe000e018
 80091d8:	20000278 	.word	0x20000278
 80091dc:	10624dd3 	.word	0x10624dd3
 80091e0:	e000e014 	.word	0xe000e014

080091e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091f4 <vPortEnableVFP+0x10>
 80091e8:	6801      	ldr	r1, [r0, #0]
 80091ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ee:	6001      	str	r1, [r0, #0]
 80091f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091f2:	bf00      	nop
 80091f4:	e000ed88 	.word	0xe000ed88

080091f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08a      	sub	sp, #40	; 0x28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009200:	2300      	movs	r3, #0
 8009202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009204:	f7ff fb06 	bl	8008814 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009208:	4b5b      	ldr	r3, [pc, #364]	; (8009378 <pvPortMalloc+0x180>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009210:	f000 f920 	bl	8009454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009214:	4b59      	ldr	r3, [pc, #356]	; (800937c <pvPortMalloc+0x184>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4013      	ands	r3, r2
 800921c:	2b00      	cmp	r3, #0
 800921e:	f040 8093 	bne.w	8009348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01d      	beq.n	8009264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009228:	2208      	movs	r2, #8
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4413      	add	r3, r2
 800922e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	2b00      	cmp	r3, #0
 8009238:	d014      	beq.n	8009264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f023 0307 	bic.w	r3, r3, #7
 8009240:	3308      	adds	r3, #8
 8009242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <pvPortMalloc+0x6c>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	617b      	str	r3, [r7, #20]
}
 8009260:	bf00      	nop
 8009262:	e7fe      	b.n	8009262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d06e      	beq.n	8009348 <pvPortMalloc+0x150>
 800926a:	4b45      	ldr	r3, [pc, #276]	; (8009380 <pvPortMalloc+0x188>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d869      	bhi.n	8009348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009274:	4b43      	ldr	r3, [pc, #268]	; (8009384 <pvPortMalloc+0x18c>)
 8009276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009278:	4b42      	ldr	r3, [pc, #264]	; (8009384 <pvPortMalloc+0x18c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800927e:	e004      	b.n	800928a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	429a      	cmp	r2, r3
 8009292:	d903      	bls.n	800929c <pvPortMalloc+0xa4>
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1f1      	bne.n	8009280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800929c:	4b36      	ldr	r3, [pc, #216]	; (8009378 <pvPortMalloc+0x180>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d050      	beq.n	8009348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2208      	movs	r2, #8
 80092ac:	4413      	add	r3, r2
 80092ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	1ad2      	subs	r2, r2, r3
 80092c0:	2308      	movs	r3, #8
 80092c2:	005b      	lsls	r3, r3, #1
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d91f      	bls.n	8009308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	f003 0307 	and.w	r3, r3, #7
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <pvPortMalloc+0xf8>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	613b      	str	r3, [r7, #16]
}
 80092ec:	bf00      	nop
 80092ee:	e7fe      	b.n	80092ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	1ad2      	subs	r2, r2, r3
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009302:	69b8      	ldr	r0, [r7, #24]
 8009304:	f000 f908 	bl	8009518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009308:	4b1d      	ldr	r3, [pc, #116]	; (8009380 <pvPortMalloc+0x188>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	4a1b      	ldr	r2, [pc, #108]	; (8009380 <pvPortMalloc+0x188>)
 8009314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009316:	4b1a      	ldr	r3, [pc, #104]	; (8009380 <pvPortMalloc+0x188>)
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b1b      	ldr	r3, [pc, #108]	; (8009388 <pvPortMalloc+0x190>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d203      	bcs.n	800932a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009322:	4b17      	ldr	r3, [pc, #92]	; (8009380 <pvPortMalloc+0x188>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a18      	ldr	r2, [pc, #96]	; (8009388 <pvPortMalloc+0x190>)
 8009328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	4b13      	ldr	r3, [pc, #76]	; (800937c <pvPortMalloc+0x184>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	431a      	orrs	r2, r3
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	2200      	movs	r2, #0
 800933c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800933e:	4b13      	ldr	r3, [pc, #76]	; (800938c <pvPortMalloc+0x194>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3301      	adds	r3, #1
 8009344:	4a11      	ldr	r2, [pc, #68]	; (800938c <pvPortMalloc+0x194>)
 8009346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009348:	f7ff fa72 	bl	8008830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	f003 0307 	and.w	r3, r3, #7
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <pvPortMalloc+0x174>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	60fb      	str	r3, [r7, #12]
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <pvPortMalloc+0x172>
	return pvReturn;
 800936c:	69fb      	ldr	r3, [r7, #28]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3728      	adds	r7, #40	; 0x28
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20002838 	.word	0x20002838
 800937c:	2000284c 	.word	0x2000284c
 8009380:	2000283c 	.word	0x2000283c
 8009384:	20002830 	.word	0x20002830
 8009388:	20002840 	.word	0x20002840
 800938c:	20002844 	.word	0x20002844

08009390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d04d      	beq.n	800943e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093a2:	2308      	movs	r3, #8
 80093a4:	425b      	negs	r3, r3
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4413      	add	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	4b24      	ldr	r3, [pc, #144]	; (8009448 <vPortFree+0xb8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4013      	ands	r3, r2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10a      	bne.n	80093d4 <vPortFree+0x44>
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	60fb      	str	r3, [r7, #12]
}
 80093d0:	bf00      	nop
 80093d2:	e7fe      	b.n	80093d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00a      	beq.n	80093f2 <vPortFree+0x62>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	60bb      	str	r3, [r7, #8]
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	4b14      	ldr	r3, [pc, #80]	; (8009448 <vPortFree+0xb8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4013      	ands	r3, r2
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01e      	beq.n	800943e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d11a      	bne.n	800943e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <vPortFree+0xb8>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	43db      	mvns	r3, r3
 8009412:	401a      	ands	r2, r3
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009418:	f7ff f9fc 	bl	8008814 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	4b0a      	ldr	r3, [pc, #40]	; (800944c <vPortFree+0xbc>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4413      	add	r3, r2
 8009426:	4a09      	ldr	r2, [pc, #36]	; (800944c <vPortFree+0xbc>)
 8009428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800942a:	6938      	ldr	r0, [r7, #16]
 800942c:	f000 f874 	bl	8009518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009430:	4b07      	ldr	r3, [pc, #28]	; (8009450 <vPortFree+0xc0>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	4a06      	ldr	r2, [pc, #24]	; (8009450 <vPortFree+0xc0>)
 8009438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800943a:	f7ff f9f9 	bl	8008830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800943e:	bf00      	nop
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	2000284c 	.word	0x2000284c
 800944c:	2000283c 	.word	0x2000283c
 8009450:	20002848 	.word	0x20002848

08009454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800945a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800945e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009460:	4b27      	ldr	r3, [pc, #156]	; (8009500 <prvHeapInit+0xac>)
 8009462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00c      	beq.n	8009488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3307      	adds	r3, #7
 8009472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0307 	bic.w	r3, r3, #7
 800947a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	4a1f      	ldr	r2, [pc, #124]	; (8009500 <prvHeapInit+0xac>)
 8009484:	4413      	add	r3, r2
 8009486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800948c:	4a1d      	ldr	r2, [pc, #116]	; (8009504 <prvHeapInit+0xb0>)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009492:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <prvHeapInit+0xb0>)
 8009494:	2200      	movs	r2, #0
 8009496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	4413      	add	r3, r2
 800949e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094a0:	2208      	movs	r2, #8
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0307 	bic.w	r3, r3, #7
 80094ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a15      	ldr	r2, [pc, #84]	; (8009508 <prvHeapInit+0xb4>)
 80094b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094b6:	4b14      	ldr	r3, [pc, #80]	; (8009508 <prvHeapInit+0xb4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094be:	4b12      	ldr	r3, [pc, #72]	; (8009508 <prvHeapInit+0xb4>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	1ad2      	subs	r2, r2, r3
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094d4:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <prvHeapInit+0xb4>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	4a0a      	ldr	r2, [pc, #40]	; (800950c <prvHeapInit+0xb8>)
 80094e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	4a09      	ldr	r2, [pc, #36]	; (8009510 <prvHeapInit+0xbc>)
 80094ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094ec:	4b09      	ldr	r3, [pc, #36]	; (8009514 <prvHeapInit+0xc0>)
 80094ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094f2:	601a      	str	r2, [r3, #0]
}
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	20000430 	.word	0x20000430
 8009504:	20002830 	.word	0x20002830
 8009508:	20002838 	.word	0x20002838
 800950c:	20002840 	.word	0x20002840
 8009510:	2000283c 	.word	0x2000283c
 8009514:	2000284c 	.word	0x2000284c

08009518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009520:	4b28      	ldr	r3, [pc, #160]	; (80095c4 <prvInsertBlockIntoFreeList+0xac>)
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	e002      	b.n	800952c <prvInsertBlockIntoFreeList+0x14>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d8f7      	bhi.n	8009526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	4413      	add	r3, r2
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	429a      	cmp	r2, r3
 8009546:	d108      	bne.n	800955a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	441a      	add	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	441a      	add	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	429a      	cmp	r2, r3
 800956c:	d118      	bne.n	80095a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	4b15      	ldr	r3, [pc, #84]	; (80095c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d00d      	beq.n	8009596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	441a      	add	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	e008      	b.n	80095a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009596:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	e003      	b.n	80095a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d002      	beq.n	80095b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095b6:	bf00      	nop
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	20002830 	.word	0x20002830
 80095c8:	20002838 	.word	0x20002838

080095cc <memset>:
 80095cc:	4402      	add	r2, r0
 80095ce:	4603      	mov	r3, r0
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d100      	bne.n	80095d6 <memset+0xa>
 80095d4:	4770      	bx	lr
 80095d6:	f803 1b01 	strb.w	r1, [r3], #1
 80095da:	e7f9      	b.n	80095d0 <memset+0x4>

080095dc <_reclaim_reent>:
 80095dc:	4b29      	ldr	r3, [pc, #164]	; (8009684 <_reclaim_reent+0xa8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4283      	cmp	r3, r0
 80095e2:	b570      	push	{r4, r5, r6, lr}
 80095e4:	4604      	mov	r4, r0
 80095e6:	d04b      	beq.n	8009680 <_reclaim_reent+0xa4>
 80095e8:	69c3      	ldr	r3, [r0, #28]
 80095ea:	b143      	cbz	r3, 80095fe <_reclaim_reent+0x22>
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d144      	bne.n	800967c <_reclaim_reent+0xa0>
 80095f2:	69e3      	ldr	r3, [r4, #28]
 80095f4:	6819      	ldr	r1, [r3, #0]
 80095f6:	b111      	cbz	r1, 80095fe <_reclaim_reent+0x22>
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 f879 	bl	80096f0 <_free_r>
 80095fe:	6961      	ldr	r1, [r4, #20]
 8009600:	b111      	cbz	r1, 8009608 <_reclaim_reent+0x2c>
 8009602:	4620      	mov	r0, r4
 8009604:	f000 f874 	bl	80096f0 <_free_r>
 8009608:	69e1      	ldr	r1, [r4, #28]
 800960a:	b111      	cbz	r1, 8009612 <_reclaim_reent+0x36>
 800960c:	4620      	mov	r0, r4
 800960e:	f000 f86f 	bl	80096f0 <_free_r>
 8009612:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009614:	b111      	cbz	r1, 800961c <_reclaim_reent+0x40>
 8009616:	4620      	mov	r0, r4
 8009618:	f000 f86a 	bl	80096f0 <_free_r>
 800961c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800961e:	b111      	cbz	r1, 8009626 <_reclaim_reent+0x4a>
 8009620:	4620      	mov	r0, r4
 8009622:	f000 f865 	bl	80096f0 <_free_r>
 8009626:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009628:	b111      	cbz	r1, 8009630 <_reclaim_reent+0x54>
 800962a:	4620      	mov	r0, r4
 800962c:	f000 f860 	bl	80096f0 <_free_r>
 8009630:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009632:	b111      	cbz	r1, 800963a <_reclaim_reent+0x5e>
 8009634:	4620      	mov	r0, r4
 8009636:	f000 f85b 	bl	80096f0 <_free_r>
 800963a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800963c:	b111      	cbz	r1, 8009644 <_reclaim_reent+0x68>
 800963e:	4620      	mov	r0, r4
 8009640:	f000 f856 	bl	80096f0 <_free_r>
 8009644:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009646:	b111      	cbz	r1, 800964e <_reclaim_reent+0x72>
 8009648:	4620      	mov	r0, r4
 800964a:	f000 f851 	bl	80096f0 <_free_r>
 800964e:	6a23      	ldr	r3, [r4, #32]
 8009650:	b1b3      	cbz	r3, 8009680 <_reclaim_reent+0xa4>
 8009652:	4620      	mov	r0, r4
 8009654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009658:	4718      	bx	r3
 800965a:	5949      	ldr	r1, [r1, r5]
 800965c:	b941      	cbnz	r1, 8009670 <_reclaim_reent+0x94>
 800965e:	3504      	adds	r5, #4
 8009660:	69e3      	ldr	r3, [r4, #28]
 8009662:	2d80      	cmp	r5, #128	; 0x80
 8009664:	68d9      	ldr	r1, [r3, #12]
 8009666:	d1f8      	bne.n	800965a <_reclaim_reent+0x7e>
 8009668:	4620      	mov	r0, r4
 800966a:	f000 f841 	bl	80096f0 <_free_r>
 800966e:	e7c0      	b.n	80095f2 <_reclaim_reent+0x16>
 8009670:	680e      	ldr	r6, [r1, #0]
 8009672:	4620      	mov	r0, r4
 8009674:	f000 f83c 	bl	80096f0 <_free_r>
 8009678:	4631      	mov	r1, r6
 800967a:	e7ef      	b.n	800965c <_reclaim_reent+0x80>
 800967c:	2500      	movs	r5, #0
 800967e:	e7ef      	b.n	8009660 <_reclaim_reent+0x84>
 8009680:	bd70      	pop	{r4, r5, r6, pc}
 8009682:	bf00      	nop
 8009684:	200002d4 	.word	0x200002d4

08009688 <__libc_init_array>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	4d0d      	ldr	r5, [pc, #52]	; (80096c0 <__libc_init_array+0x38>)
 800968c:	4c0d      	ldr	r4, [pc, #52]	; (80096c4 <__libc_init_array+0x3c>)
 800968e:	1b64      	subs	r4, r4, r5
 8009690:	10a4      	asrs	r4, r4, #2
 8009692:	2600      	movs	r6, #0
 8009694:	42a6      	cmp	r6, r4
 8009696:	d109      	bne.n	80096ac <__libc_init_array+0x24>
 8009698:	4d0b      	ldr	r5, [pc, #44]	; (80096c8 <__libc_init_array+0x40>)
 800969a:	4c0c      	ldr	r4, [pc, #48]	; (80096cc <__libc_init_array+0x44>)
 800969c:	f000 f880 	bl	80097a0 <_init>
 80096a0:	1b64      	subs	r4, r4, r5
 80096a2:	10a4      	asrs	r4, r4, #2
 80096a4:	2600      	movs	r6, #0
 80096a6:	42a6      	cmp	r6, r4
 80096a8:	d105      	bne.n	80096b6 <__libc_init_array+0x2e>
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b0:	4798      	blx	r3
 80096b2:	3601      	adds	r6, #1
 80096b4:	e7ee      	b.n	8009694 <__libc_init_array+0xc>
 80096b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ba:	4798      	blx	r3
 80096bc:	3601      	adds	r6, #1
 80096be:	e7f2      	b.n	80096a6 <__libc_init_array+0x1e>
 80096c0:	08009884 	.word	0x08009884
 80096c4:	08009884 	.word	0x08009884
 80096c8:	08009884 	.word	0x08009884
 80096cc:	08009888 	.word	0x08009888

080096d0 <__retarget_lock_acquire_recursive>:
 80096d0:	4770      	bx	lr

080096d2 <__retarget_lock_release_recursive>:
 80096d2:	4770      	bx	lr

080096d4 <memcpy>:
 80096d4:	440a      	add	r2, r1
 80096d6:	4291      	cmp	r1, r2
 80096d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096dc:	d100      	bne.n	80096e0 <memcpy+0xc>
 80096de:	4770      	bx	lr
 80096e0:	b510      	push	{r4, lr}
 80096e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ea:	4291      	cmp	r1, r2
 80096ec:	d1f9      	bne.n	80096e2 <memcpy+0xe>
 80096ee:	bd10      	pop	{r4, pc}

080096f0 <_free_r>:
 80096f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096f2:	2900      	cmp	r1, #0
 80096f4:	d044      	beq.n	8009780 <_free_r+0x90>
 80096f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fa:	9001      	str	r0, [sp, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009702:	bfb8      	it	lt
 8009704:	18e4      	addlt	r4, r4, r3
 8009706:	f000 f83f 	bl	8009788 <__malloc_lock>
 800970a:	4a1e      	ldr	r2, [pc, #120]	; (8009784 <_free_r+0x94>)
 800970c:	9801      	ldr	r0, [sp, #4]
 800970e:	6813      	ldr	r3, [r2, #0]
 8009710:	b933      	cbnz	r3, 8009720 <_free_r+0x30>
 8009712:	6063      	str	r3, [r4, #4]
 8009714:	6014      	str	r4, [r2, #0]
 8009716:	b003      	add	sp, #12
 8009718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800971c:	f000 b83a 	b.w	8009794 <__malloc_unlock>
 8009720:	42a3      	cmp	r3, r4
 8009722:	d908      	bls.n	8009736 <_free_r+0x46>
 8009724:	6825      	ldr	r5, [r4, #0]
 8009726:	1961      	adds	r1, r4, r5
 8009728:	428b      	cmp	r3, r1
 800972a:	bf01      	itttt	eq
 800972c:	6819      	ldreq	r1, [r3, #0]
 800972e:	685b      	ldreq	r3, [r3, #4]
 8009730:	1949      	addeq	r1, r1, r5
 8009732:	6021      	streq	r1, [r4, #0]
 8009734:	e7ed      	b.n	8009712 <_free_r+0x22>
 8009736:	461a      	mov	r2, r3
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	b10b      	cbz	r3, 8009740 <_free_r+0x50>
 800973c:	42a3      	cmp	r3, r4
 800973e:	d9fa      	bls.n	8009736 <_free_r+0x46>
 8009740:	6811      	ldr	r1, [r2, #0]
 8009742:	1855      	adds	r5, r2, r1
 8009744:	42a5      	cmp	r5, r4
 8009746:	d10b      	bne.n	8009760 <_free_r+0x70>
 8009748:	6824      	ldr	r4, [r4, #0]
 800974a:	4421      	add	r1, r4
 800974c:	1854      	adds	r4, r2, r1
 800974e:	42a3      	cmp	r3, r4
 8009750:	6011      	str	r1, [r2, #0]
 8009752:	d1e0      	bne.n	8009716 <_free_r+0x26>
 8009754:	681c      	ldr	r4, [r3, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	6053      	str	r3, [r2, #4]
 800975a:	440c      	add	r4, r1
 800975c:	6014      	str	r4, [r2, #0]
 800975e:	e7da      	b.n	8009716 <_free_r+0x26>
 8009760:	d902      	bls.n	8009768 <_free_r+0x78>
 8009762:	230c      	movs	r3, #12
 8009764:	6003      	str	r3, [r0, #0]
 8009766:	e7d6      	b.n	8009716 <_free_r+0x26>
 8009768:	6825      	ldr	r5, [r4, #0]
 800976a:	1961      	adds	r1, r4, r5
 800976c:	428b      	cmp	r3, r1
 800976e:	bf04      	itt	eq
 8009770:	6819      	ldreq	r1, [r3, #0]
 8009772:	685b      	ldreq	r3, [r3, #4]
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	bf04      	itt	eq
 8009778:	1949      	addeq	r1, r1, r5
 800977a:	6021      	streq	r1, [r4, #0]
 800977c:	6054      	str	r4, [r2, #4]
 800977e:	e7ca      	b.n	8009716 <_free_r+0x26>
 8009780:	b003      	add	sp, #12
 8009782:	bd30      	pop	{r4, r5, pc}
 8009784:	2000298c 	.word	0x2000298c

08009788 <__malloc_lock>:
 8009788:	4801      	ldr	r0, [pc, #4]	; (8009790 <__malloc_lock+0x8>)
 800978a:	f7ff bfa1 	b.w	80096d0 <__retarget_lock_acquire_recursive>
 800978e:	bf00      	nop
 8009790:	20002988 	.word	0x20002988

08009794 <__malloc_unlock>:
 8009794:	4801      	ldr	r0, [pc, #4]	; (800979c <__malloc_unlock+0x8>)
 8009796:	f7ff bf9c 	b.w	80096d2 <__retarget_lock_release_recursive>
 800979a:	bf00      	nop
 800979c:	20002988 	.word	0x20002988

080097a0 <_init>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr

080097ac <_fini>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr
